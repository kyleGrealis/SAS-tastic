
%macro newsurv(
    /*** 1.0: Required Variables ***/
    cens=,cen_vl=0,data=,ev_vl=,method=KM,time=,
    
    /*** 2.0: Optional Variables ***/
    /** 2.1: Global Options **/
    /* 2.1.1: Output Controlling Options*/
    border=1,destination=rtf,newtable=1,out=,outdoc=,
    outp=,plot=1,summary=1,
    /* 2.1.2: Image Controlling Options*/
    antialiasmax=1000,axiscolor=black,background=white,dpi=200,
    fontcolor=black,gpath=,height=6in,plotname=_surv,plottype=png,
    svg=0,tiffdevice=TIFFP,transparent=0,width=8in, 
    /* 2.1.3: Lattice Controlling Options*/
    columns=1,nmodels=1,order=columnmajor,rows=1,
    
    /** 2.2: Class Variables **/
    class=,classcov=,classdesc=,classorder=,
    classref=,contcov=,desc=0,hrties=BRESLOW,plotpval=,
    refhrtext=Reference,refptext=--,strata=,plotpvalmv=,
    /** 2.3: Dataset Modifiers **/
    landmark=,xdivisor=, where=,
    
    /** 2.4: Patient Kaplan-Meier Time-point Estimate Options **/
    alpha=0.05,cifvar=COUNT,conftype=LOG,timelist=,
    
    /** 2.5: Plot Options **/
    /* 2.5.1: Axis Options*/
    lfamily=Arial,lsize=10pt,lweight=bold,showwalls=1,
    xincrement=,xlabel=,xmax=,xmaxoffset=,xmin=0,xminoffset=,
    xtickvalfamily=Arial,xtickvalsize=8pt,xtickvalweight=normal,
    yincrement=,ylabel=,ymax=,ymaxoffset=,ymin=0,yminoffset=,
    ytickvalfamily=Arial,ytickvalsize=8pt,ytickvalweight=normal,ytype=pct,
    /* 2.5.2: Plot Statistal Table Options*/
    autoalign=topright bottomleft,classvalalign=center,
    cindexheader=,cindexmvheader=,
    covpvalheader=Wald P-value,covpvalmvheader=Adj Wald P-value,
    display=standard,legendlinelength=,
    ev_nheader=Events/Total,eventheader=Event,hrheader=HR (95% CI),KMEstheader=KM Est (95% CI),
    legendheader=%str( ),location=inside,medianheader=Median (95% CI),n_evheader=Total (Events),
    totalmvheader=MV Total,eventmvheader=MV Event,hrmvheader=Adj HR (95% CI),
    ev_nmvheader=MV Events/Total,n_evmvheader=MV Total (Events),pvalmvheader=,
    ptabsize=8pt, ptabfamily=Albany AMT,pvalheader=,risktableheader=N at Risk,statcolor=0,tablecomments=,
    timedx=,listtimepoints=1,timelistheader=Time-Point,totalheader=Total,       
    /* 2.5.3: Patients-at-Risk Options*/
    paralign=CENTER,parfamily=Albany AMT,parheader=Patients-at-Risk,parsize=10pt,parweight=normal,
    ncensheader=No. Cumulative Censors,neventsheader=No. Cumulative Events,pardisplay=par,
    riskcolor=0,riskdivcolor=black,riskdivider=1,riskdivstyle=solid,
    risklabelalign=LEFT,risklabeldlm=,risklabellocation=LEFT,risklabelweight=normal,
    risklist=,risklocation=bottom,riskrowweights=0.025,uniformheight=0,
    /* 2.5.4: Plot Lines/Symbols Options*/
    censormarkers=1,color=black,linesize=1pt,pattern=AUTO,
    sreverse=0, symbolsize=3pt,symbolweight=normal,
    /*2.5.5: Title/Footnote Options*/
    fnfamily=Albany AMT,fnsize=8pt,fnweight=normal,
    footnote=, footnotealign=left,
    ovfnfamily=Albany AMT,ovfnsize=8pt,ovfnweight=normal,
    ovfootnote=,ovfootnotealign=left,
    ovtfamily=Albany AMT,ovtitle=,ovtitlealign=center,ovtsize=12pt,ovtweight=bold, 
    tfamily=Albany AMT,title=, titlealign=center,
    tsize=12pt,tweight=bold,
    /* 2.5.4: Reference Line Options*/
    reflines=,reflinesize=1pt,reflinepattern=2,reflinecolor=grey,reflinemethod=drop,reflineaxis=X,
    /* 2.5.5: Confidence Interval Options*/
    plotci=2,plotcifill=1,plotcifillcolor=,plotcifilltransparency=0.95,
    plotcilinecolor=,plotcilinesize=1pt,plotcilinepattern=2,
    
    /** 2.6: Optional Table Summary Options **/ 
    /* 2.6.1: Display Options */
    tablemergepval=0,tablefootnote=,
    tabledisplay=title footnote ev_n median hr timelist pval, 
    tableshading=1,tabletitle=,
    /* 2.6.2: Font Options */
    tabledatafamily=Arial,tabledatasize=9pt,tabledataweight=medium,
    tablefootnotefamily=Arial,tablefootnotesize=10pt,tablefootnoteweight=medium,
    tableheaderfamily=Arial,tableheadersize=10pt,tableheaderweight=bold,
    /* 2.6.3: Column Heading Options*/
    tcovpvalheader=Covariate Level~P-values,tcovpvalmvheader=Adjusted~Covariate Level~P-values,
    teventheader=Event,teventmvheader=MV Event,tev_nheader=Event/Total,tev_nmvheader=MV Event/Total,
    thrheader=Hazard Ratio~(95% CI),thrmvheader=Adjusted~Hazard Ratio~(95% CI),
    ttimelistheader=Survival Estimates~(95% CI),
    tmedianheader=Median~(95% CI),
    tpvalheader=P-value,tpvalmvheader=Adjusted~P-value,
    ttotalheader=Total,ttotalmvheader=MV Total, 
    tcindexheader=C-index~(95% CI),tcindexmvheader=MV C-index~(95% CI),
    /* 2.6.4: Column Width Options */
    tsubtitlewidth=2in,
    tcovpvalwidth=0.7in,tcovpvalmvwidth=0.7in,
    ttotalwidth=0.5in,teventwidth=0.5in,tev_nwidth=1in,
    ttotalmvwidth=0.5in,teventmvwidth=0.5in,tev_nmvwidth=1in,
    thrwidth=1.1in,thrmvwidth=1.1in,tmedianwidth=1.3in,
    tpvalwidth=0.7in,tpvalmvwidth=0.7in,ttimelistwidth=1.6in,
    tcindexwidth=1.1in,tcindexmvwidth=1.1in,
    /* 2.7: Statistic Significant Digits Options */
    pvaldigits=4,hrdigits=2,mediandigits=1,kmestdigits=auto,cindexdigits=2);

    /**Save current options to reset after macro runs**/
    %local _mergenoby _notes _qlm _odspath _starttime _device _gsfname
        _xmax _ymax _xpixels _ypixels _imagestyle _iback _listing _linesize _center;
    %let _starttime=%sysfunc(time());
    %let _notes=%sysfunc(getoption(notes));
    %let _mergenoby=%sysfunc(getoption(mergenoby));
    %let _qlm=%sysfunc(getoption(quotelenmax)); 
    %let _device=%sysfunc(getoption(device));
    %let _gsfname=%sysfunc(getoption(gsfname));
    %let _xmax=%sysfunc(getoption(xmax));
    %let _ymax=%sysfunc(getoption(ymax));
    %let _xpixels=%sysfunc(getoption(xpixels));
    %let _ypixels=%sysfunc(getoption(ypixels));
    %let _imagestyle=%sysfunc(getoption(imagestyle));
    %let _iback=%sysfunc(getoption(iback));
    %let _linesize=%sysfunc(getoption(linesize));
    %let _center=%sysfunc(getoption(center));
    %let _odspath=&sysodspath;
    %if %sysevalf(%superq(_odspath)=,boolean) %then %let _odspath=WORK.TEMPLAT(UPDATE) SASHELP.TMPLMST (READ);
    /**Turn off warnings for merging without a by and long quote lengths**/
    /**Turn off notes**/
    options mergenoby=NOWARN nonotes noquotelenmax;
    ods path WORK.TEMPLAT(UPDATE) SASHELP.TMPLMST (READ);
    
    /*Don't send anything to output window, results window, and set escape character*/
    ods select none;
    ods noresults escapechar='^';
    
    /**Process Error Handling**/
    %if &sysver < 9.2 %then %do;
        %put ERROR: SAS must be version 9.2 or later;
        %goto errhandl;
    %end;       
    %else %if %sysfunc(exist(&data))=0 %then %do;
        %put ERROR: Dataset &data does not exist;
        %put ERROR: Please enter a valid dataset;
        %goto errhandl;
    %end;
    %else %if %sysevalf(%superq(data)=,boolean)=1 %then %do;
        %put ERROR: DATA parameter is required;
        %put ERROR: Please enter a valid dataset;
        %goto errhandl;
    %end;
    
    /**Pull dataset information**/
    proc contents data=&data out=_temp noprint;
    run;

    /**See if the listing output is turned on**/
    proc sql noprint;
        select 1 into :_listing separated by '' from sashelp.vdest where upcase(destination)='LISTING';
    quit;
    /**Create list of macro variables that can vary across different models called**/
    /**Sets up for lattice plots**/
    %local _mvarlist;
    %let _mvarlist=%sysfunc(compress(alpha|autoalign|
        cens|cen_vl|censormarkers|class|classcov|classdesc|
        classorder|classref|classvalalign|cifvar|color|conftype|contcov|covpvalheader|covpvalmvheader|
        desc|display|ev_nheader|ev_nmvheader|ev_vl|eventheader|eventmvheader|fnfamily|fnsize|fnweight|footnote|
        footnotealign|hrheader|hrmvheader|hrties|KMEstheader|
        landmark|legendheader|legendlinelength|lfamily|linesize|listtimepoints|location|lsize|lweight|medianheader|
        method|n_evheader|n_evmvheader|paralign|parfamily|parheader|parsize|parweight|
        pattern|plotci|plotcifill|plotcifillcolor|plotcifilltransparency|
        plotcilinecolor|plotcilinesize|plotcilinepattern|    
        plotpval|plotpvalmv|pvalheader|pvalmvheader|ptabfamily|ptabsize|refhrtext|refptext|
        riskcolor|riskdivcolor|riskdivider|riskdivstyle|risklabelalign|risklabeldlm|risklabellocation|
        risklabelweight|risklist|risklocation|riskrowweights|risktableheader|sreverse|statcolor|strata|symbolsize|symbolweight|tablecomments|
        tfamily|time|timedx|timelist|timelistheader|title|titlealign|totalheader|totalmvheader|tsize|tweight|
        where|xdivisor|xincrement|xlabel|xmax|xmaxoffset|xmin|xminoffset|
        reflinecolor|reflinemethod|reflinepattern|reflines|reflinesize|reflineaxis|
        xtickvalfamily|xtickvalsize|xtickvalweight|
        ylabel|yincrement|ymax|ymaxoffset|ymin|yminoffset|ytickvalfamily|ytickvalsize|ytickvalweight|ytype|
        pvaldigits|hrdigits|mediandigits|kmestdigits|ncensheader|neventsheader|pardisplay|
        cindexheader|cindexmvheader|cindexdigits));
    %local i j;
    %do i = 1 %to &nmodels;
        /**Cycle through each macro parameter**/
        %do j = 1 %to %sysfunc(countw(&_mvarlist,|));
            %local v&j;
            %let v&j=%scan(%superq(_mvarlist),&j,|);
            %local &&v&j..&i;
            /**If the | delimiter is detected, assign the different values between | to numbered parameters**/
            /**Else Assign the same value to all numbered parameters**/
            %if %index(%superq(&&v&j),|)>0 %then %let &&v&j..&i=%qscan(%superq(&&v&j),&i,|,m);
            %else %let &&v&j..&i=%qscan(%superq(&&v&j),1,|,m); 
        %end;                
    %end;                       
    %local z nerror;
    %let nerror=0;
    /**Error Handling on Individual Model Variables**/
    %macro _varcheck(var,require,numeric);
        %local _z _numcheck;
        %do z = 1 %to &nmodels;
            /**Check if variable parameter is missing**/
            %if %sysevalf(%superq(&var.&z)=,boolean)=0 %then %do;
                %if %sysfunc(notdigit(%superq(&var.&z))) > 0 %then
                    %do _z = 1 %to %sysfunc(countw(%superq(&var.&z),%str( )));
                    /**Check to make sure variable names are not just numbers**/    
                    %local datid;
                    /**Open up dataset to check for variables**/
                    %let datid = %sysfunc(open(&data));
                    /**Check if variable exists in dataset**/
                    %if %sysfunc(varnum(&datid,%scan(%superq(&var.&z),&_z,%str( )))) = 0 %then %do;
                        %put ERROR: (Model &z: %qupcase(&var)) Variable %qupcase(%scan(%superq(&var.&z),&_z,%str( ))) does not exist in dataset &data;
                        %local closedatid;
                        /**Close dataset**/
                        %let closedatid=%sysfunc(close(&datid));
                        %let nerror=%eval(&nerror+1);
                    %end;
                    %else %do;
                        %local closedatid;
                        %let closedatid=%sysfunc(close(&datid));
                        %if &numeric=1 %then %do;
                            data _null_;
                                set &data (obs=1);
                                call symput('_numcheck',strip(vtype(%superq(&var.&z))));
                            run;
                            %if %sysevalf(%superq(_numcheck)^=N,boolean) %then %do;
                                %put ERROR: (Model &z: %qupcase(&var)) Variable must be numeric;
                                %let nerror=%eval(&nerror+1);
                            %end;   
                        %end;                         
                    %end;
                %end;
                %else %do;
                    /**Give error message if variable name is number**/
                    %put ERROR: (Model &z: %qupcase(&var)) Variable is not a valid SAS variable name (%superq(&var.&z));
                    %let nerror=%eval(&nerror+1);
                %end;
            %end;
            %else %if &require=1 %then %do;
                /**Give error if required variable is missing**/
                %put ERROR: (Model &z: %qupcase(&var)) Variable is a required variable but has no value;
                %let nerror=%eval(&nerror+1);
            %end;
        %end;
    %mend;
    /**Check time variables**/
    %_varcheck(time,1,1)
    /**Censor Variables**/
    %_varcheck(cens,1,1)
    /**Class Variables**/
    %_varcheck(class,0)
    /**Strata Variables**/
    %_varcheck(strata,0)
    /**Class Type Covariate Variables**/
    %_varcheck(classcov,0)
    /**Continuous Type Covariate Variables**/
    %_varcheck(contcov,0)
    /**Landmark Variables**/
    %do z = 1 %to &nmodels;
        /**Check if variable parameter is missing**/
        %if %sysevalf(%superq(landmark&z)=,boolean)=0 %then %do;
            %if %sysfunc(notdigit(%sysfunc(compress(%superq(landmark&z),.-)))) > 0 %then %do;
                /*Check if number is first digit*/
                %if %sysfunc(anydigit(%sysfunc(compress(%superq(landmark&z),.-)))) = 1 %then %do;
                    %put ERROR: (Model &z: %qupcase(landmark)) Must be a valid variable name or a number greater than 0. %qupcase(%superq(landmark&z)) is not valid.;
                    %let nerror=%eval(&nerror+1);
                %end;
                %else %do;
                    /**Check to make sure variable names are not just numbers**/
                    %local datid;
                    /**Open up dataset to check for variables**/
                    %let datid = %sysfunc(open(&data));
                    /**Check if variable exists in dataset**/
                    %if %sysfunc(varnum(&datid,%superq(landmark&z))) = 0 %then %do;
                        %put ERROR: (Model &z: %qupcase(landmark)) Variable %qupcase(%superq(landmark&z)) does not exist in dataset &data;
                        %local closedatid;
                        /**Close dataset**/
                        %let closedatid=%sysfunc(close(&datid));
                        %let nerror=%eval(&nerror+1);
                    %end;
                    %else %do;
                        %local closedatid;
                        %let closedatid=%sysfunc(close(&datid));
                    %end;
                %end;
            %end;
            %else %if %superq(landmark&z) lt 0 %then %do;
                /**Check if value is below minimum threshold**/
                %put ERROR: (Model &z: %qupcase(landmark)) Must be greater than 0. %qupcase(%superq(landmark&z)) is not valid.;
                %let nerror=%eval(&nerror+1);
            %end;  
        %end;
    %end;
    
             
    /**Error Handling on Individual Model Parameters Involving units**/
    %macro _unitcheck(parm,allowmissing);
        %do z = 1 %to &nmodels;
            %if %sysevalf(%superq(&parm.&z)=,boolean)=1 %then %do;
                %if %sysevalf(&allowmissing^=1,boolean) %then %do;
                    /**Check for missingness**/
                    %put ERROR: (Model &z: %qupcase(&parm)) Cannot be set to missing;
                    %let nerror=%eval(&nerror+1);
                 %end;
            %end;
            %else %if %sysfunc(compress(%superq(&parm.&z),ABCDEFGHIJKLMNOPQRSTUVWXYZ,i)) lt 0 %then %do;
                /**Check if value is less than zero**/
                %put ERROR: (Model &z: %qupcase(&parm)) Cannot be less than zero (%qupcase(%superq(&parm.&z)));
                %let nerror=%eval(&nerror+1);
            %end;
        %end;
    %mend;
    /**Font Sizes**/
    /*Y Tick Value Font Size**/
    %_unitcheck(ytickvalsize)
    /**X Tick Value Font Size**/
    %_unitcheck(xtickvalsize)
    /***Label Font Size**/
    %_unitcheck(lsize)
    /**Plot Table Font Size**/
    %_unitcheck(ptabsize)
    /**Title Font Size**/
    %_unitcheck(tsize)
    /**Footnote Font Size**/
    %_unitcheck(fnsize)
    /***Patients-at-Risk Header Font Size**/
    %_unitcheck(parsize)
    /**Plot Line Size**/
    %_unitcheck(linesize)
    /**Plot Symbol Size**/
    %_unitcheck(symbolsize)
    /**Plot Confidence Bounds Line Size**/
    %_unitcheck(plotcilinesize)
    /**Plot Reference Line Size**/
    %_unitcheck(reflinesize)
    /**Plot Reference Line Size**/
    %_unitcheck(legendlinelength,1)
    /**Error Handling on Individual Model Numeric Variables**/
    %macro _numcheck(parm,min,contain,default);
        %do z = 1 %to &nmodels;
            /**Check if missing**/
            %if %sysevalf(%superq(&parm.&z)=,boolean)=0 %then %do;
                %if %sysfunc(notdigit(%sysfunc(compress(%superq(&parm.&z),-.)))) > 0 %then %do;
                    /**Check if character values are present**/
                    %put ERROR: (Model &z: %qupcase(&parm)) Must be numeric.  %qupcase(%superq(&parm.&z)) is not valid.;
                    %let nerror=%eval(&nerror+1);
                %end;  
                %else %if %superq(&parm.&z) le &min and &contain=0 %then %do;
                    /**Check if value is below minimum threshold**/
                    %put ERROR: (Model &z: %qupcase(&parm)) Must be greater than &min..  %qupcase(%superq(&parm.&z)) is not valid.;
                    %let nerror=%eval(&nerror+1);
                %end;  
                %else %if %superq(&parm.&z) lt &min and &contain=1 %then %do;
                    /**Check if value is below minimum threshold**/
                    %put ERROR: (Model &z: %qupcase(&parm)) Must be greater than or equal to &min..  %qupcase(%superq(&parm.&z)) is not valid.;
                    %let nerror=%eval(&nerror+1);
                %end; 
            %end;   
            %else %let &parm.&z=&default;        
        %end;
    %mend;
    /**X Axis Minimum Value**/
    %_numcheck(xmin,0,1,0)
    /**Y Axis Minimum Value**/
    %_numcheck(ymin,0,1,0) 
    /**Y Axis Minimum Value**/
    %_numcheck(alpha,0,0,0.05) 
    /**Censor Value**/
    %do z = 1 %to &nmodels;
        /**Check if missing**/
        %if %sysevalf(%superq(cen_vl&z)=,boolean)=0 %then %do;
            %if %sysfunc(notdigit(%sysfunc(compress(%superq(CEN_VL&z),.)))) > 0 %then %do;
                /**Check if character values are present**/
                %put ERROR: (Model &z: %qupcase(CEN_VL)) Must be numeric.  %qupcase(%superq(CEN_VL&z)) is not valid.;
                %let nerror=%eval(&nerror+1);
            %end;  
        %end;   
        %else %do;
            /**Check if character values are present**/
            %put ERROR: (Model &z: %qupcase(CEN_VL)) Is Required and cannot be missing;
            %let nerror=%eval(&nerror+1);
        %end; 
    %end;   
    /**Event Code for CIF Method**/
    %do z = 1 %to &nmodels;
        %if %sysevalf(%qupcase(%superq(method&z))=CIF,boolean) %then %do;
            /**Check if missing**/
            %if %sysevalf(%superq(ev_vl&z)=,boolean)=0 %then %do;
                %if %sysfunc(notdigit(%sysfunc(compress(%superq(EV_VL&z),.)))) > 0 %then %do;
                    /**Check if character values are present**/
                    %put ERROR: (Model &z: %qupcase(EV_VL)) Must be numeric.  %qupcase(%superq(EV_VL&z)) is not valid.;
                    %let nerror=%eval(&nerror+1);
                %end;  
            %end;   
            %else %do;
                /**Check if character values are present**/
                %put ERROR: (Model &z: %qupcase(EV_VL)) Is Required and cannot be missing when METHOD=CIF;
                %let nerror=%eval(&nerror+1);
            %end; 
        %end;
    %end;             
    /***Error checking for RISKROWWEIGHTS***/
    %do z = 1 %to &nmodels;
        /**Check if RISKROWWEIGHTS is missing when RISKLOCATION is set to BOTTOM**/
        %if %sysevalf(%superq(riskrowweights&z)=,boolean)=0 and %superq(risklocation&z)=BOTTOM %then %do;
            %if %sysfunc(notdigit(%sysfunc(compress(%superq(riskrowweights&z),.-)))) %then %do;
                %put ERROR: (Model &z: RISKROWWEIGHTS) Must be a numeric value (%superq(riskrowweights&z));
                %put ERROR: Macro NEWSURV will cease;
                %let nerror=%eval(&nerror+1);
            %end;
            %else %if %sysevalf(%superq(riskrowweights&z)<0,boolean)=1 or %sysevalf(%superq(riskrowweights&z)>=1.0,boolean)=1 %then %do;
                %put ERROR: (Model &z: RISKROWWEIGHTS) Is not between 0 and 1 (%superq(riskrowweights&z));
                %put ERROR: Macro NEWSURV will cease;
                %let nerror=%eval(&nerror+1);
            %end;
        %end;
        %else %if %superq(risklocation&z)=BOTTOM %then %do;
            %put ERROR: (Model &z: RISKROWWEIGHTS) No risk row weights specified when risklocation=BOTTOM;
            %put ERROR: Macro NEWSURV will cease;
            %let nerror=%eval(&nerror+1);
        %end;
    %end;
        
    /**Error Handling on Individual Model Parameters**/
    %macro _parmcheck(parm, parmlist,kmlist,ciflist);
        %do z = 1 %to &nmodels;  
            %if %sysevalf(%superq(&parm.&z)=,boolean)=0 %then %let &parm.&z=%sysfunc(compress(%qupcase(%superq(&parm.&z)),'""'));
            %local _test _z;
            %let _test=;
            %if %sysevalf(%superq(parmlist)^=,boolean) %then %do;
                %do _z=1 %to %sysfunc(countw(&parmlist,|,m));
                    %if %superq(&parm.&z)=%scan(&parmlist,&_z,|,m) %then %let _test=1;
                %end;
                %if &_test ^= 1 %then %do;
                    %put ERROR: (Model &z: %qupcase(&parm)): %superq(&parm.&z) is not a valid value;
                    %put ERROR: (Model &z: %qupcase(&parm)): Possible values are &parmlist;
                    %let nerror=%eval(&nerror+1);
                %end;
            %end;
            %else %do;
                %if %sysevalf(%qupcase(%superq(method&z))=KM,boolean) %then %do;
                    %do _z=1 %to %sysfunc(countw(&kmlist,|,m));
                        %if %superq(&parm.&z)=%scan(&kmlist,&_z,|,m) %then %let _test=1;
                    %end;
                    %if &_test ^= 1 %then %do;
                        %put ERROR: (Model &z: %qupcase(&parm)): %superq(&parm.&z) is not a valid value;
                        %put ERROR: (Model &z: %qupcase(&parm)): Possible values for Kaplan-Meier method are &kmlist;
                        %let nerror=%eval(&nerror+1);
                    %end;
                %end;
                %if %sysevalf(%qupcase(%superq(method&z))=CIF,boolean) %then %do;
                    %do _z=1 %to %sysfunc(countw(&ciflist,|,m));
                        %if %superq(&parm.&z)=%scan(&ciflist,&_z,|,m) %then %let _test=1;
                    %end;
                    %if &_test ^= 1 %then %do;
                        %put ERROR: (Model &z: %qupcase(&parm)): %superq(&parm.&z) is not a valid value;
                        %put ERROR: (Model &z: %qupcase(&parm)): Possible values for Competing Risks method are &ciflist;
                        %let nerror=%eval(&nerror+1);
                    %end;
                %end;
            %end;
        %end;
    %mend;
    /**Method**/
    %_parmcheck(method,KM|CIF) 
    /**Y axis Type**/
    %_parmcheck(ytype,PPT|PCT)    
    /**Risk List Location**/
    %_parmcheck(risklocation,|BOTTOM|INSIDE|TIMELIST)
    /**Inside Risk List Dividor Line On/Off Option**/
    %_parmcheck(riskdivider,0|1)
    /**Class Descending Order**/
    %_parmcheck(desc,0|1)
    /**Set possible default differences between KM and CIF methods**/
    %local z;
    %do z = 1 %to &nmodels;
        %if %sysevalf(%qupcase(%superq(method&z))=KM) %then %do;
            %if %sysevalf(%superq(plotpval&z)=,boolean) %then %let plotpval&z=LOGRANK;
            %if %sysevalf(%superq(plotpvalmv&z)=,boolean) %then %let plotpvalmv&z=LR;
        %end;
        %else %if %sysevalf(%qupcase(%superq(method&z))=CIF) %then %do;
            %if %sysevalf(%superq(plotpval&z)=,boolean) %then %let plotpval&z=GRAY;
            %else %if %sysevalf(%qupcase(%superq(plotpval&z))=WALD,boolean) and &sysvlong < 9.04.01M1 %then %do;
                %put ERROR: (Model &z: PLOTPVAL): Wald p-value unavailable in competing risks analysis when SAS version is less than 9.4M1;
                %put ERROR: (Model &z: PLOTPVAL): Please use GRAY for Grays test for equality of cumulative incidence functions instead;
                %let nerror=%eval(&nerror+1);
            %end;
            %if %sysevalf(%superq(plotpvalmv&z)=,boolean) and &sysvlong >= 9.04.01M1 %then %let plotpvalmv&z=WALD;
            %else %if %sysevalf(%qupcase(%superq(plotpvalmv&z))=WALD,boolean) and &sysvlong < 9.04.01M1 %then %do;
                %put ERROR: (Model &z: PLOTPVALMV): Adjusted Wald p-value unavailable in competing risks analysis when SAS version is less than 9.4M1;
                %let nerror=%eval(&nerror+1);
            %end;
        %end; 
    %end; 
    /**Confidence Interval Type**/
    %_parmcheck(conftype,,LOG|ASINSQRT|LOGLOG|LINEAR|LOGIT,LOG|ASINSQRT|LOGLOG|LINEAR|LOGIT)
    /**CIF Variance Calculation Method**/
    %_parmcheck(cifvar,COUNT|DELTA,COUNT|DELTA)
    /**Plot P-Value**/
    %_parmcheck(plotpval,,SCORE|LR|LOGRANK|WILCOXON|WALD|%str( ),WALD|GRAY|%str( ))
    /**Adjusted Plot P-Value**/
    %_parmcheck(plotpvalmv,,SCORE|LR|WALD|%str( ),WALD|%str( ))
    /**S-Reverse Options**/  
    %_parmcheck(sreverse,,0|1,0)
    /**Censor Values On/Off Option**/
    %_parmcheck(censormarkers,0|1)
    /**Class Value Align Option**/
    %_parmcheck(classvalalign,LEFT|CENTER|RIGHT)
    /**Title Align Option**/
    %_parmcheck(titlealign,LEFT|CENTER|RIGHT)
    /**Foot Note Align Option**/
    %_parmcheck(footnotealign,LEFT|CENTER|RIGHT)
    /**X-axis tick value weight Option**/
    %_parmcheck(xtickvalweight,NORMAL|BOLD)
    /**Y-axis tick value weight Option**/
    %_parmcheck(ytickvalweight,NORMAL|BOLD)
    /**Location Options**/
    %_parmcheck(location,INSIDE|OUTSIDE)
    /**Label weight Option**/
    %_parmcheck(lweight,NORMAL|BOLD)
    /**Title weight Option**/
    %_parmcheck(tweight,NORMAL|BOLD)
    /**Footnote weight Option**/
    %_parmcheck(fnweight,NORMAL|BOLD)
    /**Patients-at-Risk weight Option**/
    %_parmcheck(parweight,NORMAL|BOLD)
    /**Hazard Ratio Ties Method Option**/
    %_parmcheck(hrties,BRESLOW|DISCRETE|EFRON|EXACT)
    /**Risk Table Label Location Option**/
    %_parmcheck(risklabellocation,LEFT|ABOVE|)
    /**Risk Table Label Alignment Option**/
    %_parmcheck(risklabelalign,LEFT|CENTER|RIGHT)
    /**Risk Table Patients-at-Risk Subheader Alignment Option**/
    %_parmcheck(paralign,LEFT|CENTER|RIGHT|LABELS)
    /**Risk Table Label weight Option**/
    %_parmcheck(risklabelweight,NORMAL|BOLD)
    /**Risk Numbers and Colors Option**/
    %_parmcheck(riskcolor,0|1)
    /**List Time-points in Plot Summary Table Option**/
    %_parmcheck(listtimepoints,0|1)
    /**Color Statistics in Plot Summary Table Option**/
    %_parmcheck(statcolor,0|1)
    /**Plot Confidence Intervals Enabled**/
    %_parmcheck(plotci,0|1|2)
    /**Plot Confidence Intervals Background Fill Enabled**/
    %_parmcheck(plotcifill,0|1)
    /**Plot X Reference Line Location**/
    %_parmcheck(reflines,|TIMEPOINTS|MEDIANS)
    /**Plot Reference Line Method**/
    %_parmcheck(reflinemethod,FULL|DROP)
    /**Plot Reference Line Axis**/
    %_parmcheck(reflineaxis,X|Y|BOTH)
    /**Symbol Weight**/
    %_parmcheck(symbolweight,NORMAL|BOLD)
    
    /**Auto Align Options**/
    %local _z _z2 _test;
    %do z = 1 %to &nmodels;
        /**Check for missing values**/
        %if %sysevalf(%superq(autoalign&z)=,boolean)=0 %then %do _z2=1 %to %sysfunc(countw(%superq(autoalign&z),%str( )));
            /**Check all given values against the possible allowed values**/
            %let _test=;
            %do _z = 1 %to %sysfunc(countw(TOPLEFT|TOP|TOPRIGHT|LEFT|CENTER|RIGHT|BOTTOMLEFT|BOTTOM|BOTTOMRIGHT,|));
                %if %qupcase(%scan(%superq(autoalign&z),&_z2,%str( )))=%scan(TOPLEFT|TOP|TOPRIGHT|LEFT|CENTER|RIGHT|BOTTOMLEFT|BOTTOM|BOTTOMRIGHT,&_z,|,m) %then %let _test=1;
            %end;
            /**If any values are not in the possible list then throw an error**/
            %if &_test ^= 1 %then %do;
                %put ERROR: (Model &z: %qupcase(autoalign)): %qupcase(%scan(%superq(autoalign&z),&_z2,%str( ))) is not in the list of valid values;
                %put ERROR: (Model &z: %qupcase(autoalign)): Possible values are TOPLEFT|TOP|TOPRIGHT|LEFT|CENTER|RIGHT|BOTTOMLEFT|BOTTOM|BOTTOMRIGHT;
                %let nerror=%eval(&nerror+1);
            %end;
        %end;
        %else %do;
            /**If missing then show error**/
            %put ERROR: (Model &z: %qupcase(autoalign)): Cannot be missing;
            %put ERROR: (Model &z: %qupcase(autoalign)): Possible values are TOPLEFT|TOP|TOPRIGHT|LEFT|CENTER|RIGHT|BOTTOMLEFT|BOTTOM|BOTTOMRIGHT;
            %let nerror=%eval(&nerror+1);
        %end;           
    %end;
    /**Plot Display Variables**/
    %local _z _z2 _test _displaylist;
    %do z = 1 %to &nmodels;
        %if %sysevalf(%qupcase(%superq(display&z))=STANDARD,boolean) %then %do;
            %if %sysevalf(%qupcase(%superq(method&z))=KM,boolean) and %sysevalf(%superq(class&z)^=,boolean) %then %let display&z=legend ev_n median hr timelist pval tablecomments;
            %else %if %sysevalf(%qupcase(%superq(method&z))=KM,boolean) and %sysevalf(%superq(class&z)=,boolean) %then %let display&z=ev_n median timelist tablecomments;
            %else %if %sysevalf(%qupcase(%superq(method&z))=CIF,boolean) and &sysvlong < 9.04.01M1 %then %let display&z=legend total event median timelist pval tablecomments;
            %else %if %sysevalf(%qupcase(%superq(method&z))=CIF,boolean) and &sysvlong >= 9.04.01M1 %then %let display&z=legend total event median hr timelist pval tablecomments;
        %end;
        %if %sysevalf(%qupcase(%superq(method&z))=KM,boolean) %then 
            %let _displaylist=legend|hr|median|total|event|ev_n|n_ev|timelist|pval|cindex|tablecomments|totalmv|eventmv|ev_nmv|n_evmv|hrmv|pvalmv|cindexmv|covpval|covpvalmv;
        %else %if %sysevalf(%qupcase(%superq(method&z))=CIF,boolean) %then %do;
            %if &sysvlong >= 9.04.01M1 %then %let _displaylist=legend|hr|median|total|event|ev_n|n_ev|timelist|pval|tablecomments|totalmv|eventmv|ev_nmv|n_evmv|hrmv|pvalmv|covpval|covpvalmv;
            %else %let _displaylist=legend|median|total|event|ev_n|n_ev|timelist|pval|tablecomments;
        %end;
        /**Check for missing values**/
        %if %sysevalf(%superq(display&z)=,boolean)=0 %then %do _z2=1 %to %sysfunc(countw(%superq(display&z),%str( )));
            /**Check all given values against the possible allowed values**/
            %let _test=;
            %do _z = 1 %to %sysfunc(countw(&_displaylist,|));
                %if %qupcase(%scan(%superq(display&z),&_z2,%str( )))=%scan(%qupcase(&_displaylist),&_z,|,m) %then %let _test=1;
            %end;
            /**If any values are not in the possible list then throw an error**/
            %if &_test ^= 1 %then %do;
                %put ERROR: (Model &z: %qupcase(display)): %qupcase(%scan(%superq(display&z),&_z2,%str( ))) is not in the list of valid values;
                %put ERROR: (Model &z: %qupcase(display)): Possible values are %qupcase(&_displaylist);
                %if %sysevalf(%qupcase(%superq(method&z))=CIF,boolean) and &sysvlong < 9.04.01M1 %then 
                    %put ERROR: (Model &z: %qupcase(display)): Hazard ratios for competing risks are only available in SAS 9.4M1 or later;
                %let nerror=%eval(&nerror+1);
            %end;
        %end;
    %end;
    /**Plot Patients-at-Risk Display Variables**/
    %local _z _z2 _test _displaylist;
    %do z = 1 %to &nmodels;
        %let _displaylist=par|ncens|nevents|par_ncens|par_nevents;
        %if %sysevalf(%superq(risklist&z)^=,boolean) %then %do;
            /**Check for missing values**/
            %if %sysevalf(%superq(pardisplay&z)=,boolean)=0 %then %do _z2=1 %to %sysfunc(countw(%superq(pardisplay&z),%str( )));
                /**Check all given values against the possible allowed values**/
                %let _test=;
                %do _z = 1 %to %sysfunc(countw(&_displaylist,|));
                    %if %qupcase(%scan(%superq(pardisplay&z),&_z2,%str( )))=%scan(%qupcase(&_displaylist),&_z,|,m) %then %let _test=1;
                %end;
                /**If any values are not in the possible list then throw an error**/
                %if &_test ^= 1 %then %do;
                    %put ERROR: (Model &z: %qupcase(pardisplay)): %qupcase(%scan(%superq(pardisplay&z),&_z2,%str( ))) is not in the list of valid values;
                    %put ERROR: (Model &z: %qupcase(pardisplay)): Possible values are %qupcase(&_displaylist);
                    %let nerror=%eval(&nerror+1);
                %end;
            %end;
        %end;
    %end;
    /**Line Pattern Variables**/
    %macro _linepattern(parm=,_patternlist=AUTO|SOLID|SHORTDASH|MEDIUMDASH|LONGDASH|MEDIUMDASHSHORTDASH|
        DASHDASHDOT|DASH|LONGDASHSHORTDASH|DOT|THINDOT|SHORTDASHDOT|MEDIUMDASHDOTDOT);
        %local _z _z2 _test;
        %do z = 1 %to &nmodels;
            /**Check for missing values**/
            %if %sysevalf(%superq(&parm.&z)=,boolean)=0 %then %do _z2=1 %to %sysfunc(countw(%superq(&parm.&z),%str( )));
                %let _test=;
                /**Check if values are either in the approved list, or are between 1 and 46**/
                %if %sysfunc(notdigit(%scan(%superq(&parm.&z),&_z2,%str( ))))>0 %then %do _z = 1 %to %sysfunc(countw(&_patternlist,|));
                    %if %qupcase(%scan(%superq(&parm.&z),&_z2,%str( )))=%scan(%qupcase(%sysfunc(compress(&_patternlist))),&_z,|,m) %then %let _test=1;
                %end;
                %else %if %scan(%superq(&parm.&z),&_z2,%str( )) ge 1 and %scan(%superq(&parm.&z),&_z2,%str( )) le 46 %then %let _test=1;
                %if &_test ^= 1 %then %do;
                    /**Throw error**/
                    %put ERROR: (Model &z: %qupcase(&parm.)): %qupcase(%scan(%superq(&parm.&z),&_z2,%str( ))) is not in the list of valid values;
                    %put ERROR: (Model &z: %qupcase(&parm.)): Possible values are %qupcase(&_patternlist) or Numbers Between 1 and 46;
                    %let nerror=%eval(&nerror+1);
                %end;
            %end;
            %else %do;
                /**Throw error**/
                %put ERROR: (Model &z: %qupcase(&parm.)): %qupcase(%superq(&parm.&z)) is not in the list of valid values;         
                %put ERROR: (Model &z: %qupcase(&parm.)): Possible values are %qupcase(&_patternlist) or Numbers Between 1 and 46;
                %let nerror=%eval(&nerror+1);       
            %end;
        %end;
    %mend;
    /**Plot Line Patterns**/
    %_linepattern(parm=pattern)
    /**Patients-at-Risk INSIDE option Dividor Line Style**/
    %_linepattern(parm=riskdivstyle)
    /**Plot Confidence Bounds Confidence Interval**/
    %_linepattern(parm=plotcilinepattern)
    /**Plot X Referenceline line style**/
    %_linepattern(parm=reflinepattern)
        
    /**Range Value Check**/
    %macro _rangecheck(parm=,min=,max=,incmax=,incmin=);
        %do z = 1 %to &nmodels;
            /**Check for missing values**/
            %if %sysevalf(%superq(&parm.&z)=,boolean)=0 %then %do;
                %if %sysfunc(notdigit(%sysfunc(compress(%superq(&parm.&z),-.)))) > 0 %then %do;
                    /**Checks for character values**/
                    %put ERROR: (Model &z: %qupcase(&parm.)) Must be numeric. %qupcase(%superq(&parm.&z)) is not valid.;
                    %let nerror=%eval(&nerror+1);
                %end;
                %else %if %superq(&parm.&z) le &min and &incmin=0 %then %do;
                    /**Checks if less than or equal to min**/
                    %put ERROR: (Model &z: %qupcase(&parm.)) Cannot be less than or equal to &min (%superq(&parm.&z));
                    %let nerror=%eval(&nerror+1);
                %end;
                %else %if %superq(&parm.&z) lt &min %then %do;
                    /**Checks if less than min**/
                    %put ERROR: (Model &z: %qupcase(&parm.)) Cannot be less than &min (%superq(&parm.&z));
                    %let nerror=%eval(&nerror+1);
                %end;
                %else %if %superq(&parm.&z) ge &max and &incmax=0 %then %do;
                    /**Checks if greater than or equal to max**/
                    %put ERROR: (Model &z: %qupcase(&parm.)) Cannot be Greater Than or Equal to &max;
                    %let nerror=%eval(&nerror+1);
                %end;
                %else %if %superq(&parm.&z) gt &max %then %do;
                    /**Checks if greater than max**/
                    %put ERROR: (Model &z: %qupcase(&parm.)) Cannot be Greater Than &max;
                    %let nerror=%eval(&nerror+1);
                %end;
            %end;
        %end; 
    %mend; 
    /**X Axis Minimum offset Value**/
    %_rangecheck(parm=xminoffset,min=0,max=1,incmax=0,incmin=1)
    /**Y Axis Minimum offset Value**/
    %_rangecheck(parm=yminoffset,min=0,max=1,incmax=0,incmin=1)
    /**X Axis Maximum offset Value**/
    %_rangecheck(parm=xmaxoffset,min=0,max=1,incmax=0,incmin=1)
    /**Y Axis Maximum offset Value**/
    %_rangecheck(parm=ymaxoffset,min=0,max=1,incmax=0,incmin=1)
    /**Plot Confidence Intervals transparency**/
    %_rangecheck(parm=plotcifilltransparency,min=0,max=1,incmax=1,incmin=1)
    
    /**Y Axis Maximum Value**/
    %do z = 1 %to &nmodels;
        /**Check for missing values**/
        %if %sysevalf(%superq(ymax&z)=,boolean)=0 %then %do;
            %if %sysfunc(notdigit(%sysfunc(compress(%superq(ymax&z),-.)))) > 0 %then %do;
                /**Checks for character values**/
                %put ERROR: (Model &z: %qupcase(ymax)) Must be numeric.  %qupcase(%superq(ymax&z)) is not valid.;
                %let nerror=%eval(&nerror+1);
            %end;
            %else %if %superq(ymax&z) le %superq(ymin&z) %then %do;
                /**Makes sure the maximum is not less than the minimum**/
                %put ERROR: (Model &z: %qupcase(ymax)) Cannot be less than or equal to YMIN (%superq(ymax&z) vs. %superq(ymin&z));
                %let nerror=%eval(&nerror+1);
            %end;
            %else %if (%superq(ymax&z) gt 100 and %qupcase(%superq(ytype&z))=PCT) or 
                (%superq(ymax&z) gt 1 and %qupcase(%superq(ytype&z))=PPT) %then %do;
                /**Makes sure the maximum cannot be greater than the maximum survival estimate**/
                %if %qupcase(%superq(ytype))=PPT %then %do;
                    %put ERROR: (Model &z: %qupcase(ymax)) Cannot be Greater Than 1 When YTYPE=PPT;
                    %let nerror=%eval(&nerror+1);
                %end;
                %else %if %qupcase(%superq(ytype))=PCT %then %do;
                    %put ERROR: (Model &z: %qupcase(ymax)) Cannot be Greater Than 100 When YTYPE=PCT;
                    %let nerror=%eval(&nerror+1);
                %end;
            %end;
        %end;
        %else %if %qupcase(%superq(ytype&z))=PPT %then %let ymax&z=1;
        %else %if %qupcase(%superq(ytype&z))=PCT %then %let ymax&z=100;
    %end;
    
    /**Y Axis Increment Value**/
    %do z = 1 %to &nmodels;
        /**Check for missing values**/
        %if %sysevalf(%superq(yincrement&z)=,boolean)=0 %then %do;
            %if %sysfunc(notdigit(%sysfunc(compress(%superq(yincrement&z),-.)))) > 0 %then %do;
                /**Checks for character values**/
                %put ERROR: (Model &z: %qupcase(yincrement)) Must be numeric.  %qupcase(%superq(yincrement&z)) is not valid.;
                %let nerror=%eval(&nerror+1);
            %end;
            %else %if %superq(yincrement&z) gt %sysevalf(%superq(ymax&z)-%superq(ymin&z)) %then %do;                    
                /**Makes sure the increment is not greater than the distance between max and min**/
                %put ERROR: (Model &z: %qupcase(yincrement)) Cannot be less than or equal to difference between YMAX and YMIN (%superq(yincrement&z) vs. %sysfunc(sum(%superq(ymax&z),-%superq(ymin&z))));
                %let nerror=%eval(&nerror+1);
            %end;
            %else %if %superq(yincrement&z) le 0 %then %do;
                /**Makes sure the increment is greater than zero**/
                %put ERROR: (Model &z: %qupcase(yincrement)) Cannot be less than or equal to 0;
                %let nerror=%eval(&nerror+1);
            %end;
        %end;
        %else %if %qupcase(%superq(ytype&z))=PPT %then %let yincrement&z=0.1;
        %else %if %qupcase(%superq(ytype&z))=PCT %then %let yincrement&z=10;
    %end;
            
    /**Error Handling on Global Parameters**/
    %macro _gparmcheck(parm, parmlist);          
        %local _test _z;
        /**Check if values are in approved list**/
        %do _z=1 %to %sysfunc(countw(&parmlist,|,m));
            %if %qupcase(%superq(&parm))=%qupcase(%scan(&parmlist,&_z,|,m)) %then %let _test=1;
        %end;
        %if &_test ^= 1 %then %do;
            /**If not then throw error**/
            %put ERROR: (Global: %qupcase(&parm)): %superq(&parm) is not a valid value;
            %put ERROR: (Global: %qupcase(&parm)): Possible values are &parmlist;
            %let nerror=%eval(&nerror+1);
        %end;
    %mend;
    /**Plot On/Off Options**/
    %_gparmcheck(plot,0|1)
    /**Summary On/Off Options**/
    %_gparmcheck(summary,0|1)
    /**Plot Wall On/Off Options**/
    %_gparmcheck(showwalls,0|1)
    /**New Table On/Off Options**/
    %_gparmcheck(newtable,0|1)
    /**Lattice Order Options**/
    %_gparmcheck(order,COLUMNMAJOR|ROWMAJOR)
    /**Destination Options**/
    %if &sysvlong >= 9.04.01M3P062415 %then %do;
        %_gparmcheck(destination,RTF|PDF|HTML|EXCEL|POWERPOINT)
    %end;
    %else %do;        
        %_gparmcheck(destination,RTF|PDF|HTML)
    %end;
    /**Overall Title weight Option**/
    %_gparmcheck(ovtweight,NORMAL|BOLD)
    /**Overall Footnote weight Option**/
    %_gparmcheck(ovfnweight,NORMAL|BOLD)
    /**Table Header weight Option**/
    %_gparmcheck(tableheaderweight,MEDIUM|BOLD)
    /**Table Footnote weight Option**/
    %_gparmcheck(tablefootnoteweight,MEDIUM|BOLD)
    /**Table Data Columns weight Option**/
    %_gparmcheck(tabledataweight,MEDIUM|BOLD)
    /**Overall Title Align Option**/
    %_gparmcheck(ovtitlealign,LEFT|CENTER|RIGHT)
    /**Overall Foot Note Align Option**/
    %_gparmcheck(ovfootnotealign,LEFT|CENTER|RIGHT) 
    /**Border around plot image Option**/
    %_gparmcheck(border,0|1)
    /**Transparent Background Option**/
    %if &sysvlong >= 9.04.01M3P062415 %then %do;
        %_gparmcheck(transparent,0|1)
    %end;
    %else %do;
        %_gparmcheck(transparent,0)
    %end;    
    /**Table Background Shading**/
    %_gparmcheck(tableshading,0|1)
    /**Uniform Height below X-axis**/
    %_gparmcheck(uniformheight,0|1)
    /**Merge covariate p-values into overall p-value column**/
    %_gparmcheck(tablemergepval,0|1)
    /*Tiff Device Check*/
    %if %sysevalf(%qupcase(&plottype)=TIFF,boolean) or  %sysevalf(%qupcase(&plottype)=TIF,boolean) %then %do;
        ods output gdevice=_gdevice;
        proc gdevice catalog=sashelp.devices nofs;
            list _all_;
        run;
        quit;
        %global _tifflist _tiffcheck;
        proc sql noprint;
            select 1 into :_tiffcheck from _gdevice where upcase(name)=upcase("&tiffdevice");
            select distinct upcase(name) into :_tifflist separated by '|' from _gdevice
                where substr(upcase(name),1,3)='TIF';
            %if %sysevalf(%superq(_tiffcheck)^=1,boolean) %then %do;
                /**If not then throw error**/
                %put ERROR: (Global: TIFFDEVICE): %qupcase(%superq(tiffdevice)) is not on the installed list of devices;
                %put ERROR: (Global: TIFFDEVICE): Please select from the following list &_tifflist;
                %let nerror=%eval(&nerror+1);
            %end;
            drop table _gdevice;
        quit;
    %end;
    /**Scalable Vector Graphics On/Off Options**/
    %if &sysver ge 9.3 %then %_gparmcheck(svg,0|1);
    %else %if &svg=1 %then %do;
        /**Throw error**/
        %put ERROR: (Global: %qupcase(svg)): SVG cannot be set to 1 when SAS version less than 9.3 (&sysver);
        %let nerror=%eval(&nerror+1);
    %end;
    
    /**Error Handling on Global Parameters Involving units**/
    %macro _gunitcheck(parm);
        %if %sysevalf(%superq(&parm)=,boolean)=1 %then %do;
            /**Check if missing**/
            %put ERROR: (Global: %qupcase(&parm)) Cannot be set to missing;
            %let nerror=%eval(&nerror+1);
        %end;
        %else %if %sysfunc(compress(%superq(&parm),ABCDEFGHIJKLMNOPQRSTUVWXYZ,i)) lt 0 %then %do;
            /**Throw error**/
            %put ERROR: (Global: %qupcase(&parm)) Cannot be less than zero (%qupcase(%superq(&parm)));
            %let nerror=%eval(&nerror+1);
        %end;
    %mend;
    /**Overall Title Font Size**/
    %_gunitcheck(ovtsize)
    /**Overall Footnote Font Size**/
    %_gunitcheck(ovfnsize)
    /**Plot Width**/
    %_gunitcheck(width)
    %if %sysevalf(%qupcase(%superq(plottype))=TIFF,boolean) or
        %sysevalf(%qupcase(%superq(plottype))=TIF,boolean) %then %do;
        %if %sysfunc(find(%superq(width),px,i))>0 %then %do;
            /**Throw error**/
            %put ERROR: (Global: WIDTH) Must use units of IN when PLOTTYPE=%qupcase(&plottype);
            %let nerror=%eval(&nerror+1);
        %end;
    %end;
    /**Plot Height**/
    %_gunitcheck(height)
    %if %sysevalf(%qupcase(%superq(plottype))=TIFF,boolean) or
        %sysevalf(%qupcase(%superq(plottype))=TIF,boolean) %then %do;
        %if %sysfunc(find(%superq(height),px,i))>0 %then %do;
            /**Throw error**/
            %put ERROR: (Global: HEIGHT) Must use units of IN when PLOTTYPE=%qupcase(&plottype);
            %let nerror=%eval(&nerror+1);
        %end;
    %end;
    /**Table Header Font Size**/
    %_gunitcheck(tableheadersize)
    /**Table Footnote Font Size**/
    %_gunitcheck(tablefootnotesize)
    /**Table Data Columns Font Size**/
    %_gunitcheck(tabledatasize)
    /**Table Total Count Column Width**/
    %_gunitcheck(ttotalwidth)
    /**Table Events Count Column Width**/
    %_gunitcheck(teventwidth)
    /**Table Combined Total Counts and Events Count Column Width**/
    %_gunitcheck(tev_nwidth)
    /**Table Median Column Width**/
    %_gunitcheck(tmedianwidth)
    /**Table Hazard Ratio Column Width**/
    %_gunitcheck(thrwidth)
    /**Table Time point estimates Column Width**/
    %_gunitcheck(ttimelistwidth)
    /**Table P-value Column Width**/
    %_gunitcheck(tpvalwidth)
    
    /**Error Handling on Individual Model Numeric Variables**/
    %macro _gnumcheck(parm, min);
        /**Check if missing**/
        %if %sysevalf(%superq(&parm)^=,boolean) %then %do;
            %if %sysfunc(notdigit(%sysfunc(compress(%superq(&parm),-.)))) > 0 %then %do;
                /**Check if character value**/
                %put ERROR: (Global: %qupcase(&parm)) Must be numeric.  %qupcase(%superq(&parm)) is not valid.;
                %let nerror=%eval(&nerror+1);
            %end;
            %else %if %superq(&parm) < &min %then %do;
                /**Makes sure number is not less than the minimum**/
                %put ERROR: (Global: %qupcase(&parm)) Must be greater than or equal to %superq(min). %qupcase(%superq(&parm)) is not valid.;
                %let nerror=%eval(&nerror+1);
            %end;
        %end;
        %else %do;
            /**Throw Error**/
            %put ERROR: (Global: %qupcase(&parm)) Cannot be missing;
            %put ERROR: (Global: %qupcase(&parm)) Possible values are numeric values greater than or equal to %superq(min);
            %let nerror=%eval(&nerror+1);           
        %end;       
    %mend;
    /**Digital Pixels per Inch Value**/
    %_gnumcheck(dpi,100)
    /**Anti-alias Maximum Value**/
    %_gnumcheck(antialiasmax,1)
    /**Number of Lattice Columns**/
    %_gnumcheck(columns,1)
    /**Number of Lattice Rows**/
    %_gnumcheck(rows,1)
    /**Number of Models**/
    %_gnumcheck(nmodels,1)
    %if &plot=1 and &nerror=0 %then %do;
        %if %sysevalf(&rows*&columns < &nmodels,boolean) %then %do;
            /**Throw Error**/
            %put ERROR: (Global: NMODELS) if PLOT=1 then NMODELS (&nmodels) must be less than or equal to ROWS*COLUMNS (%sysevalf(&rows*&columns));
            %let nerror=%eval(&nerror+1);
        %end;
    %end;
    
    /**Summary Table Display Variables**/
    %local _z2 _test _list;
    /**Check if missing**/
    %if %sysevalf(%superq(tabledisplay)=,boolean)=0 %then %do _z2=1 %to %sysfunc(countw(%superq(tabledisplay),%str( )));
        %let _test=;
        %let _list=title|footnote|total|event|ev_n|median|hr|timelist|pval|covpval|cindex|totalmv|eventmv|ev_nmv|hrmv|pvalmv|covpvalmv|cindexmv;
        /**Check if submitted values are in approved list**/
        %do _z = 1 %to %sysfunc(countw(%qupcase(&_list),|));
            %if %qupcase(%scan(%superq(tabledisplay),&_z2,%str( )))=
                %scan(%qupcase(&_list),&_z,|,m) %then %let _test=1;
        %end;
        %if &_test ^= 1 %then %do;
            /**Throw errors**/
            %put ERROR: (Global: %qupcase(tabledisplay)): %qupcase(%scan(%superq(tabledisplay),&_z2,%str( ))) is not in the list of valid values;
            %put ERROR: (Global: %qupcase(tabledisplay)): Possible values are %qupcase(&_list);
            %let nerror=%eval(&nerror+1);
        %end;
    %end;
    /**If confidence interval colors are missing, set them to line colors**/
    %local z;
    %do z = 1 %to &nmodels;
        %if %sysevalf(%superq(plotcifillcolor&z)=,boolean) %then %let plotcifillcolor&z=%superq(color&z);
        %if %sysevalf(%superq(plotcilinecolor&z)=,boolean) %then %let plotcilinecolor&z=%superq(color&z);
    %end;
    /*** If any errors exist, stop macro and send to end ***/
    %if &nerror > 0 %then %do;
        %put ERROR: &nerror pre-run errors listed;
        %put ERROR: Macro NEWSURV will cease;
        %goto errhandl;
    %end;    
    
    %do z = 1 %to &nmodels;/**Start of Analysis Section**/
        %local nerror_run;
        %let nerror_run=0;
        data _null_;
            set &data;
            if _n_=1 then do;
            /**If missing x label, grab label or name of time variable**/
            %if %sysevalf(%superq(xlabel&z)=,boolean) %then %do;
                call symput("xlabel&z",vlabel(%superq(time&z)));
            %end;
            %if %sysevalf(%superq(class&z)=,boolean)=0 %then %do;
                %local format&z label&z;            
                /**Selects format for class variable**/
                call symput("label&z",vlabel(%superq(class&z)));
                call symput("format&z",vformat(%superq(class&z)));
            %end;               
            end;
        run;
        /**If missing y label, make generic label depending on y axis type**/
        %if %sysevalf(%superq(ylabel&z)=,boolean)=1 %then %do;
            %if %qupcase(%superq(ytype&z))=PCT %then %do;
                %if %qupcase(%superq(method&z))=CIF or %superq(sreverse&z)=1 %then %let ylabel&z=Percent With Event;
                %else %let ylabel&z=Percent Without Event;
            %end;
            %else %do;
                %if %qupcase(%superq(method&z))=CIF or %superq(sreverse&z)=1 %then %let ylabel&z=Proportion With Event;
                %else %let ylabel&z=Proportion Without Event; 
            %end;               
        %end;
        /**Apply where clause**/
        data _tempdsn&z;
            set &data;
            where &where;
        run;
        %if &sysnobs =0 %then %do;
            %put ERROR: (Model &z: WHERE): Issue parsing the WHERE clause;
            %let nerror_run=%eval(&nerror_run+1);
            %goto errhandl2; 
        %end;
        /**Create temporary dataset for analysis**/
        /**Changes class variable to character variable by applying format**/
        /**Makes sure there are no missing values in the key variables**/
        data _tempdsn&z;
            merge %if %sysevalf(%superq(class&z)=,boolean)=0 %then %do; 
                     _tempdsn&z (keep=%superq(class&z) rename=(%superq(class&z)=_tempvar_))
                  %end;
                  _tempdsn&z (keep=%superq(time&z) rename=(%superq(time&z)=_time_))
                  _tempdsn&z (keep=%superq(cens&z) rename=(%superq(cens&z)=_cens_))
                  %do i=1 %to %sysfunc(countw(%superq(classcov&z),%str( ))); 
                      _tempdsn&z (keep=%scan(%superq(classcov&z),&i,%str( )) rename=(%scan(%superq(classcov&z),&i,%str( ))=_classcov_&i))
                  %end;
                  %do i=1 %to %sysfunc(countw(%superq(contcov&z),%str( ))); 
                      _tempdsn&z (keep=%scan(%superq(contcov&z),&i,%str( )) rename=(%scan(%superq(contcov&z),&i,%str( ))=_contcov_&i))
                  %end;                                             
                  %do i=1 %to %sysfunc(countw(%superq(strata&z),%str( ))); 
                      _tempdsn&z (keep=%scan(%superq(strata&z),&i,%str( )) rename=(%scan(%superq(strata&z),&i,%str( ))=_strata_&i))
                  %end;
                  %if %sysfunc(notdigit(0%sysfunc(compress(%superq(landmark&z),.-)))) > 0 %then %do;
                      _tempdsn&z (keep=%superq(landmark&z) rename=(%superq(landmark&z)=_landmark_))
                  %end;;
            %if %sysevalf(%superq(class&z)=,boolean)=0 %then %do; 
                length _class_ $300.;
                _class_=vvalue(_tempvar_);
                drop _tempvar_;
                if ^missing(_class_);
            %end;   
            if ^missing(_time_) and ^missing(_cens_) 
                %if %sysfunc(notdigit(0%sysfunc(compress(%superq(landmark&z),.-)))) > 0 %then %do; and ^missing(_landmark_) %end;
                %if %sysevalf(%superq(strata&z)=,boolean)=0 %then %do i = 1 %to %sysfunc(countw(%superq(strata&z),%str( ))); and ^missing(_strata_&i) %end;;        
            %if %sysevalf(%superq(xdivisor&z)=,boolean)=0 %then %do;
                _time_=_time_/%superq(xdivisor&z);
            %end;
            /**Apply landmark if not missing**/
            %if %sysevalf(%superq(landmark&z)=,boolean)=0 %then %do;
                _time_=_time_-
                    %if %sysfunc(notdigit(0%sysfunc(compress(%superq(landmark&z),.-)))) > 0 %then %do;
                        _landmark_
                    %end;
                    %else %do;
                        %superq(landmark&z)
                    %end;;
                if _time_ gt 0;
            %end;
        run;
        proc sql noprint;    
            /**Check for class variable**/ 
            %if %sysevalf(%superq(class&z)=,boolean)=0 %then %do;     
                /**Check if the provided class reference value is in the data**/
                %if %sysevalf(%superq(classref&z)=,boolean)=0 %then %do;
                    %local _classrefcheck;
                    %let _classrefcheck=;
                    select distinct 1 into :_classrefcheck
                        from _tempdsn&z
                        where strip(_class_)=strip("%superq(classref&z)");
                    %if %superq(_classrefcheck) ^=1 %then %do;
                        /**If not in the dataset then throw error**/
                        %put ERROR: (Model &z: CLASSREF): Indicated class reference value (%superq(classref&z)) does not exist in dataset (%superq(data));
                        %put ERROR: (Model &z: CLASSREF): Class reference value must be an existing value with same case as formatted value in dataset;
                        %let nerror_run=%eval(&nerror_run+1);
                    %end;
                %end;  
            %end;
            /*** X-axis Maximum ***/
            %local _maxt;
            /**Select greatest time value**/
            select max(_time_) into :_maxt
                from _tempdsn&z;
            /**Check if missing**/
            %if %sysevalf(%superq(xmax&z)=,boolean)=1 %then %do;
                /**Set x-maximum to maximum time rounded to next number divisible by 5**/
                %let xmax&z=%sysfunc(sum(%sysfunc(ceil(%superq(_maxt))),5,-%sysfunc(mod(%sysfunc(ceil(%superq(_maxt)-%superq(xmin&z))),5))));
            %end;
            %else %if %sysfunc(notdigit(%sysfunc(compress(%superq(xmax&z),.-)))) > 0 %then %do;
                /**If character value then throw error**/
                %put ERROR: (Model &z: XMAX) Must be a numeric value (%qupcase(%superq(xmax&z)));
                %let nerror_run=%eval(&nerror_run+1);
            %end;               
            %else %if %sysevalf(%superq(xmax&z) le %superq(xmin&z),boolean) %then %do;
                /**Make sure maximum is not less or equal to than minimum**/
                %put ERROR: (Model &z: XMAX) Cannot be less than or equal to XMIN (%superq(xmax&z) vs. %superq(xmin&z));
                %let nerror_run=%eval(&nerror_run+1);                   
            %end;
            /*** X-axis Incrementation ***/
            %if %sysevalf(%superq(xincrement&z)=,boolean)=1 %then %do;
                /**If missing then set increment to be range cut into 5 pieces**/
                %let xincrement&z=%sysfunc(sum((%superq(xmax&z)-%superq(xmin&z))/5));
            %end;
            %else %if %sysfunc(notdigit(%sysfunc(compress(%superq(xincrement&z),.-)))) > 0 %then %do;
                /**If character value then throw error**/
                %put ERROR: (Model &z: XINCREMENT) Must be a numeric value (%qupcase(%superq(xincrement&z)));
                %let nerror_run=%eval(&nerror_run+1);
            %end;
            %else %if %sysevalf(%superq(xincrement&z) gt (%sysevalf(%superq(xmax&z)-%superq(xmin&z))),boolean) %then %do;
                /**Make sure increment cannot be greater than range**/
                %put ERROR: (Model &z: XINCREMENT) Cannot be greater than the difference between XMAX and XMIN (%superq(xincrement&z) vs. %sysfunc(sum(%superq(xmax&z),-%superq(xmin&z))));                 
                %let nerror_run=%eval(&nerror_run+1);
            %end;
        quit;  
        %if &nerror_run > 0 %then %goto errhandl2; 
          
        /**Assign multiplicative constant for y-axis**/
        %local xmult_&z tfmt_&z;
        %if %qupcase(%superq(ytype&z))=PCT %then %let xmult_&z=100;
        %else %if %qupcase(%superq(ytype&z))=PPT %then %let xmult_&z=1;
        /**Assign formats for y-axis**/
        %if %sysevalf(%qupcase(%superq(kmestdigits&z))=AUTO,boolean) %then %do;
            %if %qupcase(%superq(ytype&z))=PCT %then %let tfmt_&z=5.1;
            %else %if %qupcase(%superq(ytype&z))=PPT %then %let tfmt_&z=4.2;
        %end;
        %else %let tfmt_&z=%sysevalf(12.&&kmestdigits&z);
        
        
        %local risklist_&z;
        %if %qupcase(%superq(risklocation&z))=TIMELIST %then %let risklist_&z=%superq(timelist&z);
        %else %let risklist_&z = %superq(risklist&z);
            
        %if %sysevalf(%qupcase(%superq(method&z))=KM,boolean) %then %do;
            /**Get survival times**/
            /**median, logrank test, time estimates**/
            ods graphics on;
            proc lifetest data=_tempdsn&z alpha=&&alpha&z alphaqt=&&alpha&z
                /**Set up dataset with time-point estimate numbers**/
                %if %sysevalf(%superq(timelist&z)=,boolean)=0 %then %do;
                    reduceout timelist=%sysfunc(compress(%superq(timelist&z), "'"))
                    outs=_timelist
                %end;     
                /***Set up dataset with patients-at-risk numbers***/ 
                plot=(survival(cl
                    %if %sysevalf(%superq(risklist&z)=,boolean)=0  %then %do; 
                        atrisk= %sysfunc(compress(%superq(risklist_&z), "'"))
                    %end;))     
                    /**Set confidence interval type**/ 
                    conftype=%superq(conftype&z);
                /**If class variable then split into groups**/
                %if %sysevalf(%superq(class&z)=,boolean)=0 %then %do;
                    strata _class_
                    %if %qupcase(%superq(plotpval&z))=LOGRANK and %sysevalf(%superq(strata&z)=,boolean) %then %do;
                        / logrank
                    %end;
                    %else %if %qupcase(%superq(plotpval&z))=WILCOXON and %sysevalf(%superq(strata&z)=,boolean) %then %do;
                        / wilcoxon
                    %end;;
                %end;
                /**Run Model**/
                time _time_ * _cens_(%superq(cen_vl&z));
                
                ods output censoredsummary=_sum /**Contains events/totals**/
                    quartiles=_quart (where=(percent=50)) /**Containts Medians**/
                    %if %sysevalf(%superq(class&z)=,boolean)=0 and %sysevalf(%superq(strata&z)=,boolean) %then %do;
                        homtests=_ltest /**Contains Logrank and/or Wilcoxon test**/
                    %end;
                    %if %sysevalf(%superq(risklist&z)=,boolean)=0 %then %do;
                        survivalplot=_splot
                        (keep=time tatrisk stratumnum atrisk event censored) /**Outputs dataset with patients-at-risk numbers**/
                    %end;
                    survivalplot=_surv (where=(event>.)
                        rename=(%if %sysevalf(%superq(class&z)=,boolean)=0 %then %do; stratum=cl1 %end;
                            survival=s1 time=t1 censored=c1 sdf_lcl=lcl1 sdf_ucl=ucl1)
                        keep= survival time censored event sdf_lcl sdf_ucl
                            %if %sysevalf(%superq(class&z)=,boolean)=0 %then %do; stratum stratumnum %end;);/**Set up dataset with survival numbers**/
            run;  
            %if %sysevalf(%superq(risklist&z)=,boolean)=0 %then %do;
                data _splot;
                    set _splot;
                    by stratumnum;
                    if first.stratumnum then do;
                        _ncens=0;_nevents=0;
                    end;
                    if event>. then _nevents=_nevents+event;
                    if censored>. then _ncens=_ncens+1;
                    retain _ncens _nevents;
                    if ^missing(tatrisk) then output;
                    drop event censored;
                run;
            %end;
            ods graphics off; 
            /**calculate stratified p-values**/
            %if %sysevalf(%superq(strata&z)^=,boolean) and %sysevalf(%superq(class&z)^=,boolean) %then %do;
                proc lifetest data=_tempdsn&z alpha=&&alpha&z alphaqt=&&alpha&z;
                    strata %do i = 1 %to %sysfunc(countw(%superq(strata&z),%str( )));_strata_&i %end; / group=_class_
                        %if %qupcase(%superq(plotpval&z))=LOGRANK %then %do;
                            test=logrank
                        %end;
                        %else %if %qupcase(%superq(plotpval&z))=WILCOXON %then %do;
                            test=wilcoxon
                        %end;;
                /**Run Model**/
                time _time_ * _cens_(%superq(cen_vl&z));                
                ods output homtests=_ltest; /**Contains Stratified Logrank and/or Wilcoxon test**/
                run;   
            %end;
            /**Causes the survival estimates to continue**/
            /**for each time value in the dataset**/
            data _surv;
                set _surv;
                if s1 = . then s1 = c1;
                drop event;
            run;  
        %end; /**End KM Method Section**/
        %else %if %sysevalf(%qupcase(%superq(method&z))=CIF,boolean) %then %do;
            %if %sysevalf(%superq(timelist&z)^=,boolean) %then %do;            
                %local _cif_timepoints_;
                /**Created from XX to XX by XX format**/
                %if %sysfunc(find(%superq(timelist&z),to,i))>0 %then %do;
                    data _list_;            
                        do i = %superq(timelist&z);
                            timepoint=i;
                            output;
                        end;
                        drop i;
                    run;
                    proc sort data=_list_;
                        by timepoint;
                    run;
                    proc sql noprint;
                        select distinct timepoint into :_cif_timepoints_ separated by ',' from _list_;
                        drop table _list_;
                    quit;
                %end;
                /**Created from numeric list**/
                %else %do i = 1 %to %sysfunc(countw(%superq(timelist&z),%str( )));
                    %if &i=1 %then %let _cif_timepoints_=%scan(%superq(timelist&z),&i,%str( ));
                    %else %let _cif_timepoints_=&_cif_timepoints_.,%scan(%superq(timelist&z),&i,%str( ));
                %end; 
            %end;
            %if %sysevalf(%superq(risklist&z)^=,boolean) %then %do;       
                %local _cif_riskpoints_;
                /**Created from XX to XX by XX format**/
                %if %sysfunc(find(%superq(risklist_&z),to,i))>0 %then %do;
                    data _list_;            
                        do i = %superq(risklist_&z);
                            riskpoint=i;
                            output;
                        end;
                        drop i;
                    run;
                    proc sort data=_list_;
                        by riskpoint;
                    run;
                    proc sql noprint;
                        select distinct riskpoint into :_cif_riskpoints_ separated by ',' from _list_;
                        drop table _list_;
                    quit;
                %end;
                /**Created from numeric list**/
                %else %do i = 1 %to %sysfunc(countw(%superq(risklist&z),%str( )));
                    %if &i=1 %then %let _cif_riskpoints_=%scan(%superq(risklist&z),&i,%str( ));
                    %else %let _cif_riskpoints_=&_riskpoints_.,%scan(%superq(risklist&z),&i,%str( ));
                %end; 
            %end;
            proc sql noprint;
                %local _nstrata _ntimes _glist _ngroup;
                %let _nstrata=;%let _ntimes=;%let _glist=;%let _ngroup=;
                create table _tempcif as
                    select *
                        %if %sysevalf(%superq(class&z) =,boolean) %then %do;
                            ,1 as _class_
                        %end; 
                        %if %sysevalf(%superq(strata&z) =,boolean) %then %do;
                            ,1 as _strata_1
                        %end;
                        from _tempdsn&z
                        order by _class_,_time_;
        
                    select distinct _class_ into :_glist separated by '|' from _tempcif;
                    %if %sysevalf(%superq(strata&z)^=,boolean) %then %do;
                        select count(*) into :_nstrata
                            from (select distinct _strata_1
                            %do i = 2 %to %sysfunc(countw(%superq(strata&z),%str( )));
                                ,_strata_
                            %end;  from _tempcif);
                    %end;
                    %else %let _nstrata=1;

                select count(distinct _time_)+1 into :_ntimes from _tempcif;
            quit;
            
            %let _ngroup=%sysfunc(countw(%superq(_glist),|)); 
            data _surv (keep=_class_ groupn _time_ cif censor sdf_lcl sdf_ucl vcif
                        rename=(groupn=stratumnum _time_=t1 cif=s1 _class_=cl1 censor=c1 sdf_lcl=lcl1 sdf_ucl=ucl1))
                _sum (keep=control_var _class_ total failed)
                _quart (keep=stratum _class_ percent estimate lowerlimit upperlimit)
                %if %sysevalf(%superq(timelist)^=,boolean) %then %do;
                    _timelist (keep= stratum timelist _class_ _time_ survival sdf_lcl sdf_ucl)
                %end;
                %if %sysevalf(%superq(risklist)^=,boolean) %then %do;
                    _splot (keep= tatrisk _class_ atrisk stratumnum _time_ _ncens _nevents rename=(_time_=time))
                %end;;
                set _tempcif end=last;
                by _class_ _time_;
                array times {&_ngroup,&_ntimes} _temporary_;
                array events {&_ngroup,&_ntimes} _temporary_;
                array censors {&_ngroup,&_ntimes} _temporary_;
                array otherevs {&_ngroup,&_ntimes} _temporary_;
                array _survkm {&_ngroup,&_ntimes} _temporary_;
                array _nrisk {&_ngroup,&_ntimes} _temporary_;
                array _cif {&_ngroup,&_ntimes} _temporary_;
                array _vcif {&_ngroup,&_ntimes} _temporary_;
                %if %sysevalf(%superq(timelist&z)^=,boolean) %then %do;
                    array _timepoints {%sysfunc(countw(%superq(_cif_timepoints_),%str(,)))} (&_cif_timepoints_);
                %end;
                %if %sysevalf(%superq(risklist&z)^=,boolean) %then %do;
                    array _riskpoints {%sysfunc(countw(%superq(_cif_riskpoints_),%str(,)))} (&_cif_riskpoints_);
                %end;
                
                
                if first._class_ then do;
                    groupn+1;
                    npat=1;
                    times(groupn,1)=0;
                end;
                else npat+1;
                
                if _n_=1 or first._class_ then do;
                    ntime=2;
                    events(groupn,1)=0;
                    censors(groupn,1)=0;
                    otherevs(groupn,1)=0;
                    _survkm(groupn,1)=1;
                    _cif(groupn,1)=0;
                    ncens=0;nev=0;nother=0;
                end;
                if first._time_ then do;
                    ncens=0;nev=0;nother=0;
                end;
                
                if _cens_=%superq(ev_vl&z) then nev+1;
                else if _cens_=%superq(cen_vl&z) then ncens+1;
                else nother+1;
                
                if last._time_ or last._class_ then do;
                    times(groupn,ntime)=_time_;
                    events(groupn,ntime)=nev;
                    censors(groupn,ntime)=ncens;
                    otherevs(groupn,ntime)=nother;
                    ntime+1;
                end;
                
                if last._class_ then do;
                    _nrisk(groupn,1)=npat;
                    _vcif(groupn,1)=0;
                    stratum=groupn;
                    v11=0;v12=0;v13=0;v21=0;v22=0;v23=0;
                    do i=2 to ntime-1;
                        _nrisk(groupn,i)=_nrisk(groupn,i-1)-events(groupn,i-1)-censors(groupn,i-1)-otherevs(groupn,i-1);
                        /**KM Calculation**/
                        if events(groupn,i)>0 or otherevs(groupn,i) > 0 then do;
                            _survkm(groupn,i)=_survkm(groupn,i-1)*(_nrisk(groupn,i)-(events(groupn,i)+otherevs(groupn,i)))/_nrisk(groupn,i);
                        end;
                        else _survkm(groupn,i)=_survkm(groupn,i-1);
                        
                        
                        /**CIF Calculation**/
                        if events(groupn,i)>0 then _cif(groupn,i)=_cif(groupn,i-1)+ _survkm(groupn,i-1)*(events(groupn,i)/_nrisk(groupn,i));
                        else _cif(groupn,i)=_cif(groupn,i-1);
                    
                        %if %sysevalf(%qupcase(%superq(cifvar&z))=DELTA,boolean) %then %do;
                            /**Variance Delta Method**/
                            if events(groupn,i)>0 or otherevs(groupn,i) > 0 then do;    
                                t1=0;
                                if _nrisk(groupn,i)-(events(groupn,i)+otherevs(groupn,i))>0 then 
                                    t1=((events(groupn,i)+otherevs(groupn,i))/
                                        _nrisk(groupn,i))/
                                        (_nrisk(groupn,i)-(events(groupn,i)+otherevs(groupn,i)));
                                t2=(_survkm(groupn,i-1)*events(groupn,i)/_nrisk(groupn,i))/_nrisk(groupn,i);
                                t3=_survkm(groupn,i-1)*(1-events(groupn,i)/_nrisk(groupn,i))*t2;
                                t4=_cif(groupn,i)**2;
                                v11=v11+t1;
                                v12=v12-2*(_cif(groupn,i)*t1+t2);
                                v13=v13+t4*t1+2*_cif(groupn,i)*t2+t3;
                                _vcif(groupn,i)=t4*v11+_cif(groupn,i)*v12+v13;
                            end;
                        %end;
                        %else %if %sysevalf(%qupcase(%superq(cifvar&z))=COUNT,boolean) %then %do;
                            /**Variance Gray counting Method**/
                            if otherevs(groupn,i)>0 and _survkm(groupn,i)>0 then do;
                                vt1=1;
                                if otherevs(groupn,i)>1 then vt1=1-(otherevs(groupn,i)-1)/(_nrisk(groupn,i)-1);
                                vt2=_survkm(groupn,i-1)**2 * vt1 * otherevs(groupn,i)/_nrisk(groupn,i)**2;
                                vt3=1/_survkm(groupn,i);
                                vt4=_cif(groupn,i)/_survkm(groupn,i);
                                v21=v21 + vt2*vt4**2;
                                v22=v22 + vt2*vt3*vt4;
                                v23=v23 + vt2*vt3**2;
                            end;
                            if events(groupn,i) > 0 then do;
                                vt1=1;
                                if events(groupn,i) > 1 then vt1=1-(events(groupn,i)-1)/(_nrisk(groupn,i)-1);
                                vt2=_survkm(groupn,i-1)**2 * vt1 * events(groupn,i)/_nrisk(groupn,i)**2;
                                if _survkm(groupn,i)>0 then vt3=1/_survkm(groupn,i);
                                else vt3=0;
                                vt4=1+vt3*_cif(groupn,i);
                                v21=v21+vt2*vt4**2;
                                v22=v22+vt2*vt3*vt4;
                                v23=v23+vt2*vt3**2;
                                _vcif(groupn,i)=v21 - 2*_cif(groupn,i)*v22 + _cif(groupn,i)**2*v23;
                            end;  
                        %end;     
                    end;
                    /**Output Calculated CIF Values**/
                    do i = 1 to ntime-1;
                        censor=.;
                        if i=1 or i=ntime-1 or events(groupn,i)>0 then do;
                            _time_=times(groupn,i);
                            nev=events(groupn,i);
                            ncens=censors(groupn,i);
                            notherevs=otherevs(groupn,i);
                            nrisk=_nrisk(groupn,i)-nev-ncens-notherevs;
                            survkm=_survkm(groupn,i);
                            cif=_cif(groupn,i);
                            if censors(groupn,i)>0 then censor=cif;
                            if ^missing(_vcif(groupn,i)) then vcif=sqrt(_vcif(groupn,i));
                            
                            if i > 1  and cif>0 then do;
                                %if %sysevalf(%qupcase(%superq(conftype&z))=LOGLOG,boolean) %then %do;
                                    band_log=probit(1-&&alpha&z/2)*abs(vcif/(cif*log(cif)));
                                    sdf_lcl=cif**(exp(band_log));
                                    sdf_ucl=cif**(exp(-band_log));
                                %end;
                                %else %if %sysevalf(%qupcase(%superq(conftype&z))=LOG,boolean) %then %do;
                                    band_log=probit(1-&&alpha&z/2)*sqrt(vcif**2/(cif**2));
                                    sdf_ucl=cif*exp(band_log);
                                    sdf_lcl=cif*exp(-band_log);
                                %end;
                                %else %if %sysevalf(%qupcase(%superq(conftype&z))=LINEAR,boolean) %then %do;
                                    sdf_lcl=max(0,cif-probit(1-&&alpha&z/2)*vcif);
                                    sdf_ucl=min(1,cif+probit(1-&&alpha&z/2)*vcif);
                                %end;
                                %else %if %sysevalf(%qupcase(%superq(conftype&z))=LOGIT,boolean) %then %do;
                                    sdf_lcl=cif/(cif+(1-cif)*exp(probit(1-&&alpha&z/2)*vcif/(cif*(1-cif))));
                                    sdf_ucl=cif/(cif+(1-cif)*exp(-probit(1-&&alpha&z/2)*vcif/(cif*(1-cif))));
                                %end;
                                %else %if %sysevalf(%qupcase(%superq(conftype&z))=ASINSQRT,boolean) %then %do;
                                    sdf_lcl=(sin(max(0,arsin(sqrt(cif))-probit(1-&&alpha&z/2)*vcif/(2*sqrt(cif*(1-cif))))))**2;
                                    sdf_ucl=(sin(min(constant('pi')/2,arsin(sqrt(cif))+probit(1-&&alpha&z/2)*vcif/(2*sqrt(cif*(1-cif))))))**2;
                                %end;
                                end;
                            else do;
                                sdf_lcl=0;
                                sdf_ucl=0;
                            end;
                            output _surv;
                        end;
                        else if censors(groupn,i) > 0 then do;                            
                            cif=_cif(groupn,i);
                            if cif > 0 then do;
                                %if %sysevalf(%qupcase(%superq(conftype&z))=LOGLOG,boolean) %then %do;
                                    band_log=probit(1-&&alpha&z/2)*abs(vcif/(cif*log(cif)));
                                    sdf_lcl=cif**(exp(band_log));
                                    sdf_ucl=cif**(exp(-band_log));
                                %end;
                                %else %if %sysevalf(%qupcase(%superq(conftype&z))=LOG,boolean) %then %do;
                                    band_log=probit(1-&&alpha&z/2)*sqrt(vcif**2/(cif**2));
                                    sdf_ucl=cif*exp(band_log);
                                    sdf_lcl=cif*exp(-band_log);
                                %end;
                                %else %if %sysevalf(%qupcase(%superq(conftype&z))=LINEAR,boolean) %then %do;
                                    sdf_lcl=max(0,cif-probit(1-&&alpha&z/2)*vcif);
                                    sdf_ucl=min(1,cif+probit(1-&&alpha&z/2)*vcif);
                                %end;
                                %else %if %sysevalf(%qupcase(%superq(conftype&z))=LOGIT,boolean) %then %do;
                                    sdf_lcl=cif/(cif+(1-cif)*exp(probit(1-&&alpha&z/2)*vcif/(cif*(1-cif))));
                                    sdf_ucl=cif/(cif+(1-cif)*exp(-probit(1-&&alpha&z/2)*vcif/(cif*(1-cif))));
                                %end;
                                %else %if %sysevalf(%qupcase(%superq(conftype&z))=ASINSQRT,boolean) %then %do;
                                    sdf_lcl=(sin(max(0,arsin(sqrt(cif))-probit(1-&&alpha&z/2)*vcif/(2*sqrt(cif*(1-cif))))))**2;
                                    sdf_ucl=(sin(min(constant('pi')/2,arsin(sqrt(cif))+probit(1-&&alpha&z/2)*vcif/(2*sqrt(cif*(1-cif))))))**2;
                                %end;
                            end;
                            censor=cif;
                            _time_=times(groupn,i);
                            output _surv;
                        end;
                    end;
                    /**Output Number of Events/Patients**/
                    total=_nrisk(groupn,1);
                    failed=0;
                    control_var='';
                    do i = 1 to ntime-1;
                        failed=failed+events(groupn,i);
                    end;
                    output _sum;
                    /**Median Time-to-Event**/
                    estimate=.;lowerlimit=.;upperlimit=.;percent=50;sdf_lcl=.;sdf_ucl=.;
                    do i = 1 to ntime-1;
                        cif=_cif(groupn,i);
                        if ^missing(_vcif(groupn,i)) then vcif=sqrt(_vcif(groupn,i));
                        if cif > 0 then do;
                            %if %sysevalf(%qupcase(%superq(conftype&z))=LOGLOG,boolean) %then %do;
                                band_log=probit(1-&&alpha&z/2)*abs(vcif/(cif*log(cif)));
                                sdf_lcl=cif**(exp(band_log));
                                sdf_ucl=cif**(exp(-band_log));
                            %end;
                            %else %if %sysevalf(%qupcase(%superq(conftype&z))=LOG,boolean) %then %do;
                                band_log=probit(1-&&alpha&z/2)*sqrt(vcif**2/(cif**2));
                                sdf_lcl=cif*exp(band_log);
                                sdf_ucl=cif*exp(-band_log);
                            %end;
                            %else %if %sysevalf(%qupcase(%superq(conftype&z))=LINEAR,boolean) %then %do;
                                sdf_lcl=max(0,cif-probit(1-&&alpha&z/2)*vcif);
                                sdf_ucl=min(1,cif+probit(1-&&alpha&z/2)*vcif);
                            %end;
                            %else %if %sysevalf(%qupcase(%superq(conftype&z))=LOGIT,boolean) %then %do;
                                sdf_lcl=cif/(cif+(1-cif)*exp(probit(1-&&alpha&z/2)*vcif/(cif*(1-cif))));
                                sdf_ucl=cif/(cif+(1-cif)*exp(-probit(1-&&alpha&z/2)*vcif/(cif*(1-cif))));
                            %end;
                            %else %if %sysevalf(%qupcase(%superq(conftype&z))=ASINSQRT,boolean) %then %do;
                                sdf_lcl=(sin(max(0,arsin(sqrt(cif))-probit(1-&&alpha&z/2)*vcif/(2*sqrt(cif*(1-cif))))))**2;
                                sdf_ucl=(sin(min(constant('pi')/2,arsin(sqrt(cif))+probit(1-&&alpha&z/2)*vcif/(2*sqrt(cif*(1-cif))))))**2;
                            %end;
                        end;
                        if ^missing(_cif(groupn,i)) and ^missing(_vcif(groupn,i)) then do;
                            if _cif(groupn,i) ge 0.5 and estimate=. then estimate=times(groupn,i);
                            if sdf_lcl ge 0.5 and lowerlimit=. then lowerlimit=times(groupn,i);
                            if sdf_ucl ge 0.5 and upperlimit=. then upperlimit=times(groupn,i);
                        end;
                    end;
                    output _quart;
                    /**Time-point values**/
                    %if %sysevalf(%superq(timelist)^=,boolean) %then %do;
                        do j = 1 to dim(_timepoints);
                            _tout=0;
                            survival=.;sdf_lcl=.;sdf_ucl=.;survkm=.;
                            do i = _tout+1 to ntime-1;
                                if times(groupn,i) <= _timepoints(j) and ^missing(_cif(groupn,i)) and ^missing(_vcif(groupn,i)) then do;
                                    survival=_cif(groupn,i);
                                    cif=_cif(groupn,i);
                                    if ^missing(_vcif(groupn,i)) then vcif=sqrt(_vcif(groupn,i));
                                    if cif > 0 then do;
                                        %if %sysevalf(%qupcase(%superq(conftype&z))=LOGLOG,boolean) %then %do;
                                            band_log=probit(1-&&alpha&z/2)*abs(vcif/(cif*log(cif)));
                                            sdf_lcl=cif**(exp(band_log));
                                            sdf_ucl=cif**(exp(-band_log));
                                            drop band_log;
                                        %end;
                                        %else %if %sysevalf(%qupcase(%superq(conftype&z))=LOG,boolean) %then %do;
                                            band_log=probit(1-&&alpha&z/2)*sqrt(vcif**2/(cif**2));
                                            sdf_ucl=cif*exp(band_log);
                                            sdf_lcl=cif*exp(-band_log);
                                            drop band_log;
                                        %end;
                                        %else %if %sysevalf(%qupcase(%superq(conftype&z))=LINEAR,boolean) %then %do;
                                            sdf_lcl=max(0,cif-probit(1-&&alpha&z/2)*vcif);
                                            sdf_ucl=min(1,cif+probit(1-&&alpha&z/2)*vcif);
                                        %end;
                                        %else %if %sysevalf(%qupcase(%superq(conftype&z))=LOGIT,boolean) %then %do;
                                            sdf_lcl=cif/(cif+(1-cif)*exp(probit(1-&&alpha&z/2)*vcif/(cif*(1-cif))));
                                            sdf_ucl=cif/(cif+(1-cif)*exp(-probit(1-&&alpha&z/2)*vcif/(cif*(1-cif))));
                                        %end;
                                        %else %if %sysevalf(%qupcase(%superq(conftype&z))=ASINSQRT,boolean) %then %do;
                                            sdf_lcl=(sin(max(0,arsin(sqrt(cif))-probit(1-&&alpha&z/2)*vcif/(2*sqrt(cif*(1-cif))))))**2;
                                            sdf_ucl=(sin(min(constant('pi')/2,arsin(sqrt(cif))+probit(1-&&alpha&z/2)*vcif/(2*sqrt(cif*(1-cif))))))**2;
                                        %end;
                                    end;
                                    _tout=i;
                                end;
                                if times(groupn,i) = _timepoints(j) or
                                    (times(groupn,i) < _timepoints(j) and times(groupn,i+1)>_timepoints(j)) then do;
                                    _time_=times(groupn,_tout);
                                    timelist=_timepoints(j);
                                    stratum=groupn;
                                    output _timelist;
                                end;
                                if times(groupn,i) ge _timepoints(j) then i=ntime;
                            end;
                            if _timepoints(j) > times(groupn,ntime-1) then do;
                                do  i = j to dim(_timepoints);
                                    survival=.;sdf_lcl=.;sdf_ucl=.;
                                    timelist=_timepoints(i);
                                    stratum=groupn;
                                    output _timelist;
                                end;
                                j=dim(_timepoints);
                            end;
                        end;
                    %end;
                
                    %if %sysevalf(%superq(risklist)^=,boolean) %then %do;
                        do j = 1 to dim(_riskpoints);
                            _rout=0;
                            if j=1 then do;
                                atrisk=_nrisk(groupn,1);
                            end;
                            _ncens=0;_nevents=0;
                            if atrisk>0 then do i = _rout+1 to min(&_ntimes,ntime)-1;                            
                                _ncens=_ncens+censors(groupn,i);
                                _nevents=_nevents+events(groupn,i);   
                                if times(groupn,i)=_riskpoints(j) or
                                    (times(groupn,i)<_riskpoints(j) and times(groupn,i+1)>_riskpoints(j)) then do;
                                    _time_=_riskpoints(j);
                                    if times(groupn,i)=_riskpoints(j) then atrisk=_nrisk(groupn,i);
                                    else do;
                                        atrisk=_nrisk(groupn,i)-events(groupn,i)-censors(groupn,i)-otherevs(groupn,i);        
                                    end;
                                    tatrisk=_riskpoints(j);
                                    stratumnum=groupn;
                                    output _splot;
                                    _rout=i;
                                end;
                                else if times(groupn,i) < _riskpoints(j) and i=ntime-1 then do;
                                    _time_=_riskpoints(j);
                                    atrisk=_nrisk(groupn,i)-events(groupn,i)-censors(groupn,i)-otherevs(groupn,i);
                                    tatrisk=_riskpoints(j);
                                    stratumnum=groupn;
                                    output _splot;
                                    _rout=i;
                                end;
                            if _rout = i or times(groupn,i) > _riskpoints(j) then i=ntime;
                            end;
                            if _riskpoints(j) > times(groupn,ntime-1) then j=dim(_riskpoints);
                        end;
                    %end;
                end;
            run;
            
            %if %sysevalf(%superq(class&z)^=,boolean) %then %do;
                proc sort data=_tempcif;
                    by _strata_1
                        %do i = 2 %to %sysfunc(countw(%superq(strata&z),%str( )));
                            _strata_&i
                        %end;  _class_ _time_;
                run;
                data _tempcif2;
                    set _tempcif end=last;
                    by _strata_1
                    %do i = 2 %to %sysfunc(countw(%superq(strata&z),%str( )));
                        _strata_&i
                    %end; _class_ _time_;
                
                    if first._strata_%sysfunc(max(1,%sysfunc(countw(&strata,%str( ))))) then do;
                    _sg_+1;
                    groupn=0;
                    end;
                    if first._class_ then groupn+1;        
                run;
                    
                proc sort data=_tempcif2;
                    by _sg_ _time_ _class_ ;
                run;
                    
                data _score (keep=score_st:) _variance (keep=_var:);
                    set _tempcif2 end=last;
                    by _sg_ _time_ _class_;
                    
                    array times {&_nstrata,&_ntimes} _temporary_;
                    array events {&_nstrata,&_ngroup,&_ntimes} _temporary_;
                    array censors {&_nstrata,&_ngroup,&_ntimes} _temporary_;
                    array otherevs {&_nstrata,&_ngroup,&_ntimes} _temporary_;
                    array _nrisk {&_nstrata,&_ngroup} (%sysevalf(&_nstrata*&_ngroup)*0);
                    retain _nrisk;
                    
                    array score {&_nstrata,%sysevalf(&_ngroup-1)} _temporary_;
                    array score_st {%sysevalf(&_ngroup-1)} (%sysevalf(&_ngroup-1)*0);
                    array vcov {&_nstrata,%sysevalf((&_ngroup-1)*&_ngroup/2)} _temporary_;
                    array vcov_st {%sysevalf((&_ngroup-1)*&_ngroup/2)} (%sysevalf((&_ngroup-1)*&_ngroup/2)*0);
                    array nrisk {&_nstrata,&_ngroup} _temporary_;
                    
                    array cifgleft {&_nstrata,&_ngroup} _temporary_;
                    array cifg {&_nstrata,&_ngroup} _temporary_;
                    
                    array skmgleft {&_nstrata,&_ngroup} _temporary_;
                    array skmg {&_nstrata,&_ngroup} _temporary_;
                    
                    array vtvec {&_nstrata,&_ngroup} _temporary_;
                    array vv(%sysevalf(&_ngroup-1),%sysevalf(&_ngroup-1));
                    array _var(%sysevalf(&_ngroup-1));
                    
                    array vtmatrix {&_nstrata,%sysevalf(&_ngroup-1),&_ngroup} _temporary_;
                    array a {&_nstrata,&_ngroup,&_ngroup} _temporary_;
                    array c {&_nstrata,&_ngroup,&_ngroup} _temporary_;
                    
                    if first._sg_ then do;
                        ntime=1;
                        max_grp=groupn;
                    end;
                    max_grp=max(max_grp,groupn);
                    retain max_grp;
                    
                    if first._class_ or first._time_ or first._sg_ then do;
                        events(_sg_,groupn,ntime)=0;
                        censors(_sg_,groupn,ntime)=0;
                        otherevs(_sg_,groupn,ntime)=0;
                    end;
                    
                    if _cens_=%superq(ev_vl&z) then events(_sg_,groupn,ntime)+1;
                    else if _cens_=%superq(cen_vl&z) then censors(_sg_,groupn,ntime)+1;
                    else otherevs(_sg_,groupn,ntime)+1;
                    
                    if last._time_ then do;
                        times(_sg_,ntime)=_time_;
                        ntime+1;
                    end;
                    
                    _nrisk(_sg_,groupn)=_nrisk(_sg_,groupn)+1;
                    
                    if last._sg_ then do;
                        ng=max_grp;
                        ng1=ng-1;
                        ng2=ng*ng1/2;
                        l=0;
                        cif0left=0;
                        cif0=0;
                        ll=1;
                        rho=0;
                        do i = 1 to ng2; 
                            vcov(_sg_,i)=0;
                        end;
                        do i =1 to ng;
                            if i le ng1 then score(_sg_,i)=0; 
                            cifgleft(_sg_,i)=0;
                            cifg(_sg_,i)=0;
                            vtvec(_sg_,i)=0;
                            skmgleft(_sg_,i)=1;
                            skmg(_sg_,i)=1;
                            do j = 1 to ng;
                                if i le ng-1 then vtmatrix(_sg_,i,j)=0;
                                c(_sg_,i,j)=0;
                            end;
                        end;
                        do i = 1 to ntime;
                            do k = 1 to ng;                
                                do j = 1 to ng;
                                    a(_sg_,k,j)=0;
                                end;
                            end;
                            nd1=0;
                            nd2=0;
                            do j = 1 to ng;
                                if missing(events(_sg_,j,i)) then events(_sg_,j,i)=0;
                                if missing(censors(_sg_,j,i)) then censors(_sg_,j,i)=0;
                                if missing(otherevs(_sg_,j,i)) then otherevs(_sg_,j,i)=0;
                                nd1=sum(nd1,events(_sg_,j,i));
                                nd2=sum(nd2,otherevs(_sg_,j,i));
                            end;
                            if nd1>0 or nd2 > 0 then do;
                                hdot=0;rdot=0;
                                do g=1 to ng;
                                    if _nrisk(_sg_,g)> 0 then do;
                                        td=sum(0,events(_sg_,g,i),otherevs(_sg_,g,i));
                                        skmg(_sg_,g)=skmgleft(_sg_,g)*(_nrisk(_sg_,g)-td)/_nrisk(_sg_,g);
                                        cifg(_sg_,g)=sum(0,cifgleft(_sg_,g),skmgleft(_sg_,g)*events(_sg_,g,i)/_nrisk(_sg_,g));
                                        hdot=sum(hdot,_nrisk(_sg_,g)/skmgleft(_sg_,g));
                                        rdot=sum(rdot,_nrisk(_sg_,g)*(1-cifgleft(_sg_,g))/skmgleft(_sg_,g));
                                    end;
                                end;
                                cif0=sum(cif0left,nd1/hdot);
                                grho=(1-cif0left)**rho;
                            
                                do g=1 to ng1;
                                    if _nrisk(_sg_,g)> 0 then score(_sg_,g)=sum(score(_sg_,g),
                                    grho*(events(_sg_,g,i)-nd1*_nrisk(_sg_,g)*(1-cifgleft(_sg_,g))/skmgleft(_sg_,g)/rdot));
                                end;
                                do g=1 to ng;
                                    if _nrisk(_sg_,g)> 0 then do;
                                        t1=_nrisk(_sg_,g)/skmgleft(_sg_,g);
                                        a(_sg_,g,g)=grho*t1*(1-t1/hdot);
                                        c(_sg_,g,g)=sum(c(_sg_,g,g),a(_sg_,g,g)*nd1/hdot/(1-cif0left));
                                        do j = g+1 to ng;
                                            if _nrisk(_sg_,j)> 0 then do;
                                                a(_sg_,g,j)=-grho*t1*_nrisk(_sg_,j)/skmgleft(_sg_,j)/hdot;
                                                a(_sg_,j,g)=a(_sg_,g,j);
                                                c(_sg_,g,j)=sum(c(_sg_,g,j),a(_sg_,g,j)*nd1/hdot/(1-cif0left));
                                                c(_sg_,j,g)=c(_sg_,g,j);                                    
                                            end;
                                        end;                                
                                    end;                        
                                end;
                                /**Variance Estimators**/
                                if (nd1^=0) then do k=1 to ng;
                                    if _nrisk(_sg_,k)>0 then do;
                                        if skmg(_sg_,k)>0 then vt1=1-(1-cif0)/skmg(_sg_,k);
                                        else vt1=1;
                                        if nd1>1 then vt2=1-(nd1-1)/(hdot*skmgleft(_sg_,k)-1);
                                        else vt2=1;
                                        vt3=vt2*skmgleft(_sg_,k)*nd1/(hdot*_nrisk(_sg_,k));
                                        vtvec(_sg_,k)=sum(vtvec(_sg_,k),vt1**2*vt3);
                                        do g = 1 to ng1;
                                            vt4=a(_sg_,g,k)-vt1*c(_sg_,g,k);
                                            vtmatrix(_sg_,g,k)=sum(vtmatrix(_sg_,g,k),vt4*vt1*vt3);
                                            do j = 1 to g;
                                                l=g*(g-1)/2+j;
                                                vt5=a(_sg_,j,k)-vt1*c(_sg_,j,k);
                                                vcov(_sg_,l)=sum(vcov(_sg_,l),vt3*vt4*vt5);
                                            end;
                                        end;
                                    end;
                                end;
                                if (nd2^=0) then do k=1 to ng;
                                    if (skmg(_sg_,k)>0 and otherevs(_sg_,k,i)) then do;
                                        vt1=(1-cif0)/skmg(_sg_,k);
                                        vt2=1;
                                        if otherevs(_sg_,k,i)>1 then vt2=1-(otherevs(_sg_,k,i)-1)/(_nrisk(_sg_,k)-1);
                                        vt3=vt2*((skmgleft(_sg_,k)**2)*otherevs(_sg_,k,i))/(_nrisk(_sg_,k)**2);
                                        vtvec(_sg_,k)=sum(vtvec(_sg_,k),vt1**2*vt3);
                                        do g=1 to ng1;
                                            vt4=vt1*c(_sg_,g,k);
                                            vtmatrix(_sg_,g,k)=sum(vtmatrix(_sg_,g,k),-vt4*vt1*vt3);
                                            do j=1 to g;
                                                l=g*(g-1)/2+j;
                                                vt5=vt1*c(_sg_,j,k);
                                                vcov(_sg_,l)=sum(vcov(_sg_,l),vt3*vt4*vt5);
                                            end;
                                        end;
                                    end;
                                end;
                            end;
                            do g = 1 to ng;
                                _nrisk(_sg_,g)=sum(_nrisk(_sg_,g),-censors(_sg_,g,i),
                                -events(_sg_,g,i),-otherevs(_sg_,g,i));
                                cifgleft(_sg_,g)=cifg(_sg_,g);
                                skmgleft(_sg_,g)=skmg(_sg_,g);
                            end;
                            cif0left=cif0;
                        end;
                        pos=0;
                        do g = 1 to ng1;
                            do j = 1 to g;
                                pos=pos+1;
                                do k = 1 to ng;
                                    vcov(_sg_,pos)=sum(vcov(_sg_,pos),
                                    c(_sg_,g,k)*c(_sg_,j,k)*vtvec(_sg_,k));
                                    vcov(_sg_,pos)=sum(vcov(_sg_,pos),
                                    c(_sg_,g,k)*vtmatrix(_sg_,j,k));
                                    vcov(_sg_,pos)=sum(vcov(_sg_,pos),
                                    c(_sg_,j,k)*vtmatrix(_sg_,g,k));
                                end;
                            end;
                        end;            
                    end;
                    if last then do;
                        do i = 1 to _sg_;
                            do j = 1 to ng1;
                                score_st(j)=sum(score_st(j),score(i,j));
                            end;
                        end;
                        do i = 1 to _sg_;
                            do j = 1 to ng1*ng/2;
                                vcov_st(j)=sum(vcov_st(j),vcov(i,j));
                            end;
                        end;
                    
                        do i = 1 to ng1;
                            do j = 1 to ng1;
                                vv(i,j)=0;
                            end;
                        end;
                        pos=0;
                        do i = 1 to ng1;
                            do j = 1 to i;
                                pos=pos+1;
                                vv(i,j)=vcov_st(pos);
                                vv(j,i)=vv(i,j);
                            end;
                        end;
                        output _score;
                        do i = 1 to ng1;
                            do j = 1 to ng1;
                                _var(j)=vv(i,j);
                            end;
                            output _variance;
                        end;    
                    end;
                run;
                
                proc fcmp;
                    %if &_ngroup > 2 %then %do;
                        array x[%sysevalf(&_ngroup-1),%sysevalf(&_ngroup-1)] / nosymbols;
                        array xinverse[%sysevalf(&_ngroup-1),%sysevalf(&_ngroup-1)];
                    %end;
                    %else %do;
                        array x[1] / nosymbols;
                        array xinverse[1];
                    %end;
                    array score[%sysevalf(&_ngroup-1)]/ nosymbols;
                    array scoret[%sysevalf(&_ngroup-1),1];
                    array step1[1,%sysevalf(&_ngroup-1)];
                    array step2[1];
                    
                    rc=read_array('_variance',x);
                    rc=read_array('_score',score);
                    %if &_ngroup > 2 %then %do;
                        call inv(x,xinverse);
                    %end;
                    %else %do;
                        xinverse[1]=1/x[1];
                    %end;
                    call transpose(score,scoret);
                    call mult(score,xinverse,step1);
                    call mult(step1,scoret,step2);
                    rc=write_array('_stat',step2);
                run;
                
                data _ltest;
                    set _stat (rename=(step21=test_stat));
                    df=&_ngroup-1;
                    probchisq=1-probchi(test_stat,df);
                run;
            %end;
        %end;
        %if %sysevalf(%superq(class&z)=,boolean)=0 and ^(%sysevalf(%qupcase(%superq(method&z))=CIF and &sysvlong < 9.04.01M1)) %then %do;
            /**hazard ratio, p-value**/
            proc phreg data=_tempdsn&z alpha=&&alpha&z;
                /***Set up class variable and class covariates***/
                class 
                    /***Class Variable and Reference Group***/
                    _class_ %if %sysevalf(%superq(classref&z)=,boolean)=0 %then %do; (ref="%superq(classref&z)") %end;;
                /**Apply strata**/
                %if %sysevalf(%superq(strata&z)=,boolean)=0 %then %do;
                    strata %do i = 1 %to %sysfunc(countw(%superq(strata&z),%str( ))); _strata_&i %end;;
                %end;
                /**Run model**/
                model _time_ * _cens_(%superq(cen_vl&z)) = _class_ /**Class Variable**/
                    / rl ties=%superq(hrties&z) type3 (SCORE LR WALD)
                    %if %sysevalf(%qupcase(%superq(method&z))=CIF) %then %do;
                        eventcode=%superq(ev_vl&z)
                    %end;; /**P-values, Ties, and Confidence Bounds, Competing Risks Event Level**/
                ods output parameterestimates=_parm (where=(upcase(strip(parameter))=upcase(strip("_class_")))) /***Hazard ratios and confidence intervals***/
                    %if %sysevalf(9.04.01M2P072314 > &sysvlong,boolean) %then %do;
                        type3=_t3 (where=(upcase(effect)=upcase("_class_"))) /**P-values**/
                    %end;
                    %else %do;
                        modelanova=_t3 (where=(upcase(strip(effect))=upcase(strip("_class_")))) /**P-values**/
                    %end;;
                %if %sysevalf(%qupcase(%superq(method&z))^=CIF,boolean) %then %do;
                    /**Outputs the betas for C-index calculations**/
                    output out=_xbeta  xbeta=xbeta;
                %end; 
            run;
            %if %sysevalf(%superq(classcov&z)^=,boolean) or %sysevalf(%superq(contcov&z)^=,boolean) %then %do;
                /**Adjusted hazard ratio, p-value**/
                proc phreg data=_tempdsn&z alpha=&&alpha&z;
                    /***Set up class variable and class covariates***/
                    class 
                        /***Class Variable and Reference Group***/
                        _class_ %if %sysevalf(%superq(classref&z)=,boolean)=0 %then %do; (ref="%superq(classref&z)") %end;
                        /**Class covariates**/
                        %if %sysevalf(%superq(classcov&z)=,boolean) =0 %then %do i = 1 %to %sysfunc(countw(%superq(classcov&z),%str( ))); 
                            _classcov_&i 
                        %end;;
                    /**Apply strata**/
                    %if %sysevalf(%superq(strata&z)=,boolean)=0 %then %do;
                        strata %do i = 1 %to %sysfunc(countw(%superq(strata&z),%str( ))); _strata_&i %end;;
                    %end;
                    /**Run model**/
                    model _time_ * _cens_(%superq(cen_vl&z)) = _class_ /**Class Variable**/
                        %if %sysevalf(%superq(classcov&z)=,boolean) =0 %then %do i = 1 %to %sysfunc(countw(%superq(classcov&z),%str( ))); _classcov_&i %end; /**Class Covariates**/
                        %if %sysevalf(%superq(contcov&z)=,boolean) =0 %then %do i = 1 %to %sysfunc(countw(%superq(contcov&z),%str( ))); _contcov_&i %end; /**Numeric Covariates**/
                        / rl ties=%superq(hrties&z) type3 (SCORE LR WALD)
                        %if %sysevalf(%qupcase(%superq(method&z))=CIF) %then %do;
                            eventcode=%superq(ev_vl&z)
                        %end;; /**P-values, Ties, and Confidence Bounds, and Competing Risks Event Code**/
                    ods output parameterestimates=_parmmv (where=(upcase(strip(parameter))=upcase(strip("_class_")))) /***Hazard ratios and confidence intervals***/
                        %if %sysevalf(9.04.01M2P072314 > &sysvlong,boolean) %then %do;
                            type3=_t3mv (where=(upcase(effect)=upcase("_class_"))) /**P-values**/
                        %end;
                        %else %do;
                            modelanova=_t3mv (where=(upcase(strip(effect))=upcase(strip("_class_")))) /**P-values**/
                        %end;;
                    %if %sysevalf(%qupcase(%superq(method&z))^=CIF,boolean) %then %do;
                        /**Outputs the betas for C-index calculations**/
                        output out=_xbetamv  xbeta=xbeta;
                    %end; 
                    where missing(_class_)=0
                        %if %sysevalf(%superq(classcov&z)=,boolean) =0 %then %do i = 1 %to %sysfunc(countw(%superq(classcov&z),%str( )));
                            and missing(_classcov_&i)=0
                        %end;
                        %if %sysevalf(%superq(contcov&z)=,boolean) =0 %then %do i = 1 %to %sysfunc(countw(%superq(contcov&z),%str( )));
                            and missing(_contcov_&i)=0
                        %end;  ;
                run;
            %end;
            
            %if %sysevalf(%qupcase(%superq(method&z))^=CIF,boolean) %then %do;
                data _xbeta;
                    set _xbeta (in=a)
                        %if %sysevalf(%superq(classcov&z)^=,boolean) or %sysevalf(%superq(contcov&z)^=,boolean) %then %do;
                            _xbetamv (in=b)
                        %end;;
                    if a then _bylevel_=0;
                    else _bylevel_=1;
                run;
                /**Sorts by present stratification**/
                %if %sysevalf(%superq(strata&z)=,boolean)=0 %then %do;
                    proc sort data=_xbeta out=_strata;
                        by _bylevel_
                        %do j=1 %to %sysfunc(countw(%superq(strata&z),%str( ))); 
                            _strata_&j
                        %end;;
                    run;
                %end;
                /**Counts number of stratification levels**/
                %local _nstrata1 _nstrata2;
                data _stratlevels;
                    /**Pulls if strata are present**/
                    %if %sysevalf(%superq(strata&z)^=,boolean) %then %do;
                        set _strata end=__last;
                        by _bylevel_
                        %do j=1 %to %sysfunc(countw(%superq(strata&z),%str( ))); 
                            _strata_&j
                        %end;;
                        if first._bylevel_ then _strata_=0;
                        if first._strata_%sysfunc(countw(%superq(strata&z),%str( ))) then _strata_+1;
                    %end;
                    /**Pulls if no strata are present**/
                    %else %do;
                        set _xbeta end=__last;
                        by _bylevel_;
                        _strata_=1;
                    %end;
                    /**Saves number of strata into macro variable**/
                    if last._bylevel_ then 
                        call symputx('_nstrata'||strip(put(_bylevel_,12.)),strip(put(_strata_,12.)));
                run;
                /**Updates censor variable to always be a 0/1 type for this portion of code**/
                proc sql;
                    update _stratlevels
                        set _cens_=case(_cens_)
                                when . then . /**missings stay missing - shouldn't happen**/
                                when %superq(cen_vl&z) then 0 /**Censor levels become 0**/
                            else 1 end;/**Other levels are considered events**/
                quit;
                /**Performs analysis by stratification levels**/
                /**Sorts by time and descending status**/
                proc sort data=_stratlevels out=__step1;
                    by _bylevel_ _strata_ _time_ descending _cens_;
                    /**Sorts by the distinct betas to get an ordered list**/
                proc sort data=__step1 (keep=_bylevel_ _strata_ xbeta) nodupkey out=__ordered_xbeta;
                    by _bylevel_ _strata_ xbeta;
                run;
                /**Counts the number of distinct betas**/
                data __ordered_xbeta;
                    set __ordered_xbeta;
                    by _bylevel_ _strata_;
                    if first._strata_ then n = 0;
                    n+1;
                run;
                /**Create macro variables for later**/
                proc sql noprint;
                    %local _null_ _null2_ n _uv;
                    select _bylevel_,_strata_,count(*),count(distinct xbeta)
                        into :_null_,:_null_,:n separated by ', ',:_uv separated by ', '
                        from __step1 group by _bylevel_,_strata_;/**Number of patients, Number of distinct xbetas**/
                    create table __step2 as
                        select a.*,
                            (select distinct N from __ordered_xbeta
                                where a._bylevel_=_bylevel_ and a._strata_=_strata_ and a.xbeta=xbeta) as __rank
                        from __step1 a; /**Ranks patients by xbeta**/
                quit;
                /**Creates binary tree for indexing patients**/
                /**This copies BTREE from survConcordance.fit**/
                proc sort data=__step2 out=_ranks_prep (keep=_bylevel_ _strata_) nodupkey;
                    by _bylevel_ _strata_;
                run;
                data _ranks;
                    set _ranks_prep;
                    by _bylevel_ _strata_;
                     
                    /**Create arrays and variables to match survConcordance.fit**/
                    array _uvs_ {%sysfunc(countw(%superq(_uv),%str(,)))} (&_uv);
                    array yet_to_do {%sysfunc(max(0,&_uv))};
                    array indx {%sysfunc(max(0,&_uv))};
                    array ranks {%sysfunc(max(0,&_uv))};
                    if first._strata_ then m+1;
                    
                    call missing(of yet_to_do(*),of indx(*),of ranks(*));
                    depth=floor(log2(_uvs_(m)));
                    start=2**depth;
                    lastrow_length=1+_uvs_(m)-start;
                    do i = 1 to _uvs_(m);
                        yet_to_do(i)=i;
                    end;
                    do i = 1 to lastrow_length;
                        indx(i)=1+2*(i-1);
                    end;
                    do i = 1 to _uvs_(m);
                        if ^missing(indx(i)) then do;
                            ranks(yet_to_do(indx(i)))=start+(i-1);
                        end;
                    end;
                    do i = 1 to dim(indx);
                        if ^missing(indx(i)) then do;
                            yet_to_do(indx(i))=.;
                        end;
                    end;
                    count=1;
                    do i = 1 to dim(yet_to_do);
                        if ^missing(yet_to_do(i)) then do;
                            yet_to_do(count)=yet_to_do(i);
                            count=count+1;
                            yet_to_do(i)=.;
                        end;
                    end;
                    do while(start>1);
                        start=int(start/2);
                        do i = 1 to dim(indx);
                            indx(i)=.;
                        end;
                        do i = 1 to start;
                            indx(i)=1+2*(i-1);
                        end;
                        do i = 1 to dim(indx);
                            if ^missing(indx(i)) then do;
                                ranks(yet_to_do(indx(i)))=start+(i-1);
                            end;
                        end;
                        do i = 1 to dim(indx);
                            if ^missing(indx(i)) then do;
                                yet_to_do(indx(i))=.;
                            end;
                        end;
                        count=1;
                        do i = 1 to dim(yet_to_do);
                            if ^missing(yet_to_do(i)) then do;
                               yet_to_do(count)=yet_to_do(i);
                               count=count+1;
                               yet_to_do(i)=.;
                            end;
                        end;
                    end;
                    do i = 1 to dim(ranks);
                        /**Outputs indexes for the ranks**/
                        *call symput('_r'||strip(put(i,12.)),strip(put(ranks(i)-1,12.)));
                        ranks(i)=ranks(i)-1;
                    end;
                                            
                    keep _bylevel_ _strata_ ranks:;
                run;
                data __step2;
                    merge __step2 _ranks;
                    by _bylevel_ _strata_;
                run;
                /**Performs the C-index calculations**/
                /**Copies the function docount from survConcordance.fit**/
                data _step3;
                    set __step2 end=last;
                    by _bylevel_ _strata_;
                    /**Initializes arrays and variables for calculations**/
                    /**Method is to save values into temporary arrays and 
                    then perform calculations on the last observation**/
                    array ranks {*} ranks:;
                    array _ns_ {%sysfunc(countw(%superq(n),%str(,)))} (&n);
                    array _uvs_ {%sysfunc(countw(%superq(_uv),%str(,)))} (&_uv);
                    array y {2,%sysfunc(max(0,&n))} _temporary_;
                    array wt {%sysfunc(max(0,&n))} _temporary_;
                    array indx {%sysfunc(max(0,&n))} _temporary_;
                    array count {5};
                    array twt (%sysevalf(2*%sysfunc(max(0,&_uv))));
                    array nwt (%sysevalf(2*%sysfunc(max(0,&_uv))));
                    if first._strata_ then do;
                        call missing(of y(*),of wt(*),of indx(*));
                        _nc_=0;
                        _nstrata_+1;
                    end;
                    _nc_+1;                            
                    n=_ns_(_nstrata_);
                    y(1,_nc_)=_time_;
                    y(2,_nc_)=_cens_;
                    wt(_nc_)=1;
                    i=1;
                    do while (__rank^=i);
                        i=i+1;
                    end;
                    indx(_nc_)=ranks(i);
                    ntree=_uvs_(_nstrata_);
                    vss=0;/**Initializes for standard error calculation**/
                    if last._strata_ then do;/**Starts calculations**/
                        do i = 1 to dim(twt);
                            twt(i)=0;nwt(i)=0;
                        end;
                        do i = 1 to dim(count);
                            count(i)=0;
                        end;
                        i=n-1;
                        do while(i ge 0);/**First While loop**/
                            ndeath=0;
                            if y[2,i+1]=1 then do;/**Event Section**/
                                j=i;
                                if j > 0 then do while(j>0 and y(2,j+1)=1 and y(1,j+1)=y(1,i+1));/**Start J Loop**/
                                    ndeath=ndeath+wt(j+1);
                                    index=indx(j+1);
                                    k=i;
                                    if k > j then do while(k>j);/**Adds to ties**/
                                        count(4)=count(4)+wt(j+1)*wt(k+1);
                                        k=k-1;
                                    end;
                                    else k=k-1;
                                    count(3)=count(3)+wt(j+1)*nwt(index+1);/**Adds to time ties**/
                                    child=2*index+1;
                                    if child < ntree then
                                        count(1)=count(1)+wt(j+1)*twt(child+1);/**Adds to concordant pairs**/
                                    child=child+1;
                                    if child < ntree then
                                        count(2)=count(2)+wt(j+1)*twt(child+1);/**Adds to discordant pairs**/
                                    do while(index >0);
                                        parent=int((index-1)/2);
                                        if band(index,1) then
                                            count(2)=count(2)+wt(j+1)*(twt(parent+1)-twt(index+1));/**Adds to discordant pairs**/
                                        else count(1)=count(1)+wt(j+1)*(twt(parent+1)-twt(index+1));/**Adds to concordant pairs**/
                                        index=parent;
                                    end;
                                    j=j-1;
                                end;/**Ends J loop**/
                                else if j=0 then do;/**Finishes J=0 level of original loop**/
                                    if y(2,j+1)=1 and y(1,j+1)=y(1,i+1) then do;/**Event Loop**/
                                        ndeath=ndeath+wt(j+1);
                                        index=indx(j+1);
                                        k=i;
                                        if k > j then do while(k>j);
                                            count(4)=count(4)+wt(j+1)*wt(k+1);/**Adds to ties**/
                                            k=k-1;
                                        end;
                                        else k=k-1;
                                        count(3)=count(3)+wt(j+1)*nwt(index+1);/**Adds to time ties**/
                                        child=2*index+1;
                                        if child < ntree then
                                            count(1)=count(1)+wt(j+1)*twt(child+1);/**Adds to concordant pairs**/
                                        child=child+1;
                                        if child < ntree then
                                            count(2)=count(2)+wt(j+1)*twt(child+1);/**Adds to discordant pairs**/
                                        do while(index >0);
                                            parent=int((index-1)/2);
                                            if band(index,1) then
                                                count(2)=count(2)+wt(j+1)*(twt(parent+1)-twt(index+1));/**Adds to discordant pairs**/
                                            else count(1)=count(1)+wt(j+1)*(twt(parent+1)-twt(index+1));/**Adds to concordant pairs**/
                                            index=parent;
                                        end;
                                        j=j-1;
                                    end;/**Ends event loop**/
                                end;/**Ends J=0 loop**/
                            end;/**Ends Event section**/
                            else j = i-1;
                            if i>j then do while (i>j);/**Sum of squares section**/
                                wsum1=0;
                                oldmean=twt(1)/2;
                                index=indx(i+1);
                                nwt(index+1)=nwt(index+1)+wt(i+1);
                                twt(index+1)=twt(index+1)+wt(i+1);
                                wsum2=nwt(index+1);
                                child=2*index + 1;
                                if child < ntree then wsum1=wsum1+twt(child+1);
                                do while(index > 0);
                                    parent=int((index-1)/2);
                                    twt(parent+1)=twt(parent+1)+wt(i+1);
                                    if ^(band(index,1)) then wsum1=wsum1+(twt(parent+1)-twt(index+1));
                                    index=parent;
                                end;
                                wsum3=twt(1) - (wsum1+wsum2);
                                lmean=wsum1/2;
                                umean=wsum1+wsum2+wsum3/2;
                                newmean=twt(1)/2;
                                myrank=wsum1+wsum2/2;
                                /**Adds to sum of squares**/
                                vss=vss+wsum1*(newmean+oldmean-2*lmean)*(newmean-oldmean);
                                vss=vss+wsum3*(newmean+oldmean+wt(i+1)-2*umean)*(oldmean-newmean);
                                vss=vss+wt(i+1)*(myrank-newmean)*(myrank-newmean);
                                i=i-1;
                            end;/**Ends sum of squares section**/
                            else i=i-1;
                            count(5)=count(5)+ndeath*vss/twt(1);/**Adds to variance**/
                        end;/**Ends first loop**/
                        concordant=count(1);
                        discordant=count(2);
                        ties=count(3);
                        ties_time=count(4);
                        std=2*sqrt(count(5));/**Calculates standard deviation**/
                        if concordant+discordant+ties > 0 then do;
                            c=(concordant+ties/2)/(concordant+discordant+ties);/**Calculates concordance**/
                            se=std/(2*sum(concordant,discordant,ties));/**Calculates standard error**/
                        end;
                        else do;
                            c=0;se=0;
                        end;
                        output;
                    end;
                    keep _bylevel_ _strata_ concordant discordant ties ties_time std c se;
                run;
                /**Puts all calculations by strata level into same dataset**/
                /**Split by current BY level**/
                /**Calculates overall C-index within current by level**/
                data _cindex;
                    set _step3;
                    by _bylevel_ _strata_;
                    drop _strata_;
                    array temp {5}  _temporary_;
                    if first._bylevel_ then do i = 1 to 5;
                        temp(i)=0;
                    end;
                    if ^(first._bylevel_ and last._bylevel_) then do;
                        temp(1)=temp(1)+concordant;
                        temp(2)=temp(2)+discordant;
                        temp(3)=temp(3)+ties;
                        temp(4)=temp(4)+ties_time;
                        temp(5)=temp(5)+std;
                        c=.;
                        se=.;
                        strata=_strata_;
                        output;
                        /**Calculates overall c-index**/
                        if last._bylevel_ then do;
                            concordant=temp(1);
                            discordant=temp(2);
                            ties=temp(3);
                            ties_time=temp(4);
                            std=temp(5);
                            c=(concordant+ties/2)/(concordant+discordant+ties);
                            se=std/(2*sum(concordant,discordant,ties));
                            strata=.;
                            output;
                        end;
                        drop i;
                    end;
                    else do;
                        strata=.;
                        output;
                    end;
                run;
                    
                proc datasets nolist nodetails;
                    delete  _stratlevels _strata _xbeta _xbetamv __ordered_xbeta _ranks _ranks_prep
                         __step1 __step2 _step3 _ranks;
                quit;
            %end;
            %else %do;
                data _cindex;
                    strata=.;_bylevel_=.;c=.;se=.;output;
                run;
            %end;
        %end;
        proc sql;
            /**Creates a fresh table to insert analysis into for summary table if flagged**/
            /**If not flagged, inserts new anlysis into current table**/
            %local _model;
            ***Check if output table has been determined;
            %if %sysevalf(%superq(out)=,boolean)=0 %then %do;
                %if (&newtable=1 or %sysfunc(exist(&out))=0) and &z = 1 %then %do;
                    create table &out
                        (modelnum num 'Model Number',/**Tracks models to distinguish later in PROC REPORT**/
                        modeltype num, /**Tracks whether the data is KM or CIF**/
                        subind num 'Indentation Indicator',/**Determines if a row is indented or not in PROC REPORT**/
                        subtitle char(100) 'Factor Label',/**Sub-title for each model's analysis.  Generally a description of the class variable**/
                        title char(2000) 'Model Title',/**Title for each model's analysis**/
                        footnote char(2000) 'Model Footnote',/**Footnotes for each model's analysis**/
                        total num 'Total',/**Number of patients**/
                        event num 'Events',/**Number of events**/
                        ev_n char(100) 'Events/N',/**Combination of events and patients.  Format events/patients**/
                        median char(50) 'Median',/**Median time-to-event with confidence interval**/
                        hr char(50) 'Hazard Ratio (95% CI)',/**Hazard ratio with confidence interval**/ 
                        timelist char(500) 'KM Estimate (95% CI)',/**Event time-point estimates**/
                        covpval char(50) 'Covariate Level P-value',/**Covariate Level P-value**/
                        pval char(50) 'Displayed P-value',/**Chosen P-value to display for model**/
                        cindex char(50) 'C-index (95% CI)',/**C-index for univariate model**/
                        totalmv num 'Total (Multivariate)',/**Number of patients**/
                        eventmv num 'Events (Multivariate)',/**Number of events**/
                        ev_nmv char(100) 'Events/N (Multivariate)',/**Combination of events and patients.  Format events/patients**/
                        hrmv char(50) 'Hazard Ratio (95% CI) (Multivariate)',/**Hazard ratio with confidence interval**/ 
                        pvalmv char(50) 'Displayed P-value (Multivariate)',/**Chosen P-value to display for model**/
                        covpvalmv char(50) 'Covariate Level P-value (Multivariate)',/**Covariate Level P-value**/
                        cindexmv char(50) 'C-index (95% CI)'/**C-index for multivariate model**/);
                    %let _model=0;           
                %end;
                %else %if &z =1 %then %do;
                    /**Grab maximum modelnum from previous table to increment upon**/
                    select max(modelnum) into :_model from &out;
                %end;
                /**Create temporary table to insert analysis into before inserting into summary table**/
                create table _temptable like &out;
            %end;
            %else %do;
                %if &z=1 %then %do;
                /**Default if no output table requested**/
                create table _summary
                    (modelnum num 'Model Number',/**Tracks models to distinguish later in PROC REPORT**/
                    modeltype num, /**Tracks whether the data is KM or CIF**/
                    subind num 'Indentation Indicator',/**Determines if a row is indented or not in PROC REPORT**/
                    subtitle char(100) 'Factor Label',/**Sub-title for each model's analysis.  Generally a description of the class variable**/
                    title char(2000) 'Model Title',/**Title for each model's analysis**/
                    footnote char(2000) 'Model Footnote',/**Footnotes for each model's analysis**/
                    total num 'Total',/**Number of patients**/
                    event num 'Events',/**Number of events**/
                    ev_n char(100) 'Events/N',/**Combination of events and patients.  Format events/patients**/
                    median char(50) 'Median',/**Median time-to-event with confidence interval**/
                    hr char(50) 'Hazard Ratio (95% CI)',/**Hazard ratio with confidence interval**/ 
                    timelist char(500) 'KM Estimate (95% CI)',/**Event time-point estimates**/
                    covpval char(50) 'Covariate Level P-value',/**Covariate Level P-value**/
                    pval char(50) 'Displayed P-value',/**Chosen P-value to display for model**/
                    cindex char(50) 'C-index (95% CI)',/**C-index for univariate model**/
                    totalmv num 'Total (Multivariate)',/**Number of patients**/
                    eventmv num 'Events (Multivariate)',/**Number of events**/
                    ev_nmv char(100) 'Events/N (Multivariate)',/**Combination of events and patients.  Format events/patients**/
                    hrmv char(50) 'Hazard Ratio (95% CI) (Multivariate)',/**Hazard ratio with confidence interval**/ 
                    pvalmv char(50) 'Displayed P-value (Multivariate)',/**Chosen P-value to display for model**/
                    covpvalmv char(50) 'Covariate Level P-value (Multivariate)',/**Covariate Level P-value**/
                    cindexmv char(50) 'C-index (95% CI)'/**C-index for multivariate model**/);
                %let _model=0;
                %end;
                /**Create temporary table to insert analysis into before inserting into summary table**/
                create table _temptable like _summary;
            %end;          
            reset noprint;
            
            %local nclass_&z;
            %if %sysevalf(%superq(class&z)=,boolean)=0 %then %do;
                /**Saves number of class levels into macro variable**/
                select count(distinct _class_) into :nclass_&z from _sum
                    where control_var = '';
            %end;
            %else %do;
                /**Set number of class levels to 1**/
                %let nclass_&z=1;
            %end; 
            /***Error Check if Enough Colors were Specified***/
            %if %sysevalf(%superq(color&z)=,boolean)=0 %then %do;
                %if %superq(nclass_&z) > %sysfunc(countw(%superq(color&z),%str( ))) and
                    %sysfunc(countw(%superq(color&z),%str( ))) > 1 %then %do;
                    %put ERROR: (Model &z: COLOR) Not enough line colors specified for number of class levels (%qupcase(%superq(color&z)) vs. %sysfunc(strip(%superq(nclass_&z))) Class Levels);
                    %let nerror_run=%eval(&nerror_run+1);
                %end;
            %end;
            %else %do;
                %put ERROR: (Model &z: COLOR) No line colors specified;
                %let nerror_run=%eval(&nerror_run+1);
            %end;
            /***Error Check if Enough Plot Line Patterns were Specified***/
            %if %sysevalf(%superq(pattern&z)=,boolean)=0 %then %do;
                %if %superq(nclass_&z) > %sysfunc(countw(%superq(pattern&z),%str( ))) and
                    %sysfunc(countw(%superq(pattern&z),%str( ))) > 1 %then %do;
                    %put ERROR: (Model &z: PATTERN) Not enough patterns specified for number of class levels (%qupcase(%superq(pattern&z)) vs. %sysfunc(strip(%superq(nclass_&z))) Class Levels);
                    %let nerror_run=%eval(&nerror_run+1);
                %end;
            %end;
            %else %do;
                %put ERROR: (Model &z: PATTERN) No line patterns specified;
                %let nerror_run=%eval(&nerror_run+1);
            %end;
            %if %sysevalf(%superq(plotci&z)=1,boolean) %then %do;
                /**If Plot CI background fill is enabled**/
                %if %sysevalf(%superq(plotcifill&z)=1,boolean) %then %do;
                    /***Error Check if Enough Colors were Specified for Confidence Bounds Fill***/
                    %if %sysevalf(%superq(plotcifillcolor&z)=,boolean)=0 %then %do;
                        %if %superq(nclass_&z) > %sysfunc(countw(%superq(plotcifillcolor&z),%str( ))) and
                            %sysfunc(countw(%superq(plotcifillcolor&z),%str( ))) > 1 %then %do;
                            %put ERROR: (Model &z: PLOTCIFILLCOLOR) Not enough line colors specified for number of class levels (%qupcase(%superq(plotcifillcolor&z)) vs. %sysfunc(strip(%superq(nclass_&z))) Class Levels);
                            %let nerror_run=%eval(&nerror_run+1);
                        %end;
                    %end;
                    %else %do;
                        %put ERROR: (Model &z: PLOTCIFILLCOLOR) No line colors specified;
                        %let nerror_run=%eval(&nerror_run+1);
                    %end;
                %end;
                /***Error Check if Enough Colors were Specified for Confidence Bounds Lines***/
                %if %sysevalf(%superq(plotcilinecolor&z)=,boolean)=0 %then %do;
                    %if %superq(nclass_&z) > %sysfunc(countw(%superq(plotcilinecolor&z),%str( ))) and
                        %sysfunc(countw(%superq(plotcilinecolor&z),%str( ))) > 1 %then %do;
                        %put ERROR: (Model &z: PLOTCILINECOLOR) Not enough line colors specified for number of class levels (%qupcase(%superq(plotcilinecolor&z)) vs. %sysfunc(strip(%superq(nclass_&z))) Class Levels);
                        %let nerror_run=%eval(&nerror_run+1);
                    %end;
                %end;
                %else %do;
                    %put ERROR: (Model &z: PLOTCILINECOLOR) No line colors specified;
                    %let nerror_run=%eval(&nerror_run+1);
                %end;
                /***Error Check if Enough Plot Line Patterns were Specified***/
                %if %sysevalf(%superq(color&z)=,boolean)=0 %then %do;
                    %if %superq(nclass_&z) > %sysfunc(countw(%superq(plotcilinepattern&z),%str( ))) and
                        %sysfunc(countw(%superq(plotcilinepattern&z),%str( ))) > 1 %then %do;
                        %put ERROR: (Model &z: PLOTCILINEPATTERN) Not enough patterns specified for number of class levels (%qupcase(%superq(plotcilinepattern&z)) vs. %sysfunc(strip(%superq(nclass_&z))) Class Levels);
                        %let nerror_run=%eval(&nerror_run+1);
                    %end;
                %end;
                %else %do;
                    %put ERROR: (Model &z: PLOTCILINEPATTERN) No line patterns specified;
                    %let nerror_run=%eval(&nerror_run+1);
                %end;
            %end;
            /***Error Check if Enough Class Order Levels were Specified if Not Missing***/
            %if %sysevalf(%superq(classorder&z)^=,boolean) %then %do;
                %if %superq(nclass_&z) ^= %sysfunc(countw(%superq(classorder&z),%str( ))) %then %do;
                    %put ERROR: (Model &z: CLASSORDER) Different number of classorders specified than number of class levels (%qupcase(%superq(classorder&z)) vs. %sysfunc(strip(%superq(nclass_&z))) Class Levels);
                    %let nerror_run=%eval(&nerror_run+1);
                %end;
            %end;   
            /***Error Check if each level of class was specified in the class order list***/    
            %if %sysevalf(%superq(classorder&z)^=,boolean) and &nerror_run=0 %then %do;
                %do i = 1 %to %superq(nclass_&z);
                    %local _test;
                    %let _test=;
                    %do j = 1 %to %sysfunc(countw(%superq(classorder&z),%str( )));
                        %if &i = %scan(%superq(classorder&z),&j,%str( )) %then %let _test=1;
                    %end;
                    %if &_test ^=1 %then %do;
                        %put ERROR: (Model &z: CLASSORDER) Number &i was not found in the CLASSORDER list;
                        %put ERROR: (Model &z: CLASSORDER): Each number from 1 to maximum number of levels in CLASS variable %qupcase(%superq(class&z)) (%sysfunc(strip(%superq(nclass_&z)))) must be represented;
                        %let nerror_run=%eval(&nerror_run+1);                            
                    %end;
                %end;
            %end;                   
            %if &nerror_run > 0 %then %goto errhandl2;
            
            
            /***Save class values into macro variables***/
            %do i = 1 %to %superq(nclass_&z);
                %local class_&z._&i;
            %end;               
            %if %sysevalf(%superq(class&z)=,boolean) =0 %then %do;
                /**If order set to auto then select class values in order sorted by class variable**/
                %if %sysevalf(%superq(classorder&z)=,boolean) %then %do;
                    select distinct _class_ into :class_&z._1-:class_&z._%sysfunc(strip(%superq(nclass_&z)))
                        from _sum
                        where control_var = ''
                        order by _class_
                        %if %superq(desc&z)=1 %then %do; DESC %end; /**If desc=DESC then reverse order of class variable**/;
                %end;
                %else %do;
                    /**Select class values per requested order**/
                    %local ___classlevels_&z;
                    select distinct _class_ into :___classlevels_&z separated by '|'
                        from _sum
                        where control_var = ''
                        order by _class_;
                    %local i2;
                    %do i = 1 %to %superq(nclass_&z);
                        %if %superq(desc&z)=1 %then %let i2=%sysfunc(abs(%sysfunc(sum(&i,-%superq(nclass_&z),-1))));
                        %else %let i2=&i;
                        %let class_&z._&i = %scan(%superq(___classlevels_&z),%scan(%superq(classorder&z),&i2),|,m);
                    %end;
                %end;
            %end;
            %else %let class_&z._1=%superq(classdesc&z);
            
            %if %superq(sreverse&z) = 1 and %sysevalf(%superq(timelist&z)^=,boolean) %then %do;
                update _timelist
                    set survival=1-survival,
                    sdf_lcl=1-sdf_ucl,
                    sdf_ucl=1-sdf_lcl;
            %end;
            
            %if %sysevalf(%superq(timelist&z)=,boolean)=0 %then %do i = 1 %to %superq(nclass_&z);
                /**Create a macro variable storing values of timelist survival estimates**/
                /**^n creates a new line, ^_ unbreakable space**/
                %local tl&i;
                select strip(put(timelist, best12.3)) || " %superq(timedx&z): ^n " ||
                    'A0A0A0'x ||
                    case(survival)
                        when . then 'NE'
                    else strip(put(%superq(xmult_&z) *survival,%superq(tfmt_&z)))end || ' (' ||
                    case(sdf_lcl)
                        when . then 'NE'
                    else strip(put(%superq(xmult_&z) *sdf_lcl,%superq(tfmt_&z))) end || '-' ||
                    case (sdf_ucl)
                        when . then 'NE'
                    else strip(put(%superq(xmult_&z) *sdf_ucl,%superq(tfmt_&z))) end ||
                    %if %sysfunc(upcase(%superq(ytype&z))) = PCT %then %do; '%' || %end; ')'
                    into :tl&i separated by '^n '
                    from _timelist
                    %if %sysevalf(%superq(class&z)=,boolean)=0 %then %do;
                        where strip(_class_)=strip("%superq(class_&z._&i)")
                    %end;
                    ;
            %end;
            
            /**Insert analysis into final summary dataset**/
            insert into _temptable
                /*Inserts Header row for model*/
                set modelnum=sum(&z,&_model),
                modeltype=%if %sysevalf(%qupcase(%superq(method&z))=KM,boolean) %then %do;
                              %if %sysevalf(%superq(sreverse&z)=1,boolean) %then %do;
                                1
                              %end;
                              %else %do;
                                0
                              %end;
                          %end;
                          %else %do;
                            2
                          %end;,
                title=strip("%superq(title&z)"),
                footnote=strip(tranwrd("%superq(footnote&z)",'`','^n')),
                subind=1,
                %if %sysevalf("%superq(classdesc&z)"="",boolean) and %sysevalf(%superq(class&z)^=,boolean) %then %do;
                    subtitle=strip("%superq(label&z)"),
                %end;
                %else %do;
                    subtitle=strip("%superq(classdesc&z)"),
                %end;
                %if %sysevalf(%superq(class&z)=,boolean) %then %do; 
                    total=(select total from _sum),
                    event=(select failed from _sum),
                    ev_n=(select strip(put(failed,12.))||'/'||strip(put(total,12.)) from _sum),
                    median=(select case (estimate)
                        when . then 'NE'
                    else strip(put(estimate, %sysevalf(%sysevalf(12.&&mediandigits&z)))) end || ' (' ||
                    case (lowerlimit)
                        when . then 'NE'
                    else strip(put(lowerlimit, %sysevalf(12.&&mediandigits&z))) end || '-' ||
                    case (upperlimit)
                        when . then 'NE'
                    else strip(put(upperlimit, %sysevalf(12.&&mediandigits&z))) end || ')'
                    from _quart)                    
                    %if %sysevalf(%superq(timelist&z)=,boolean)=0 %then %do;
                        , timelist=strip("&tl1")
                    %end;
                %end;
                %else %do;
                    pval=%if %qupcase(%superq(plotpval&z))=LR %then %do;
                            strip(put((select problrchisq from _t3
                            where upcase(effect)=upcase(strip("_class_"))),pvalue%sysevalf(6.&&pvaldigits&z)))||'^{super #}'
                        %end;
                        %else %if %qupcase(%superq(plotpval&z))=SCORE %then %do;
                            strip(put((select probscorechisq from _t3
                            where upcase(effect)=upcase(strip("_class_"))),pvalue%sysevalf(6.&&pvaldigits&z)))||'^{super $}'
                        %end;
                        %else %if %qupcase(%superq(plotpval&z))=WALD and ^(%sysevalf(%qupcase(%superq(method&z))=CIF,boolean) and &sysvlong < 9.04.01M1) %then %do;
                            strip(put((select probchisq from _t3
                            where upcase(effect)=upcase(strip("_class_"))),pvalue%sysevalf(6.&&pvaldigits&z)))||'^{super +}'
                        %end;
                        %else %if %qupcase(%superq(plotpval&z))=LOGRANK %then %do;
                            strip(put((select probchisq from _ltest),pvalue%sysevalf(6.&&pvaldigits&z)))||'^{super *}'
                        %end;
                        %else %if %qupcase(%superq(plotpval&z))=WILCOXON %then %do;
                            strip(put((select probchisq from _ltest),pvalue%sysevalf(6.&&pvaldigits&z)))||'^{super @}'
                        %end;
                        %else %if %qupcase(%superq(plotpval&z))=GRAY %then %do;
                            strip(put((select probchisq from _ltest),pvalue%sysevalf(6.&&pvaldigits&z)))||'^{super G}'
                        %end;
                        %else %do;
                            ''
                        %end;,
                    cindex=(select strip(put(c,%sysevalf(12.&&cindexdigits&z)))||' ('||
                                strip(put(c-probit(1-&&alpha&z/2)*se,%sysevalf(12.&&cindexdigits&z)))||'-'||
                                strip(put(c+probit(1-&&alpha&z/2)*se,%sysevalf(12.&&cindexdigits&z)))||')'
                                from _cindex where _bylevel_=0 and strata=.)
                        %if %sysevalf(%superq(classcov&z)^=,boolean) or %sysevalf(%superq(contcov&z)^=,boolean) %then %do;
                            ,pvalmv=%if %qupcase(%superq(plotpvalmv&z))=LR %then %do;
                                        strip(put((select problrchisq from _t3mv
                                        where upcase(effect)=upcase(strip("_class_"))),pvalue%sysevalf(6.&&pvaldigits&z)))||'^{super #}'
                                    %end;
                                    %else %if %qupcase(%superq(plotpvalmv&z))=SCORE %then %do;
                                        strip(put((select probscorechisq from _t3mv
                                        where upcase(effect)=upcase(strip("_class_"))),pvalue%sysevalf(6.&&pvaldigits&z)))||'^{super $}'
                                    %end;
                                    %else %if %qupcase(%superq(plotpvalmv&z))=WALD and ^(%sysevalf(%qupcase(%superq(method&z))=CIF,boolean) and &sysvlong < 9.04.01M1)  %then %do;
                                        strip(put((select probchisq from _t3mv
                                        where upcase(effect)=upcase(strip("_class_"))),pvalue%sysevalf(6.&&pvaldigits&z)))||'^{super +}'
                                    %end;
                                    %else %do;
                                        ''
                                    %end;                            
                            ,cindexmv=(select strip(put(c,%sysevalf(12.&&cindexdigits&z)))||' ('||
                                strip(put(c-probit(1-&&alpha&z/2)*se,%sysevalf(12.&&cindexdigits&z)))||'-'||
                                strip(put(c+probit(1-&&alpha&z/2)*se,%sysevalf(12.&&cindexdigits&z)))||')'
                                from _cindex where _bylevel_=1 and strata=.)
                        %end; 
                %end;
                /*Inserts 1 row for each level of class variable*/ 
                %if %sysevalf(%superq(class&z)=,boolean)=0 %then %do i = 1 %to %superq(nclass_&z);
                    set modelnum=sum(&z,&_model),
                    modeltype=%if %sysevalf(%qupcase(%superq(method&z))=KM,boolean) %then %do;
                                %if %sysevalf(%superq(sreverse&z)=1,boolean) %then %do;
                                    1
                                %end;
                                %else %do;
                                    0
                                %end;
                              %end;
                              %else %do;
                                2
                              %end;,
                    title=strip("%superq(title&z)"),
                    footnote=strip(tranwrd("%superq(footnote&z)",'`','^n')),
                    subind=0,subtitle=strip("%superq(class_&z._&i)") ,                 
                    total=(select total from _sum where strip(_class_)=strip("%superq(class_&z._&i)")),
                    event=(select failed from _sum where strip(_class_)=strip("%superq(class_&z._&i)")),
                    ev_n=(select strip(put(failed,12.))||'/'||strip(put(total,12.)) from _sum
                            where strip(_class_)=strip("%superq(class_&z._&i)")),
                    median=(select case (estimate)
                                    when . then 'NE'
                                else strip(put(estimate, %sysevalf(12.&&mediandigits&z))) end || ' (' ||
                                case (lowerlimit)
                                    when . then 'NE'
                                else strip(put(lowerlimit, %sysevalf(12.&&mediandigits&z))) end || '-' ||
                                case (upperlimit)
                                    when . then 'NE'
                                else strip(put(upperlimit, %sysevalf(12.&&mediandigits&z))) end || ')'
                            from _quart where strip(_class_) = strip("%superq(class_&z._&i)")),
                    %if ^(%sysevalf(%qupcase(%superq(method&z))=CIF,boolean) and &sysvlong < 9.04.01M1) %then %do;
                        hr = case ((select hazardratio from _parm where
                                upcase(strip(parameter))=upcase(strip("_class_")) and upcase(strip(classval0))=upcase(strip("%superq(class_&z._&i)"))))
                                when . then "%superq(refhrtext&z)"
                             else (select strip(put(hazardratio, %sysevalf(12.&&hrdigits&z)))
                             || ' (' ||
                             strip(put(hrlowercl, %sysevalf(12.&&hrdigits&z))) || '-' ||
                             strip(put(hruppercl, %sysevalf(12.&&hrdigits&z))) || ')' from _parm where
                             upcase(strip(parameter))=upcase(strip("_class_")) and upcase(classval0)=upcase(strip("%superq(class_&z._&i)"))) end,
                        covpval = case ((select hazardratio from _parm where
                                        upcase(strip(parameter))=upcase(strip("_class_")) and 
                                        upcase(strip(classval0))=upcase(strip("%superq(class_&z._&i)"))))
                                    when . then "%superq(refptext&z)"
                                else (select strip(put(probchisq,pvalue%sysevalf(6.&&pvaldigits&z)))||'^{super +}' from _parm where
                                upcase(strip(parameter))=upcase(strip("_class_")) and upcase(classval0)=upcase(strip("%superq(class_&z._&i)"))) end
                    %end;
                    %else %do;
                        hr = '',covpval=''
                    %end;
                    %if %sysevalf(%superq(classcov&z)^=,boolean) or %sysevalf(%superq(contcov&z)^=,boolean) %then %do;
                        ,eventmv=(select count(*) from _tempdsn&z where strip(_class_)=strip("%superq(class_&z._&i)") and _cens_^=%superq(cen_vl&z) and _time_>0
                        %if %sysevalf(%qupcase(%superq(method))=CIF,boolean) %then %do;
                            and _cens_=%superq(ev_vl)
                        %end;
                        %if %sysevalf(%superq(classcov&z)=,boolean) =0 %then %do k = 1 %to %sysfunc(countw(%superq(classcov&z),%str( )));
                            and missing(_classcov_&k)=0
                        %end;
                        %if %sysevalf(%superq(contcov&z)=,boolean) =0 %then %do k = 1 %to %sysfunc(countw(%superq(contcov&z),%str( )));
                            and missing(_contcov_&k)=0
                        %end;),
                        totalmv=(select count(*) from _tempdsn&z where strip(_class_)=strip("%superq(class_&z._&i)") and _time_>0
                            %if %sysevalf(%superq(classcov&z)=,boolean) =0 %then %do k = 1 %to %sysfunc(countw(%superq(classcov&z),%str( )));
                                and missing(_classcov_&k)=0
                            %end;
                            %if %sysevalf(%superq(contcov&z)=,boolean) =0 %then %do k = 1 %to %sysfunc(countw(%superq(contcov&z),%str( )));
                                and missing(_contcov_&k)=0
                            %end;),
                        ev_nmv=strip(put((select count(*) from _tempdsn&z where strip(_class_)=strip("%superq(class_&z._&i)") and _cens_^=%superq(cen_vl&z) and _time_>0
                            %if %sysevalf(%qupcase(%superq(method&z))=CIF,boolean) %then %do;
                                and _cens_=%superq(ev_vl&z)
                            %end;
                            %if %sysevalf(%superq(classcov&z)=,boolean) =0 %then %do k = 1 %to %sysfunc(countw(%superq(classcov&z),%str( )));
                                and missing(_classcov_&k)=0
                            %end;
                            %if %sysevalf(%superq(contcov&z)=,boolean) =0 %then %do k = 1 %to %sysfunc(countw(%superq(contcov&z),%str( )));
                                and missing(_contcov_&k)=0
                            %end;),12.))||'/'||
                            strip(put((select count(*) from _tempdsn&z where strip(_class_)=strip("%superq(class_&z._&i)")
                            %if %sysevalf(%superq(classcov&z)=,boolean) =0 %then %do k = 1 %to %sysfunc(countw(%superq(classcov&z),%str( )));
                                and missing(_classcov_&k)=0
                            %end;
                            %if %sysevalf(%superq(contcov&z)=,boolean) =0 %then %do k = 1 %to %sysfunc(countw(%superq(contcov&z),%str( )));
                                and missing(_contcov_&k)=0
                            %end;),12.)),
                        %if ^(%sysevalf(%qupcase(%superq(method&z))=CIF,boolean) and &sysvlong < 9.04.01M1) %then %do;
                            hrmv = case ((select hazardratio from _parm where
                                            upcase(strip(parameter))=upcase(strip("_class_")) and 
                                            upcase(classval0)=upcase(strip("%superq(class_&z._&i)"))))
                                        when . then "%superq(refhrtext&z)"
                                   else (select strip(put(hazardratio, %sysevalf(12.&&hrdigits&z)))
                                   || ' (' ||
                                   strip(put(hrlowercl, %sysevalf(12.&&hrdigits&z))) || '-' ||
                                   strip(put(hruppercl, %sysevalf(12.&&hrdigits&z))) || ')' from _parmmv where
                                   upcase(strip(parameter))=upcase(strip("_class_")) and upcase(classval0)=upcase(strip("%superq(class_&z._&i)"))) end,
                            covpvalmv = case ((select hazardratio from _parm where
                                            upcase(strip(parameter))=upcase(strip("_class_")) and 
                                            upcase(strip(classval0))=upcase(strip("%superq(class_&z._&i)"))))
                                       when . then "%superq(refptext&z)"
                                    else (select strip(put(probchisq,pvalue%sysevalf(6.&&pvaldigits&z)))||'^{super +}' from _parmmv where
                                    upcase(strip(parameter))=upcase(strip("_class_")) and upcase(classval0)=upcase(strip("%superq(class_&z._&i)"))) end
                        %end;
                        %else %do;
                            hrmv='',covpvalmv=''
                        %end;
                    %end;
                    %if %sysevalf(%superq(timelist&z)^=,boolean) %then %do;
                        , timelist=strip("%superq(tl&i)")
                    %end;
                %end;
                ;            
        quit;
    
        /**Create a dataset for plotting**/
        data _plot_&z;
            /**Reverses Order if DESC=1**/
            %local i2;
            merge
                /*One set of columns for each class variable level*/
                %do i = 1 %to %superq(nclass_&z);
                    _surv (
                        rename=(
                            %if %sysevalf(%superq(class&z)=,boolean)=0 %then %do; cl1=cl&i._&z %end; /**Class Variable**/
                            t1=t&i._&z /**Time Variable**/
                            c1=c&i._&z /**Censor Variable**/
                            s1=s&i._&z /**Survival Estimate Variable**/
                            lcl1=lcl&i._&z /**Survival 95% lower bound Variable**/
                            ucl1=ucl&i._&z /**Survival 95% upper bound Variable**/
                            %if %sysevalf(%qupcase(%superq(method&z))=CIF,boolean) %then %do;
                                vcif=vcif&i._&z /**Standard Error for CIF Function**/
                            %end;)
                        %if %sysevalf(%superq(class&z)=,boolean)=0 %then %do;
                        /**Stratumnum is numbered by PROC LIFETEST in the order the class variables are displayed**/
                            %if %superq(desc&z)=1 %then %let i2=%sysfunc(abs(%sysfunc(sum(&i,-%superq(nclass_&z),-1))));
                            %else %let i2=&i;
                            %if %sysevalf(%superq(classorder&z)^=,boolean) and %sysevalf(%superq(class&z)=,boolean)=0 %then %do;
                                where=(stratumnum=%scan(%superq(classorder&z),&i2))
                            %end;
                            %else %do;
                                where=(stratumnum=&i2)
                            %end;
                        %end;)
                %end;
                ;
            %if %sysevalf(%superq(class&z)=,boolean)=0 %then %do i = 1 %to %superq(nclass_&z);
                cl&i._&z=strip("%superq(class_&z._&i)");
            %end;
            %else %do;
                cl1_&z=strip("%superq(classdesc&z)");
            %end;
            /**If requested to plot 1-S instead of S**/
            %if %superq(sreverse&z) = 1 %then %do i = 1 %to %superq(nclass_&z);
                s&i._&z = 1-s&i._&z; /**Flip Survival Estimate Variable**/
                c&i._&z = 1-c&i._&z; /**Flip Censor Marker Survival Estimate**/
                _temp_=ucl&i._&z;/**Hold UCL Value**/
                ucl&i._&z = 1-lcl&i._&z; /**Flip Survival Confidence Interval Upper Bound**/
                lcl&i._&z = 1-_temp_; /**Flip Survival Confidence Interval Lower Bound**/
            %end;
                
            label 
                %do i = 1 %to %superq(nclass_&z);
                    %if %sysevalf(%superq(class&z)=,boolean)=0 %then %do;
                        t&i._&z="Time Class Level &i: Plot &z"
                        s&i._&z="SDF Estimate Class Level &i: Plot &z"
                        lcl&i._&z="SDF 95% Lower Bound Class Level &i: Plot &z"
                        ucl&i._&z="SDF 95% Upper Bound Class Level &i: Plot &z"
                        c&i._&z="Censor Estimate Class Level &i: Plot &z"
                        cl&i._&z="Class Level &i: Plot &z"
                        %if %sysevalf(%qupcase(%superq(method&z))=CIF,boolean) %then %do;
                            vcif&i._&z="CIF Function Standard Error Class Level &i: Plot &z"
                        %end;
                    %end;
                    %else %do;
                        t&i._&z="Time: Plot &z"
                        s&i._&z="SDF Estimate: Plot &z"
                        lcl&i._&z="SDF 95% Lower Bound: Plot &z"
                        ucl&i._&z="SDF 95% Upper Bound: Plot &z"
                        c&i._&z="Censor Estimate: Plot &z"
                        cl&i._&z="Population Description &i: Plot &z"
                        %if %sysevalf(%qupcase(%superq(method&z))=CIF,boolean) %then %do;
                            vcif&i._&z="CIF Function Standard Error: Plot &z"
                        %end;
                    %end;
                %end;;
        run;
    
        /**Sets up dataset for patients at risk**/ 
        %if %sysevalf(%superq(risklist&z)=,boolean)=0 %then %do;
            %local partitle_&z;
            /**Determine if patients-at-risk header is requested**/
            %if %sysevalf(%superq(parheader&z)=%str(),boolean)=0 %then %let partitle_&z = 1;
            %else %let partitle_&z = 0;
            %local i2;
            data _riskplot;
                merge
                    /**Make one set of columns per class variable**/
                    %do i = 1 %to %superq(nclass_&z);
                        /**Reverses Order if DESC=1**/
                        %if %superq(desc&z)=1 %then %let i2=%sysfunc(abs(%sysfunc(sum(&i,-%superq(nclass_&z),-1))));
                        %else %let i2=&i;
                        _splot (rename=(
                            time=time&i._&z /**Time Variable**/ 
                            atrisk=risk&i._&z /**Number of Patients-at-Risk Variable**/
                            _ncens=cens&i._&z /**Number of Patients Censored Variable**/
                            _nevents=event&i._&z /**Number of Patients Censored Variable**/)
                            /**Grab different class values depending on class order requested**/
                            /**Stratumnum is numbered by PROC LIFETEST in the order the class variables are displayed**/
                            %if %sysevalf(%superq(classorder&z)^=,boolean) and %sysevalf(%superq(class&z)=,boolean)=0 %then %do;
                                where=(stratumnum=%scan(%superq(classorder&z),&i2)))
                            %end;
                            %else %do;
                                where=(stratumnum=&i2))
                            %end;
                    %end;                    
                    ;
                /**Sets up Variables for the header in the Patients-at-Risk table when RISKLOCATION=INSIDE**/
                %if &&partitle_&z =1 %then %do;
                    if _n_ = 1 then do;
                    partitle_&z="&&parheader&z";
                    ncenstitle_&z="&&ncensheader&z";
                    neventstitle_&z="&&neventsheader&z";
                    end;
                    label partitle_&z="PAR Subheader: Plot &z"
                        ncenstitle_&z="Censored N Subheader: Plot &z"
                        neventstitle_&z="Events N Subheader: Plot &z";
                %end;
                
                %do i = 1 %to %superq(nclass_&z);
                    length atrisk&i._&z ncens&i._&z nevent&i._&z $12.;
                    /**To be used in a BLOCKPLOT Value option**/
                    atrisk&i._&z=strip(put(risk&i._&z, 12.));
                    ncens&i._&z=strip(put(cens&i._&z, 12.));
                    nevent&i._&z=strip(put(event&i._&z, 12.));
                    drop risk&i._&z cens&i._&z event&i._&z;
                %end;
                label
                    %do i = 1 %to %superq(nclass_&z);
                        %if %sysevalf(%superq(class&z)=,boolean)=0 %then %do; 
                            time&i._&z="PAR Time Class Level &i: Plot &z"
                            atrisk&i._&z="PAR N Class Level &i: Plot &z"
                            ncens&i._&z="Censored N Class Level &i: Plot &z"
                            nevent&i._&z="Events N Class Level &i: Plot &z"
                        %end;
                        %else %do;
                            time&i._&z="PAR Time: Plot &z"
                            atrisk&i._&z="PAR N: Plot &z"
                            ncens&i._&z="Censored N: Plot &z"
                            nevent&i._&z="Events N: Plot &z"
                        %end;
                    %end;   ;                          
                drop stratumnum tatrisk;   
            run;
            
            /**Merges patients-at-risk dataset with plot datset**/
            data _plot_&z;
                merge _plot_&z _riskplot;
            run;
        %end;
        
        /**Reference lines **/
        %if %sysevalf(%superq(reflines&z)^=,boolean) %then %do;
            %if %sysevalf(%qupcase(%superq(reflines&z))=TIMEPOINTS,boolean) and 
                %sysevalf(%superq(timelist&z)^=,boolean) %then %do;    
                /**Create at table of values for the plot**/
                proc sql noprint;
                        %if %sysevalf(%qupcase(%superq(reflinemethod&z))=FULL,boolean) %then %do;
                            create table _reflines_t as
                                select distinct timelist as ref_t_&z "Reference Lines Time Coordinates &z"
                                from _timelist;
                            create table _reflines_y as
                                select distinct %superq(xmult_&z)*survival as ref_y_&z "Reference Lines Y-Coordinate Coordinates &z"
                                from _timelist;
                            data _reflines;
                                merge _reflines_t _reflines_y;
                            run;
                        %end;
                        %else %if %sysevalf(%qupcase(%superq(reflinemethod&z))=DROP,boolean) %then %do;
                            create table _reflines as
                                select timelist as ref_t_&z "Reference Lines Time Coordinates &z",
                                       %superq(xmult_&z)*SURVIVAL as ref_y_&z "Reference Line Y-Coordinate &z"
                                from _timelist;
                        %end;
                quit;
            %end;
            %else %if %sysevalf(%qupcase(%superq(reflines&z))=MEDIANS,boolean) %then %do;    
                /**Create at table of values for the plot**/
                proc sql noprint;
                    create table _reflines as
                        %if %sysevalf(%qupcase(%superq(reflinemethod&z))=FULL,boolean) %then %do;
                            select distinct estimate as ref_t_&z "Reference Lines Time Coordinates &z",
                                   %superq(xmult_&z)*0.50 as ref_y_&z "Reference Line Y-Coordinate &z"
                            from _quart;
                        %end;
                        %else %if %sysevalf(%qupcase(%superq(reflinemethod&z))=DROP,boolean) %then %do;
                            select distinct estimate as ref_t_&z "Reference Lines Time Coordinates &z",
                                   %superq(xmult_&z)*0.50 as ref_y_&z "Reference Line Y-Coordinate &z"
                            from _quart;
                        %end;
                quit;
            %end;
            %if (%sysevalf(%qupcase(%superq(reflines&z))=TIMEPOINTS,boolean) and 
                %sysevalf(%superq(timelist&z)^=,boolean)) or
                %sysevalf(%qupcase(%superq(reflines&z))=MEDIANS,boolean) %then %do; 
                /**Merges reference lines dataset with plot datset**/
                data _plot_&z;
                    merge _plot_&z _reflines;
                run;
            %end;
        %end;
    
        /**Determine which statistics are displayed in the plot**/
        /*Class Level Gridded Block*/
        %local _ndisplay_class_&z classcolumns hrcolumns;
        %let _ndisplay_class_&z=0;
        %let classcolumns=TOTAL|EVENT|MEDIAN|EV_N|N_EV|TOTALMV|EVENTMV|EV_NMV|N_EVMV;
        %let hrcolumns=HR|HRMV|COVPVAL|COVPVALMV;
        /*Model Level Gridded Block*/
        %local _ndisplay_model_&z _ndisplay_mstats_&z;
        %let _ndisplay_model_&z=0;
        %let _ndisplay_mstats_&z=0;
        
        %if %index(%qupcase(%superq(display&z)),LEGEND) > 0 %then %do;
            %let _ndisplay_class_&z=%sysevalf(&&_ndisplay_class_&z+1);
            %let _display_class&&_ndisplay_class_&z.._&z = LEGEND;
            %let _ndisplay_class_&z=%sysevalf(&&_ndisplay_class_&z+1);
            %let _display_class&&_ndisplay_class_&z.._&z = LEGEND2;
            %if %index(%qupcase(%superq(display&z)),PVAL) > 0 or %index(%qupcase(%superq(display&z)),CINDEX) > 0
                %index(%qupcase(%superq(display&z)),TABLECOMMENTS) > 0 or %superq(censormarkers&z)=1 %then %do;
                %let _ndisplay_model_&z=%sysevalf(&&_ndisplay_model_&z+1);
                %let _display_model&&_ndisplay_model_&z.._&z = LEGEND;
            %end;  
        %end;        
        %if %index(%qupcase(%superq(display&z)),PVAL) > 0 or %index(%qupcase(%superq(display&z)),TABLECOMMENTS) > 0 
            or %index(%qupcase(%superq(display&z)),CINDEX) > 0 %then %do;
            %let _ndisplay_model_&z=%sysevalf(&&_ndisplay_model_&z+1);
            %let _display_model&&_ndisplay_model_&z.._&z = STATS;
        %end;
        %if %superq(censormarkers&z)=1 %then %do;
            %let _ndisplay_model_&z=%sysevalf(&&_ndisplay_model_&z+1);
            %let _display_model&&_ndisplay_model_&z.._&z = CENSORS;
        %end;
        
        %if %sysevalf(%superq(display&z)=,boolean)=0 %then %do i = 1 %to %sysfunc(countw(%superq(display&z),%str( )));
            %local _display_current;
            %let _display_current=%qupcase(%scan(%superq(display&z),&i,%str( )));
            %if %sysevalf(%superq(class&z)^=,boolean) %then %do j = 1 %to %sysfunc(countw(&hrcolumns,|));
                %if &_display_current=%scan(&hrcolumns,&j,|) %then %do;
                    %let _ndisplay_class_&z=%sysevalf(&&_ndisplay_class_&z+1);
                    %let _display_class&&_ndisplay_class_&z.._&z = %scan(&hrcolumns,&j,|);
                %end;
            %end;
            %do j = 1 %to %sysfunc(countw(&classcolumns,|));
                %if &_display_current=%scan(&classcolumns,&j,|) %then %do;
                    %let _ndisplay_class_&z=%sysevalf(&&_ndisplay_class_&z+1);
                    %let _display_class&&_ndisplay_class_&z.._&z = %scan(&classcolumns,&j,|);
                %end;
            %end;
            %if &_display_current=TIMELIST %then %do;
                %if %sysevalf(%superq(timelist&z)^=,boolean) %then %do;
                    %let _ndisplay_class_&z=%sysevalf(&&_ndisplay_class_&z+1);
                    %let _display_class&&_ndisplay_class_&z.._&z = TIMELIST;
                    %let _ndisplay_class_&z=%sysevalf(&&_ndisplay_class_&z+%superq(listtimepoints&z));
                    %if %superq(listtimepoints&z) %then %do;
                        %let _display_class&&_ndisplay_class_&z.._&z = TIMEPOINTS;
                    %end;
                %end;                            
                %if  %qupcase(%superq(risklocation&z))= TIMELIST and %sysevalf(%superq(risklist&z)^=,boolean) %then %do;
                    %let _ndisplay_class_&z=%sysevalf(&&_ndisplay_class_&z+1);
                    %let _display_class&&_ndisplay_class_&z.._&z = RISKTABLE;
                %end;
            %end; 
            %do j = 1 %to %sysfunc(countw(PVAL|PVALMV,|));
                %if &_display_current=%scan(PVAL|PVALMV,&j,|) and %sysevalf(%superq(class&z)^=,boolean) %then %do;
                    %let _ndisplay_mstats_&z=%sysevalf(&&_ndisplay_mstats_&z+1);
                    %let _display_mstats&&_ndisplay_mstats_&z.._&z = %scan(PVAL|PVALMV,&j,|);
                %end;
            %end;
            %do j = 1 %to %sysfunc(countw(CINDEX|CINDEXMV,|));
                %if &_display_current=%scan(CINDEX|CINDEXMV,&j,|) and %sysevalf(%superq(class&z)^=,boolean) %then %do;
                    %let _ndisplay_mstats_&z=%sysevalf(&&_ndisplay_mstats_&z+1);
                    %let _display_mstats&&_ndisplay_mstats_&z.._&z = %scan(CINDEX|CINDEXMV,&j,|);
                %end;
            %end;
            %if &_display_current=TABLECOMMENTS and %sysevalf(%superq(tablecomments&z)^=,boolean) %then %do;
                %let _ndisplay_mstats_&z=%sysevalf(&&_ndisplay_mstats_&z+1);
                %let _display_mstats&&_ndisplay_mstats_&z.._&z = TABLECOMMENTS; 
                %let _ndisplay_mstats_&z=%sysevalf(&&_ndisplay_mstats_&z-1+%sysfunc(countw(%superq(tablecomments&z),`,m)));              
            %end;
        %end;
       
        proc sql noprint;
            /**saves values of each metric to macro variables**/
            /**Hazard Ratios and Confidence Bounds**/
            %if %sysevalf(%superq(class&z)^=,boolean) %then %do;
                %local hr&z;
                select hr into :hr&z separated by '|'
                    from _temptable
                    where ^missing(hr);
                %if %sysevalf(%superq(classcov&z)^=,boolean) or %sysevalf(%superq(contcov&z)^=,boolean) %then %do;
                    %local hrmv&z;
                    select hrmv into :hrmv&z separated by '|'
                        from _temptable
                        where ^missing(hrmv);
                    /**Total number of patients**/
                    %local totalmv&z;
                    select totalmv into :totalmv&z separated by '|'
                        from _temptable
                        where ^missing(totalmv);
                    /**Total number of events**/
                    %local eventmv&z;
                    select eventmv into :eventmv&z separated by '|'
                        from _temptable
                        where ^missing(eventmv);
                    /**Formatted events/total**/
                    %local ev_nmv&z;
                    select ev_nmv into :ev_nmv&z separated by '|'
                        from _temptable
                        where ^missing(ev_nmv);
                    /**Formatted total (events)**/
                    %local ev_nmv&z;
                    select strip(put(totalmv,12.))||' ('||strip(put(eventmv,12.))||')' into :n_evmv&z separated by '|'
                        from _temptable
                        where ^missing(totalmv) and ^missing(eventmv);
                    %local pvalmv&z;                
                    select scan(pvalmv,1,'^') into :pvalmv&z
                        from _temptable
                        where ^missing(pvalmv);
                    %local cindexmv&z;                
                    select cindexmv into :cindexmv&z
                        from _temptable
                        where ^missing(cindexmv);
                %end;          
            %end;
            /**Median time-to-events and confidence bounds**/
            %local median&z;
            select median into :median&z separated by '|'
                from _temptable
                where ^missing(median);
            /**Total number of patients**/
            %local total&z;
            select total into :total&z separated by '|'
                from _temptable
                where ^missing(total);
            /**Total number of events**/
            %local event&z;
            select event into :event&z separated by '|'
                from _temptable
                where ^missing(event);
            /**Formatted events/total**/
            %local ev_n&z;
            select ev_n into :ev_n&z separated by '|'
                from _temptable
                where ^missing(ev_n);
            /**Formatted total (events)**/
            %local ev_n&z;
            select strip(put(total,12.))||' ('||strip(put(event,12.))||')' into :n_ev&z separated by '|'
                from _temptable
                where ^missing(total) and ^missing(event);
            /**P-values**/
            %if %sysevalf(%superq(class&z)^=,boolean) %then %do;
                /**Model Level P-values**/
                %local pval&z;                
                select scan(pval,1,'^') into :pval&z
                    from _temptable
                    where ^missing(pval);
                /**Univariate C-index**/  
                %local cindex&z;                
                select cindex into :cindex&z
                    from _temptable
                    where ^missing(cindex);
                /**Covariate Level P-values**/                
                %local covpval&z;
                select scan(covpval,1,'^') into :covpval&z separated by '|'
                    from _temptable
                    where ^missing(covpval);
                %if %sysevalf(%superq(classcov&z)^=,boolean) or %sysevalf(%superq(contcov&z)^=,boolean) %then %do;
                    %local covpvalmv&z;
                    select scan(covpvalmv,1,'^') into :covpvalmv&z separated by '|'
                        from _temptable
                        where ^missing(covpvalmv);
                %end;
            %end;
            /**Time-point estimates**/
            %local ntl_&z;
            %if %sysevalf(%superq(timelist&z)^=,boolean) %then %do;
                select count(distinct timelist)  into :ntl_&z
                    from _timelist;
                %local timelistn&z timelistv&z;
                select timelist,strip(put(timelist, best12.3)) || " %superq(timedx&z)"
                    into :timelistn&z separated by '|',:timelistv&z separated by '|'
                    from (select distinct timelist from _timelist);
                %do k = 1 %to %superq(ntl_&z);
                    %local timelist_&k._&z;
                    select 
                        case(survival)
                            when . then 'NE'
                        else strip(put(%superq(xmult_&z) *survival,%superq(tfmt_&z)))end || ' (' ||
                        case(sdf_lcl)
                            when . then 'NE'
                        else strip(put(%superq(xmult_&z) *sdf_lcl,%superq(tfmt_&z))) end || '-' ||
                        case (sdf_ucl)
                            when . then 'NE'
                        else strip(put(%superq(xmult_&z) *sdf_ucl,%superq(tfmt_&z))) end ||
                    %if %sysfunc(upcase(%superq(ytype&z))) = PCT %then %do; '%' || %end; ')'
                    into :timelist_&k._&z separated by '|'
                    from (
                        %if %sysevalf(%superq(class&z)=,boolean) %then %do;
                            select * from _timelist
                        %end;
                        %else %do i = 1 %to %superq(nclass_&z);
                            select * from _timelist
                            %if %sysevalf(%superq(class&z)=,boolean)=0 %then %do;
                                where strip(_class_)=strip("%superq(class_&z._&i)")
                            %end;
                            %if &i < %superq(nclass_&z) %then %do; OUTER UNION CORR %end;
                        %end;)
                    where timelist=%scan(%superq(timelistn&z),&k,|);         
                %end;
            %end;
            /**Patients-at-Risk inside plot summary table**/
            %if %sysevalf(%superq(timelist&z)^=,boolean) and %sysevalf(%superq(risklist&z)^=,boolean) and
                %qupcase(%superq(risklocation&z))=TIMELIST %then %do k = 1 %to %superq(ntl_&z);
                %local risklist_&k._&z;
                select strip(atrisk) into :risklist_&k._&z separated by '|'
                    from
                    (select atrisk1_&z as atrisk from _riskplot
                    where time1_&z=%scan(%superq(timelistn&z),&k,|)                        
                    %do i = 2 %to %superq(nclass_&z);
                        OUTER UNION CORR
                        select atrisk&i._&z as atrisk
                            from _riskplot
                            where time&i._&z=%scan(%superq(timelistn&z),&k,|)
                    %end;);           
            %end;
            /**Patients-at-Risk outside summary table**/
            %if %sysevalf(%superq(risklist&z)^=,boolean) %then %do i = 1 %to %superq(nclass_&z);
                %local risklist_t_&i._&z risklist_v_&i._&z risklist_c_&i._&z risklist_e_&i._&z;
                select time&i._&z,atrisk&i._&z,ncens&i._&z,nevent&i._&z
                    into :risklist_t_&i._&z separated by '|',:risklist_v_&i._&z separated by '|',
                         :risklist_c_&i._&z separated by '|',:risklist_e_&i._&z separated by '|'
                    from _riskplot
                    where ^missing(atrisk&i._&z);
            %end;
            /**Inserts values from temporary analysis summary into output dataset**/
            %if %sysevalf(%superq(out)=,boolean)=0 %then %do;
                insert into &out
                    select * from _temptable;
            %end;
            %else %do;
                insert into _summary
                select * from _temptable;
            %end;
        quit;
                
        /**Run-time Errors are sent there to delete temporary datasets before being sent to 
        errhandl, which stops the macro**/
        %errhandl2:
        proc datasets nodetails nolist;
           delete _temptable _ltest _parm _parmmv _quart _sum _surv _t3 _t3mv _reflines _reflines_t _reflines_y
                _riskplot _splot _timelist _tempdsn&z _tempcif _tempcif2 _score _variance _stat _cindex;
        quit; 
        /**If errors occurred then throw message and end macro**/
        %if &nerror_run > 0 %then %do;
            %put ERROR: &nerror_run run-time errors listed;
            %put ERROR: Macro NEWSURV will cease;           
            %goto errhandl;
        %end;
    %end;/**Ends Analysis Loop**/
    
    /**Put all model plot datasets together for final plot dataset**/
    data _plot;
        merge
            %do z = 1 %to &nmodels;
                _plot_&z
            %end; ;
    run;
    /**Delete model plot datasets**/
    proc datasets nodetails nolist;
        delete
            %do z = 1 %to &nmodels;
                _plot_&z
            %end; ;
    quit;
    
    /***Delete tails after xmax or below ymin for plotting***/
    data _plot;
        set _plot;
        
        %do z = 1 %to &nmodels;
            %do j = 1 %to %superq(nclass_&z);
                s&j._&z._lag=lag1(s&j._&z);
                lcl&j._&z._lag=lag1(lcl&j._&z);
                ucl&j._&z._lag=lag1(ucl&j._&z);
                retain flag&j._&z;
                if flag&j._&z^=1 then do;
                    if t&j._&z > %superq(xmax&z) then do;
                        t&j._&z = %superq(xmax&z);
                        s&j._&z=s&j._&z._lag;
                        lcl&j._&z=lcl&j._&z._lag;
                        ucl&j._&z=ucl&j._&z._lag;
                        flag&j._&z=1;
                    end;
                    if s&j._&z*%superq(xmult_&z) lt %superq(ymin&z) then do;
                        s&j._&z = %superq(ymin&z)/%superq(xmult_&z);
                        flag&j._&z=1;
                    end;
                end;
                else do;
                    t&j._&z = .;
                    s&j._&z = .;
                    lcl&j._&z = .;
                    ucl&j._&z = .;
                    end;
                drop flag&j._&z s&j._&z._lag lcl&j._&z._lag ucl&j._&z._lag;
            %end;
        %end;
    run;
               
    /**Creates template for Kaplan-Meier curve**/
    /*Calculate how many rows for each model*/
    %do z = 1 %to &nmodels;
        %local _rows&z _rowweights&z;
        %let _rows&z=%sysevalf(1+%sysfunc(countw(%superq(pardisplay&z),%str( )))
            *%superq(nclass_&z)*(1+%sysevalf(%qupcase(%superq(risklabellocation1))=ABOVE,boolean)));
        %do j = 1 %to %sysfunc(countw(%superq(pardisplay&z),%str( )));
            %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&j,%str( )))=PAR,boolean) and
                %sysevalf(%superq(parheader&z)^=,boolean) %then %let _rows&z=%sysevalf(%superq(_rows&z)+1);
            %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&j,%str( )))=NCENS,boolean) and
                %sysevalf(%superq(ncensheader&z)^=,boolean) %then %let _rows&z=%sysevalf(%superq(_rows&z)+1);
            %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&j,%str( )))=NEVENTS,boolean) and
                %sysevalf(%superq(neventsheader&z)^=,boolean) %then %let _rows&z=%sysevalf(%superq(_rows&z)+1);
            %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&j,%str( )))=PAR_NEVENTS,boolean) and
                %sysevalf(%superq(neventsheader&z)^=,boolean) and
                %sysevalf(%superq(parheader&z)^=,boolean) %then %let _rows&z=%sysevalf(%superq(_rows&z)+1);
            %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&j,%str( )))=PAR_NCENS,boolean) and
                %sysevalf(%superq(ncensheader&z)^=,boolean) and
                %sysevalf(%superq(parheader&z)^=,boolean) %then %let _rows&z=%sysevalf(%superq(_rows&z)+1);
        %end;
    %end;
    /*Calculate row weights for uniform height lattice*/
    %if &uniformheight=1 and &nmodels > 1 and %sysfunc(find(%superq(risklocation),bottom,i))>0 and 
        %sysevalf(%superq(risklist)^=,boolean) %then %do;
        %local _maxrows _maxrowweights;
        %let _maxrows=%superq(_rows1);
        %let _maxrowweights=%superq(riskrowweights1);
        %do i=2 %to &nmodels;
            %let _maxrows=%sysfunc(max(&_maxrows,%superq(_rows&z)));
            %let _maxrowweights=%sysfunc(max(&_maxrowweights,%superq(riskrowweights&i)));
        %end;           
    %end;
    proc template;
        /*Template for Summary Table: HTML, EXCEL, PDF*/
        define style _newsurvtable;
            parent=styles.rtf;
            style Table /
               color=black
               cellpadding = 0
               borderspacing = 0
               cellspacing=0
               frame = void
               rules = groups
               bordercollapse = separate
               borderleftstyle = none
               borderrightstyle = none
               bordertopstyle = none
               borderbottomstyle = none;
            style Header /
               color=black
               vjust=bottom
               backgroundcolor = white
               bordercollapse = separate
               borderleftstyle = none
               borderrightstyle = none
               bordertopstyle = solid
               borderbottomstyle = solid
               borderbottomcolor=black
               bordertopcolor=black
               bordertopwidth=0.1
               borderbottomwidth=0.1
               fontfamily="&TABLEHEADERFAMILY" 
               fontsize=&TABLEHEADERSIZE
               fontweight=&tableheaderweight;
            style Data /
               color=black
               backgroundcolor = white
               bordercolor = white
               borderstyle = none
               fontfamily="&TABLEDATAFAMILY" 
               fontsize=&TABLEDATASIZE
               fontweight=&tabledataweight
               vjust=top;
            class linecontent / 
                background=white 
                fontsize=&tablefootnotesize 
                color=black 
                fontfamily="&tablefootnotefamily"
                fontweight=&tablefootnoteweight;
        End;
        /*Template for Summary Table: POWERPOINT*/
        define style _newsurvtableppt;
            parent=styles.powerpointlight;
            class Header / 
                background=white 
               fontfamily="&TABLEHEADERFAMILY" 
               fontsize=&TABLEHEADERSIZE
               fontweight=&tableheaderweight
                color=black 
                vjust=bottom 
                borderstyle=solid 
                bordercolor=black 
                borderwidth=0.1 ;
            class Data / 
                background=white 
                color=black 
               fontfamily="&TABLEDATAFAMILY" 
               fontsize=&TABLEDATASIZE
               fontweight=&tabledataweight
                vjust=top
                borderstyle=hidden;
            class linecontent / 
                background=white 
                fontsize=&tablefootnotesize 
                color=black 
                fontfamily="&tablefootnotefamily"
                fontweight=&tablefootnoteweight
                borderstyle=solid 
                bordercolor=black 
                borderwidth=0.1;
            class Table / 
                color=black 
                cellpadding=0 
                borderspacing=0 
                cellspacing=0 
                frame=void 
                rules=rows 
                borderstyle=solid 
                bordercolor=black 
                borderwidth=0.1pt;
        End;
        /*Template for Graph*/
        define statgraph _km;
            begingraph / designheight=&height designwidth=&width    
                backgroundcolor=&background        
                %if &sysvlong >= 9.04.01M3P062415 and %superq(transparent)=1 %then %do;
                    opaque=false 
                %end;
                /**Turns the border around the plot off if border=0**/
                %if %superq(border)=0 %then %do;
                    border=false 
                    %if %superq(transparent)=1 %then %do;
                        pad=0px    
                    %end;
                %end;;
                
                /**Create overall plot title**/
                %if %sysevalf(%superq(ovtitle)=,boolean)=0 %then %do i = 1 %to %sysfunc(countw(%superq(ovtitle),`,m));
                    entrytitle halign=&ovtitlealign "%scan(%superq(ovtitle),&i,`,m)" / 
                        textattrs=(color=&fontcolor weight=&ovtweight size=&ovtsize family="&ovtfamily" style=normal);
                %end;
                /**Create overall plot footnote**/
                %if %sysevalf(%superq(ovfootnote)=,boolean)=0 %then %do;
                    entryfootnote halign=&ovfootnotealign "&ovfootnote" / 
                        textattrs=(color=&fontcolor weight=&ovfnweight size=&ovfnsize family="&ovfnfamily" style=normal);
                %end;
                
                /*Creates Censor Legend*/
                %if &sysver >= 9.3 %then %do;
                    %do z = 1 %to &nmodels;
                        legendItem type=marker name="cens&z" / markerattrs=(color=&fontcolor symbol=plus) label='Censor'
                            labelattrs=(color=&fontcolor size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                    %end;
                %end;
                /**Creates outer lattice block to contain all model plots**/
                layout lattice / columns=&columns rows=&rows opaque=false
                    order=&order columndatarange=DATA rowdatarange=DATA opaque=false;
                    /**Begins to fill in each cell of outer lattice block**/
                    %do z = 1 %to &nmodels;
                        /**Creates inner lattice block.  Adds a row if RISKLOCATION=BOTTOM.  Row Weights determined by RISKROWWEIGHTS**/
                        layout lattice / columns=1 columndatarange=union opaque=false 
                            %if (%sysevalf(%superq(risklist&z)^=,boolean) and %sysevalf(%qupcase(%superq(risklocation&z))=BOTTOM,boolean)=1) or 
                                (%sysevalf(%superq(risklist)^=,boolean) and &uniformheight=1 and &nmodels > 1 and %sysfunc(find(%superq(risklocation),bottom,i))>0) %then %do; 
                                %if &uniformheight=1 and &nmodels > 1 and %sysfunc(find(%superq(risklocation),bottom,i))>0 %then %do;
                                    rows=%sysevalf(1+&_maxrows)
                                    rowweights=(%sysevalf(1-%sysevalf(&_maxrows*&_maxrowweights)) 
                                    %do i=1 %to %sysevalf(&_maxrows);
                                        &_maxrowweights
                                    %end;)
                                %end;
                                %else %do;
                                    rows=%superq(_rows&z)
                                    rowweights=(%sysevalf(1-((%superq(_rows&z)-1)*%superq(riskrowweights&z)))
                                                %do i = 2 %to %superq(_rows&z);
                                                    %superq(riskrowweights&z)
                                                %end;)
                                %end;
                                rowgutter=0 
                            %end;
                            %else %do; rows=1 %end;;
                            
                            %if %sysevalf(%superq(risklist&z)^=,boolean) and %sysevalf(%qupcase(%superq(risklocation&z))=BOTTOM,boolean) %then %do;
                                rowheaders;
                                    entry halign=right "&&ylabel&z" / rotate=90 valign=center
                                        textattrs=(color=&fontcolor size=%superq(lsize&z) weight=%superq(lweight&z) family="%superq(lfamily&z)");
                                    %do k = 1 %to %sysfunc(countw(%superq(pardisplay&z),%str( )));
                                        %if (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) and %sysevalf(%superq(parheader&z)^=,boolean)) or
                                             (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) and %sysevalf(%superq(ncensheader&z)^=,boolean)) or
                                             (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) and %sysevalf(%superq(neventsheader&z)^=,boolean)) or
                                             (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) and 
                                                (%sysevalf(%superq(parheader&z)^=,boolean) and %sysevalf(%superq(ncensheader&z)^=,boolean))) or
                                             (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) and 
                                                (%sysevalf(%superq(parheader&z)^=,boolean) and %sysevalf(%superq(neventsheader&z)^=,boolean))) %then %do; 
                                            %if %sysevalf(%qupcase(%superq(paralign&z))=LABELS,boolean) %then %do;
                                                %if &sysver lt 9.3 %then %do;
                                                    entry halign=right                                               
                                                        %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) %then %do;
                                                            "%superq(parheader&z)"
                                                        %end;
                                                        %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) %then %do;
                                                            "%superq(ncensheader&z)"
                                                        %end;
                                                        %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) %then %do;
                                                            "%superq(neventsheader&z)"
                                                        %end;
                                                        %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) %then %do;
                                                            "%superq(parheader&z) (%superq(ncensheader&z))"
                                                        %end; 
                                                        %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) %then %do;
                                                            "%superq(parheader&z) (%superq(neventsheader&z))"
                                                        %end; / textattrs=(color=&fontcolor weight=%superq(parweight&z) size=%superq(parsize&z) family="%superq(parfamily&z)") valign=center;
                                                %end;
                                                %else %do;
                                                    layout gridded;
                                                    entry ' ' / textattrs=(color=&fontcolor size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                    drawtext  textattrs=(color=&fontcolor weight=%superq(parweight&z) size=%superq(parsize&z) family="%superq(parfamily&z)")
                                                        %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) %then %do;
                                                            "%superq(parheader&z)"
                                                        %end;
                                                        %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) %then %do;
                                                            "%superq(ncensheader&z)"
                                                        %end;
                                                        %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) %then %do;
                                                            "%superq(neventsheader&z)"
                                                        %end;
                                                        %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) %then %do;
                                                            "%superq(parheader&z) (%superq(ncensheader&z))"
                                                        %end; 
                                                        %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) %then %do;
                                                            "%superq(parheader&z) (%superq(neventsheader&z))"
                                                        %end; / 
                                                        drawspace=layoutpercent y=50 x=0 anchor=left justify=left width=10000;
                                                    endlayout;
                                                %end;
                                            %end;
                                            %else %do;
                                                entry ' ' / textattrs=(size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                            %end;
                                        %end;
                                        %do i = 1 %to %superq(nclass_&z);
                                            %if %sysevalf(%qupcase(%superq(risklabellocation&z))^=LEFT,boolean) %then %do;
                                                %if %sysevalf(%qupcase(%superq(risklabellocation&z))=ABOVE,boolean) %then %do;
                                                    entry ' ' / textattrs=(size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                %end;
                                                entry ' ' / textattrs=(size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                            %end;
                                            %else %do;
                                                entry halign=right "%qtrim(%superq(class_&z._&i))%superq(risklabeldlm&z)"
                                                / textattrs=(color=&fontcolor size=%superq(ptabsize&z) family="%superq(ptabfamily&z)"
                                                    %if %superq(riskcolor&z)=1 and %sysfunc(countw(%superq(color&z))) = 1 %then %do;
                                                        color=%superq(color&z)
                                                    %end;
                                                    %else %if %superq(riskcolor&z)=1 %then %do;
                                                        color=%scan(%superq(color&z), &i)
                                                    %end;) valign=center;
                                            %end;
                                        %end;
                                    %end;
                                endrowheaders;
                            %end;
                            /**Creates footnotes at bottom of inner lattice block**/
                            %if %sysevalf(%superq(footnote&z)=,boolean)=0 %then %do;
                                /**SIDEBAR block extends entire bottom length of inner lattice block**/
                                sidebar / align=bottom;
                                    /**Layout Gridded allows multiple rows of ENTRY statements within one SIDEBAR**/
                                    layout gridded / rows=%sysfunc(countw(%superq(footnote&z),`,m)) border=false;
                                        %do i = 1 %to %sysfunc(countw(%superq(footnote&z),`,m));
                                            entry halign=%superq(footnotealign&z) "%scan(%superq(footnote&z),&i,`,m)" /
                                                textattrs=(color=&fontcolor weight=%superq(fnweight&z) size=%superq(fnsize&z) family="%superq(fnfamily&z)");
                                        %end;
                                    endlayout;
                                endsidebar;
                            %end;
                            
                            /**Creates a SIDEBAR block in the plot layout block to allow for individual model titles**/
                            sidebar /align=top;
                                %if %sysevalf(%superq(title&z)=,boolean)=0 %then %do;
                                    layout gridded / rows=%sysfunc(countw(%superq(title&z),`,m)) border=false;
                                        %do i = 1 %to %sysfunc(countw(%superq(title&z),`,m));
                                            entry halign=%superq(titlealign&z) "%scan(%superq(title&z),&i,`,m)" / 
                                                textattrs=(color=&fontcolor weight=%superq(tweight&z) size=%superq(tsize&z) family="%superq(tfamily&z)");
                                        %end;
                                    endlayout;
                                %end;
                            endsidebar;
                            /**Sets up axes for the Kaplan-Meier Curves**/
                            layout overlay /  
                                %if &showwalls=1 %then %do;
                                    walldisplay=(outline)
                                %end;
                                %else %do;
                                    walldisplay=none
                                %end;
                                /**Y-Axis**/
                                yaxisopts=(                                    
                                    %if %sysevalf(%superq(risklist&z)^=,boolean) and %sysevalf(%qupcase(%superq(risklocation&z))=BOTTOM,boolean) %then %do;
                                        display=(line ticks tickvalues) 
                                    %end;
                                    %else %do;
                                        display=(line ticks tickvalues label) 
                                    %end;
                                    label="%superq(ylabel&z)" labelattrs=(color=&fontcolor size=%superq(lsize&z) weight=%superq(lweight&z) family="%superq(lfamily&z)")
                                    type=linear tickvalueattrs=(color=&fontcolor size=%superq(ytickvalsize&z) weight=%superq(ytickvalweight&z) family="%superq(ytickvalfamily&z)")
                                    /**Offset creates space at the top or bottom of the window that the plot cannot use, proportion from 0 to 1**/
                                    %if %sysevalf(%superq(ymaxoffset&z)^=,boolean) %then %do; offsetmax=%superq(ymaxoffset&z)%end;
                                    %if %sysevalf(%superq(yminoffset&z)^=,boolean) %then %do; offsetmin=%superq(yminoffset&z) %end;   
                                    linearopts=(tickvaluesequence=(start=%superq(ymin&z) end=%superq(ymax&z) increment=%superq(yincrement&z))
                                    /**VIEWMAX and VIEWMIN are also required to show the desired range**/
                                    viewmin=%superq(ymin&z) viewmax=%superq(ymax&z)))
                                
                                /**X-Axis**/
                                xaxisopts=(display=(line ticks tickvalues label)  label="&&xlabel&z"
                                    type=linear labelattrs=(color=&fontcolor size=%superq(lsize&z) weight=%superq(lweight&z) family="%superq(lfamily&z)")
                                    tickvalueattrs=(color=&fontcolor size=%superq(xtickvalsize&z) weight=%superq(xtickvalweight&z) family="%superq(xtickvalfamily&z)")               
                                    /**Offset creates space at the top or bottom of the window that the plot cannot use, proportion from 0 to 1**/
                                    %if %sysevalf(%superq(xmaxoffset&z)^=,boolean) %then %do; offsetmax=%superq(xmaxoffset&z)%end;
                                    %if %sysevalf(%superq(xminoffset&z)^=,boolean) %then %do; offsetmin=%superq(xminoffset&z)%end;
                                    /**TICKVALUESEQUENCE automatically calculates tick marks**/
                                    linearopts=(tickvaluesequence=(start=%superq(xmin&z) end=%superq(xmax&z) increment=%superq(xincrement&z))
                                    /**VIEWMAX and VIEWMIN are also required to show the desired range**/
                                    viewmin=%superq(xmin&z) viewmax=%superq(xmax&z)));
                            
                                /**Confidence Bounds if flagged**/
                                %if %superq(plotci&z) = 1 or 
                                    (%superq(plotci&z)=2 and %sysevalf(%superq(class&z)=,boolean)) %then %do i = 1 %to %superq(nclass_&z); ;
                                    bandplot x=t&i._&z limitlower=eval(%superq(xmult_&z) *lcl&i._&z) 
                                        limitupper=eval(%superq(xmult_&z) *ucl&i._&z) / type=step
                                        display=(%if %sysevalf(%superq(plotcifill)=1,boolean) %then %do;
                                                    fill
                                                %end;
                                                %else %do;
                                                    outline 
                                                %end;)
                                        fillattrs=(transparency=%superq(plotcifilltransparency&z) 
                                                   %if %sysfunc(countw(%superq(plotcifillcolor&z))) = 1 %then %do;
                                                      color=%superq(plotcifillcolor&z)
                                                   %end;
                                                   %else %do;
                                                       color=%scan(%superq(plotcifillcolor&z), &i)
                                                   %end;)
                                        outlineattrs=(thickness=%superq(plotcilinesize&z)
                                                      %if %sysfunc(countw(%superq(plotcilinecolor&z))) = 1 %then %do;
                                                          color=%superq(plotcilinecolor&z)
                                                      %end;
                                                      %else %do;
                                                          color=%scan(%superq(plotcilinecolor&z), &i)
                                                      %end;
                                                      %if %sysfunc(countw(%superq(plotcilinepattern&z))) = 1 %then %do;
                                                          pattern=%superq(plotcilinepattern&z)
                                                      %end;
                                                      %else %do;
                                                          pattern=%scan(%superq(plotcilinepattern&z), &i)
                                                      %end;);
                                %end;
                                /**Displays Censors if flagged**/
                                %if %superq(censormarkers&z) = 1 and &sysver < 9.3 %then %do;
                                    /**creates scatterplot to use in legend, overwritten later since this is rendered first**/
                                    /**Has same points and size as the first class level**/
                                    if (max(c1_&z)>.) 
                                        scatterplot x=t1_&z y=eval(%superq(xmult_&z) * c1_&z) / name="cens&z" legendlabel='Censor'
                                            markerattrs=(color=&fontcolor symbol=plus size=%superq(symbolsize&z));
                                        %do i = 2 %to %superq(nclass_&z);
                                            else if (max(c&i._&z)>.) 
                                            scatterplot x=t&i._&z y=eval(%superq(xmult_&z) * c&i._&z) / name="cens" legendlabel='Censor'
                                            markerattrs=(color=&fontcolor symbol=plus size=%superq(symbolsize&z) weight=%superq(symbolweight&z));
                                        %end;
                                        %do i = 1 %to %superq(nclass_&z);
                                    endif;
                                    %end;
                                %end;   
                                
                                %if %superq(censormarkers&z) = 1 %then %do i = 1 %to %superq(nclass_&z);           
                                    /**Draws censor symbols*/
                                    /**xmult_&z is a factor based on YTYPE (PPT vs PCT)**/
                                    if (max(c&i._&z)>.)
                                        scatterplot x=t&i._&z y=eval(%superq(xmult_&z) * c&i._&z) / 
                                            markerattrs=(
                                            %if %sysfunc(countw(%superq(color&z))) = 1 %then %do;
                                                color=%superq(color&z)
                                            %end;
                                            %else %do;
                                                color=%scan(%superq(color&z), &i)
                                            %end;
                                            symbol=plus
                                            size=%superq(symbolsize&z) weight=%superq(symbolweight&z));
                                    endif;
                                %end;
                                
                                
                                /**The first STEPPLOT is rendered in WHITE so that is it is overwritten later**/
                                /**This is made to create a white line legend entry for the summary table later**/
                                /**Hence the name, spacer**/
                                stepplot x=t1_&z y=eval(%superq(xmult_&z) * s1_&z) / legendlabel=' '
                                    lineattrs=(thickness=0pt /*&linesize*/ color=&background) name="spacer";
                                /**Generates the Kaplan-Meier Curves**/
                                %do i = 1 %to %superq(nclass_&z); 
                                    /**One STEPPLOT per class level**/
                                    /**Legend labels are added manually with ENTRY statements later**/ 
                                    stepplot x=t&i._&z y=eval(%superq(xmult_&z) * s&i._&z) / legendlabel=' '
                                        lineattrs=(thickness=&linesize
                                    %if %sysfunc(countw(%superq(color&z))) = 1 %then %do;
                                        color=%superq(color&z)
                                        %if %qupcase(%superq(pattern&z)) = AUTO %then %do;
                                            /**When all colors are the same, AUTO makes each pattern different**/
                                            pattern=&i
                                        %end;
                                        %else %do;
                                            %if %sysfunc(countw(%superq(pattern&z))) > 1 %then %do; pattern=%scan(%superq(pattern&z),&i) %end;
                                            %else %do; pattern=%superq(pattern&z) %end;
                                        %end;
                                    %end;
                                    %else  %do;
                                        %if %upcase(%superq(pattern&z)) = AUTO %then %do;
                                            /**When all colors are the different, AUTO makes each pattern solid**/
                                            pattern=solid
                                        %end;
                                        %else %do;
                                            %if %sysfunc(countw(%superq(pattern&z))) > 1 %then %do; pattern=%scan(%superq(pattern&z),&i) %end;
                                            %else %do; pattern=%superq(pattern&z) %end;
                                        %end;                            
                                        color=%scan(%superq(color&z), &i)                                        
                                    %end;
                                    ) name="plot&i._&z" /**Plot names are saved for DISCRETELEGEND statements later**/;
                                %end;
                                /**Draw X axis Reference Lines**/
                                %if (%sysevalf(%qupcase(%superq(reflines&z))=TIMEPOINTS,boolean) and 
                                    %sysevalf(%superq(timelist&z)^=,boolean)) or 
                                    %sysevalf(%qupcase(%superq(reflines&z))=MEDIANS,boolean) %then %do;  
                                    /**Full lines**/
                                    %if %sysevalf(%qupcase(%superq(reflinemethod&z))=FULL,boolean) %then %do;
                                        %if %sysevalf(%qupcase(%superq(reflineaxis))=X,boolean) or 
                                            %sysevalf(%qupcase(%superq(reflineaxis))=BOTH,boolean) %then %do;
                                            referenceline x=ref_t_&z / 
                                                lineattrs=(thickness=%superq(reflinesize&z) color=%superq(reflinecolor&z) pattern=%superq(reflinepattern&z));
                                            %end;                       
                                        %if %sysevalf(%qupcase(%superq(reflineaxis))=Y,boolean) or 
                                            %sysevalf(%qupcase(%superq(reflineaxis))=BOTH,boolean) %then %do;
                                            referenceline y=ref_y_&z / 
                                                lineattrs=(thickness=%superq(reflinesize&z) color=%superq(reflinecolor&z) pattern=%superq(reflinepattern&z));
                                        %end;
                                    %end; 
                                    /**Drop lines**/ 
                                    %else %if %sysevalf(%qupcase(%superq(reflinemethod&z))=DROP,boolean) %then %do; 
                                        %if %sysevalf(%qupcase(%superq(reflineaxis))=X,boolean) or 
                                            %sysevalf(%qupcase(%superq(reflineaxis))=BOTH,boolean) %then %do;
                                            dropline x=ref_t_&z y=ref_y_&z / 
                                                lineattrs=(thickness=%superq(reflinesize&z) color=%superq(reflinecolor&z) pattern=%superq(reflinepattern&z))
                                                dropto=X;    
                                        %end; 
                                        %if %sysevalf(%qupcase(%superq(reflineaxis))=Y,boolean) or 
                                            %sysevalf(%qupcase(%superq(reflineaxis))=BOTH,boolean) %then %do;
                                            dropline x=ref_t_&z y=ref_y_&z / 
                                                lineattrs=(thickness=%superq(reflinesize&z) color=%superq(reflinecolor&z) pattern=%superq(reflinepattern&z))
                                                dropto=Y;    
                                        %end;
                                    %end;
                                %end;/**End Reference Lines**/
                                /**Patients-at-Risk table when RISKLOCATION=INSIDE**/
                                %if %sysevalf(%superq(risklist&z)=,boolean)=0 and %qupcase(%superq(risklocation&z))=INSIDE %then 
                                    %do k=%sysfunc(ifn(&sysver ge 9.4,1,%sysfunc(countw(%superq(pardisplay&z),%str( )))))
                                        %to %sysfunc(ifn(&sysver ge 9.4,%sysfunc(countw(%superq(pardisplay&z),%str( ))),1)) 
                                        %by %sysfunc(ifn(&sysver ge 9.4,1,-1));
                                    innermargin / align=bottom;
                                        /**Makes a header for the Patients-at-Risk table**/
                                         %if &sysver ge 9.4 and 
                                            ((%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) and %sysevalf(%superq(parheader&z)^=,boolean)) or
                                             (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) and %sysevalf(%superq(ncensheader&z)^=,boolean)) or
                                             (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) and %sysevalf(%superq(neventsheader&z)^=,boolean)) or
                                             (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) and 
                                                (%sysevalf(%superq(parheader&z)^=,boolean) and %sysevalf(%superq(ncensheader&z)^=,boolean))) or
                                             (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) and 
                                                (%sysevalf(%superq(parheader&z)^=,boolean) and %sysevalf(%superq(neventsheader&z)^=,boolean)))) %then %do;
                                            blockplot x=eval(ifn(^missing(partitle_&z),%superq(xmin&z),.)) 
                                                %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) %then %do;
                                                    block=partitle_&z 
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) %then %do;
                                                    block=ncenstitle_&z 
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) %then %do;
                                                    block=neventstitle_&z 
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) %then %do;
                                                    block=eval(strip(partitle_&z)||' ('||strip(ncenstitle_&z)||')')
                                                %end; 
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) %then %do;
                                                    block=eval(strip(partitle_&z)||' ('||strip(neventstitle_&z)||')')
                                                %end;
                                                /
                                                %if %sysevalf(%qupcase(%superq(paralign&z))=LABELS,boolean) %then %do;
                                                    display=(label) 
                                                    %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) %then %do;
                                                        label="%superq(parheader&z)"
                                                    %end;
                                                    %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) %then %do;
                                                        label="%superq(ncensheader&z)"
                                                    %end;
                                                    %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) %then %do;
                                                        label="%superq(neventsheader&z)"
                                                    %end;
                                                    %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) %then %do;
                                                        label="%superq(parheader&z) (%superq(ncensheader&z))"
                                                    %end; 
                                                    %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) %then %do;
                                                        label="%superq(parheader&z) (%superq(neventsheader&z))"
                                                    %end;
                                                    labelattrs=(color=&fontcolor size=%superq(parsize&z) weight=%superq(parweight&z) family="%superq(parfamily&z)")
                                                %end;
                                                %else %do;
                                                    display=(values)
                                                    valuehalign=%superq(paralign&z) 
                                                %end;
                                                valueattrs=(color=&fontcolor size=%superq(parsize&z) weight=%superq(parweight&z) family="%superq(parfamily&z)");
                                        %end;
                                        /**Makes one block plot per class level**/
                                        %do i = %sysevalf(%superq(nclass_&z)*(&sysver lt 9.4)+1*(&sysver ge 9.4)) %to 
                                            %sysevalf(1*(&sysver lt 9.4)+%superq(nclass_&z)*(&sysver ge 9.4)) 
                                            %by %sysevalf(1*(&sysver ge 9.4)+-1*(&sysver lt 9.4));
                                            %if %qupcase(%superq(risklabellocation&z))=ABOVE and &sysver ge 9.4 and
                                                (%sysevalf(%superq(class&z)^=,boolean) or %sysevalf(%superq(classdesc&z)^=,boolean)) %then %do;
                                                blockplot x=eval(ifn(t&i._&z>.,%superq(xmin&z),.)) block=cl&i._&z / display=(values)
                                                    valuehalign=%superq(risklabelalign&z)
                                                    valueattrs=(color=&fontcolor size=%superq(ptabsize&z) family="%superq(ptabfamily&z)" weight=%superq(risklabelweight));
                                            %end; 
                                            blockplot x=eval(ifn(time&i._&z ge %superq(xmin&z),time&i._&z,.)) 
                                                %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) %then %do;
                                                    block=atrisk&i._&z 
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) %then %do;
                                                    block=ncens&i._&z 
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) %then %do;
                                                    block=nevent&i._&z 
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) %then %do;
                                                    block=eval(strip(atrisk&i._&z)||' ('||strip(ncens&i._&z)||')')
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) %then %do;
                                                    block=eval(strip(atrisk&i._&z)||' ('||strip(ncens&i._&z)||')')
                                                %end;
                                                /repeatedvalues=TRUE
                                                %if %qupcase(%superq(risklabellocation&z))=LEFT %then %do;
                                                    display=(values label)                
                                                    label=
                                                        %if %sysevalf(%superq(class_&z._&i)^=,boolean) %then %do;
                                                            "%qtrim(%superq(class_&z._&i))"
                                                        %end;
                                                        %else %do;
                                                            " "
                                                        %end;
                                                    labelattrs=(color=&fontcolor size=%superq(ptabsize&z) weight=%superq(risklabelweight&z) family="%superq(ptabfamily&z)")
                                                %end;
                                                %else %do;
                                                    display=(values)
                                                %end;
                                                valuehalign=start
                                                valueattrs=(size=%superq(ptabsize&z) family="%superq(ptabfamily&z)"
                                                    %if %superq(riskcolor&z)=1 and %sysfunc(countw(%superq(color&z))) = 1 %then %do;
                                                        color=%superq(color&z)
                                                    %end;
                                                    %else %if %superq(riskcolor&z)=1 %then %do;
                                                        color=%scan(%superq(color&z), &i)
                                                    %end;
                                                    %else %do;
                                                        color=&fontcolor 
                                                    %end;);
                                            %if %qupcase(%superq(risklabellocation&z))=ABOVE and &sysver lt 9.4 and
                                                (%sysevalf(%superq(class&z)^=,boolean) or %sysevalf(%superq(classdesc&z)^=,boolean)) %then %do;
                                                blockplot x=eval(ifn(t&i._&z>.,%superq(xmin&z),.)) block=cl&i._&z / display=(values)
                                                valuehalign=%superq(risklabelalign&z)
                                                valueattrs=(color=&fontcolor size=%superq(ptabsize&z) family="%superq(ptabfamily&z)" weight=%superq(risklabelweight));
                                            %end;          
                                        %end;
                                        /**Makes a header for the Patients-at-Risk table**/
                                        %if &sysver lt 9.4 and 
                                            ((%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) and %sysevalf(%superq(parheader&z)^=,boolean)) or
                                             (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) and %sysevalf(%superq(ncensheader&z)^=,boolean)) or
                                             (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) and %sysevalf(%superq(neventsheader&z)^=,boolean)) or
                                             (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) and 
                                                (%sysevalf(%superq(parheader&z)^=,boolean) and %sysevalf(%superq(ncensheader&z)^=,boolean))) or
                                             (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) and 
                                                (%sysevalf(%superq(parheader&z)^=,boolean) and %sysevalf(%superq(neventsheader&z)^=,boolean))))%then %do;
                                            blockplot x=eval(ifn(^missing(partitle_&z),%superq(xmin&z),.)) 
                                                %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) %then %do;
                                                    block=partitle_&z 
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) %then %do;
                                                    block=ncenstitle_&z 
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) %then %do;
                                                    block=neventstitle_&z 
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) %then %do;
                                                    block=eval(strip(partitle_&z)||' ('||strip(ncenstitle_&z)||')')
                                                %end; 
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) %then %do;
                                                    block=eval(strip(partitle_&z)||' ('||strip(neventstitle_&z)||')')
                                                %end;
                                                /
                                                %if %sysevalf(%qupcase(%superq(paralign&z))=LABELS,boolean) %then %do;
                                                    display=(values label) 
                                                    %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) %then %do;
                                                        label="%superq(parheader&z)"
                                                    %end;
                                                    %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) %then %do;
                                                        label="%superq(ncensheader&z)"
                                                    %end;
                                                    %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) %then %do;
                                                        label="%superq(neventsheader&z)"
                                                    %end;
                                                    %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) %then %do;
                                                        label="%superq(parheader&z) (%superq(ncensheader&z))"
                                                    %end; 
                                                    %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) %then %do;
                                                        label="%superq(parheader&z) (%superq(neventsheader&z))"
                                                    %end;
                                                    labelattrs=(color=&fontcolor size=%superq(parsize&z) weight=%superq(parweight&z) family="%superq(parfamily&z)")
                                                %end;
                                                %else %do;
                                                    display=(values)
                                                    valuehalign=%superq(paralign&z) 
                                                %end;
                                                valueattrs=(color=&fontcolor size=%superq(parsize&z) weight=%superq(parweight&z) family="%superq(parfamily&z)");
                                        %end;
                                    endinnermargin;                         
                                    /**Places a reference line at the minimum Y-axis value to separate the patients-at-risk table from the plot**/               
                                    %if %superq(riskdivider&z)=1 %then %do;
                                        referenceline y=%superq(ymin&z) / lineattrs=(color=%superq(riskdivcolor) pattern=%superq(riskdivstyle&z));
                                    %end;
                                %end;/**Ends Inner 
                                
                                /**Design the Statistics Summary Table**/
                                %if %superq(_ndisplay_class_&z) gt 0 or %superq(_ndisplay_model_&z)>0 %then %do; 
                                    /**Creates the outer gridded block with up to 2 rows**/ 
                                    layout gridded / rows=%sysevalf(%sysevalf(%superq(_ndisplay_class_&z)>0,boolean) + %sysevalf(%superq(_ndisplay_model_&z)>0,boolean)) columns=1 border=false
                                        location=%superq(location&z) autoalign=(%superq(autoalign&z));
                                        /**Creates the class-level gridded block**/
                                        %if %sysevalf(%superq(_ndisplay_class_&z)>0,boolean) %then %do;
                                            layout gridded / rows=%sysevalf(%superq(nclass_&z)+1) /**One row per class level**/
                                                columns=%superq(_ndisplay_class_&z) /**Determined by number of statistics called in the DISPLAY parameter**/                        
                                                border=false valign=top halign=center;
                                                /**Creates the headers for the class-level gridded block**/
                                                %local pclass_check;
                                                %do i = 1 %to %superq(_ndisplay_class_&z);
                                                    %let pclass_check=0;
                                                    %if %superq(_display_class&i._&z)=LEGEND %then %do;
                                                        /**Legend**/
                                                        layout gridded / columns=1 rows=%sysfunc(countw(%superq(legendheader&z),`,m)) border=false
                                                            halign=center valign=bottom;
                                                            %do k=1 %to %sysfunc(countw(%superq(legendheader&z),`,m));
                                                                entry halign=center "%scan(%superq(legendheader&z),&k,`,m)" / 
                                                                    valign=bottom textattrs=(color=&fontcolor weight=bold size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                            %end;
                                                        endlayout;
                                                        /**Class Levels**/
                                                        %if %sysevalf("%superq(classdesc&z)"^="",boolean) and %sysevalf(%superq(class&z)^=,boolean) %then %do;
                                                            layout gridded / columns=1 rows=%sysfunc(countw(%superq(classdesc&z),`,m)) border=false
                                                                halign=center valign=bottom;
                                                                %do k=1 %to %sysfunc(countw(%superq(classdesc&z),`,m));
                                                                    entry halign=center "%scan(%superq(classdesc&z),&k,`,m)" / valign=bottom 
                                                                        textattrs=(color=&fontcolor weight=bold size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                                %end;
                                                            endlayout;
                                                        %end;
                                                        %else %if %sysevalf(%superq(class&z)^=,boolean) %then %do;
                                                            layout gridded / columns=1 rows=%sysfunc(countw(%superq(label&z),`,m)) border=false
                                                                halign=center valign=bottom;
                                                                %do k=1 %to %sysfunc(countw(%superq(label&z),`,m));
                                                                    entry halign=center "%scan(%superq(label&z),&k,`,m)" / valign=bottom 
                                                                        textattrs=(color=&fontcolor weight=bold size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                                %end;
                                                            endlayout;
                                                        %end;
                                                        %else %do;
                                                            entry halign=center " " / valign=bottom 
                                                                textattrs=(color=&fontcolor weight=bold size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                        %end;
                                                        %let i = %sysevalf(&i+1);
                                                        %let pclass_check=1;  
                                                    %end;/**End Legend**/
                                                    %if %superq(pclass_check)=0 %then %do j=1 %to %sysfunc(countw(&classcolumns,|));
                                                        /**Total|Events|Medians**/
                                                        %if %superq(_display_class&i._&z)=%scan(&classcolumns,&j,|) %then %do;
                                                            %local header;
                                                            %let header=%superq(%sysfunc(compress(%superq(_display_class&i._&z)header))&z);
                                                            layout gridded / columns=1 rows=%sysfunc(countw(%superq(header),`,m)) border=false
                                                                halign=center valign=bottom;
                                                                %do k=1 %to %sysfunc(countw(%superq(header),`,m));
                                                                    entry halign=center "%scan(&header,&k,`,m)" / valign=bottom
                                                                        textattrs=(color=&fontcolor weight=bold size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                                %end;
                                                            endlayout;
                                                            %let pclass_check=1;  
                                                        %end;
                                                    %end;/**Ends Total/Events/Medians**/
                                                    %if %superq(pclass_check)=0 and %sysevalf(%superq(class&z)^=,boolean) %then %do j=1 %to %sysfunc(countw(&hrcolumns,|));
                                                        /**Hazard Ratios**/
                                                        %if %superq(_display_class&i._&z)=%scan(&hrcolumns,&j,|) %then %do;
                                                            %local header;
                                                            %let header=%superq(%sysfunc(compress(%superq(_display_class&i._&z)header))&z);
                                                            layout gridded / columns=1 rows=%sysfunc(countw(%superq(header),`,m)) border=false
                                                                halign=center valign=bottom;
                                                                %do k=1 %to %sysfunc(countw(%superq(header),`,m));
                                                                entry halign=center "%scan(&header,&k,`,m)" / valign=bottom 
                                                                    textattrs=(color=&fontcolor weight=bold size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                                %end;
                                                            endlayout;
                                                            %let pclass_check=1;  
                                                        %end;
                                                    %end;/**Ends Hazard Ratios**/
                                                    %if %superq(pclass_check)=0 and %superq(_display_class&i._&z)=TIMELIST %then %do;
                                                        /**Survival Time-point Estimates**/
                                                        %if %sysevalf(%superq(listtimepoints&z)=1,boolean) %then %do;
                                                            layout gridded / columns=1 rows=%sysfunc(countw(%superq(timelistheader&z),`,m)) border=false
                                                                halign=center valign=bottom;
                                                                %do k=1 %to %sysfunc(countw(%superq(timelistheader&z),`,m));
                                                                    entry halign=center "%scan(&&timelistheader&z,&k,`,m)" / valign=bottom 
                                                                        textattrs=(color=&fontcolor weight=bold size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                                %end;
                                                             endlayout;
                                                        %end;
                                                        layout gridded / columns=1 rows=%sysfunc(countw(%superq(kmestheader&z),`,m)) border=false
                                                            halign=center valign=bottom;
                                                            %do k=1 %to %sysfunc(countw(%superq(kmestheader&z),`,m));
                                                                %if %sysevalf(%superq(kmestheader&z)=%str(KM Est %(95%% CI%)),boolean) and
                                                                    %sysevalf(%qupcase(%superq(method&z))=CIF,boolean) %then %let kmestheader&z=CIF Est (95% CI);
                                                                %else %if %sysevalf(%superq(kmestheader&z)=%str(KM Est %(95%% CI%)),boolean) and
                                                                    %sysevalf(%qupcase(%superq(sreverse&z))=1,boolean) %then %let kmestheader&z=1-KM Est (95% CI);
                                                                entry halign=center "%scan(&&kmestheader&z,&k,`,m)" / valign=bottom 
                                                                    textattrs=(color=&fontcolor weight=bold size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                            %end;
                                                        endlayout;
                                                        %let i = %sysevalf(&i+%superq(listtimepoints&z));
                                                        %let pclass_check=1; 
                                                        %if  %qupcase(%superq(risklocation&z))= TIMELIST and %sysevalf(%superq(risklist&z)^=,boolean) %then %do;
                                                            /**Patients-at-Risk Table**/    
                                                            layout gridded / columns=1 rows=%sysfunc(countw(%superq(risktableheader&z),`,m)) border=false
                                                                halign=center valign=bottom;
                                                                %do k=1 %to %sysfunc(countw(%superq(risktableheader&z),`,m));
                                                                    entry halign=center "%scan(&&risktableheader&z,&k,`,m)" / valign=bottom 
                                                                        textattrs=(color=&fontcolor weight=bold size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                                %end;
                                                            endlayout;                                
                                                            %let i = %sysevalf(&i+1);
                                                        %end;
                                                    %end;                                
                                                %end;
                                                
                                                /**Creates the values for the class-level gridded block**/
                                                %local c;
                                                %if %sysevalf(%superq(ntl_&z)=,boolean) %then %let ntl_&z = 1;
                                                %do c = 1 %to %superq(nclass_&z);   
                                                    %local pclass_check;
                                                    %do i = 1 %to %superq(_ndisplay_class_&z);
                                                        %let pclass_check=0;
                                                        %if %superq(_display_class&i._&z)=LEGEND %then %do;
                                                            /**Legend**/
                                                            /**Each DISCRETELEGEND statement only contains one class level of the plot**/
                                                            discretelegend "plot&c._&z" / opaque=false
                                                                %if &sysvlong >= 9.04.01M1 and %sysevalf(%superq(legendlinelength&z)^=,boolean) %then %do;
                                                                    itemsize=(linelength=%superq(legendlinelength&z))
                                                                %end;
                                                                across=1 down=1 border=false  valign=top halign=center displayclipped=true
                                                                valueattrs=(size=%superq(ptabsize&z) family="%superq(ptabfamily&z)"
                                                                %if %superq(statcolor&z)=1 and %sysfunc(countw(%superq(color&z))) = 1 %then %do;
                                                                    color=%superq(color&z)
                                                                %end;
                                                                %else %if %superq(statcolor&z)=1 %then %do;
                                                                    color=%scan(%superq(color&z), &c)
                                                                %end;
                                                                %else %do;
                                                                    color=&fontcolor 
                                                                %end;);
                                                            /**Class Levels**/
                                                            entry halign=%superq(classvalalign&z) "%trim(%superq(class_&z._&c))" / valign=top
                                                                textattrs=(size=%superq(ptabsize&z) family="%superq(ptabfamily&z)"
                                                                %if %superq(statcolor&z)=1 and %sysfunc(countw(%superq(color&z))) = 1 %then %do;
                                                                   color=%superq(color&z)
                                                               %end;
                                                               %else %if %superq(statcolor&z)=1 %then %do;
                                                                   color=%scan(%superq(color&z), &c)
                                                               %end;
                                                                %else %do;
                                                                    color=&fontcolor 
                                                                %end;);
                                                            %let i = %sysevalf(&i+1);
                                                            %let pclass_check=1;  
                                                        %end;
                                                        %if %superq(pclass_check)=0 %then %do j=1 %to %sysfunc(countw(&classcolumns,|));
                                                            /**Total|Events|Medians**/
                                                            %if %superq(_display_class&i._&z)=%scan(&classcolumns,&j,|) %then %do;
                                                                entry halign=center "%scan(%superq(%scan(&classcolumns,&j,|)&z),&c,|)" / valign=top
                                                                    textattrs=(size=%superq(ptabsize&z) family="%superq(ptabfamily&z)"
                                                                %if %superq(statcolor&z)=1 and %sysfunc(countw(%superq(color&z))) = 1 %then %do;
                                                                    color=%superq(color&z)
                                                                %end;
                                                                %else %if %superq(statcolor&z)=1 %then %do;
                                                                    color=%scan(%superq(color&z), &c)
                                                                %end;
                                                                %else %do;
                                                                    color=&fontcolor 
                                                                %end;);
                                                                %let pclass_check=1;  
                                                            %end;
                                                        %end;
                                                        %if %superq(pclass_check)=0 and %sysevalf(%superq(class&z)^=,boolean) %then %do j=1 %to %sysfunc(countw(&hrcolumns,|));
                                                            /**Hazard Ratios**/
                                                            %if %superq(_display_class&i._&z)=%scan(&hrcolumns,&j,|) %then %do;
                                                                entry halign=center "%scan(%superq(%scan(&hrcolumns,&j,|)&z),&c,|)" / valign=top
                                                                    textattrs=(size=%superq(ptabsize&z) family="%superq(ptabfamily&z)"
                                                                    %if %superq(statcolor&z)=1 and %sysfunc(countw(%superq(color&z))) = 1 %then %do;
                                                                        color=%superq(color&z)
                                                                    %end;
                                                                    %else %if %superq(statcolor&z)=1 %then %do;
                                                                        color=%scan(%superq(color&z), &c)
                                                                    %end;
                                                                    %else %do;
                                                                        color=&fontcolor 
                                                                    %end;);
                                                            %let pclass_check=1;  
                                                            %end;
                                                        %end;
                                                        %if %superq(pclass_check)=0 and %superq(_display_class&i._&z)=TIMELIST %then %do;
                                                            /**Survival Time-point Estimates**/                                 
                                                            %if %sysevalf(%superq(listtimepoints&z)=1,boolean) %then %do;
                                                                /*Time-point labels*/
                                                                layout gridded / columns=1 rows=%superq(ntl_&z) border=false opaque=false;
                                                                    %do k = 1 %to %superq(ntl_&z);
                                                                        entry halign=center "%scan(%superq(timelistv&z),&k,|)" / valign=top
                                                                            textattrs=(size=%superq(ptabsize&z) family="%superq(ptabfamily&z)"
                                                                            %if %superq(statcolor&z)=1 and %sysfunc(countw(%superq(color&z))) = 1 %then %do;
                                                                                color=%superq(color&z)
                                                                            %end;
                                                                            %else %if %superq(statcolor&z)=1 %then %do;
                                                                                color=%scan(%superq(color&z), &c)
                                                                            %end;);
                                                                    %end;
                                                                endlayout;
                                                            %end;
                                                            /*Survival Estimates*/
                                                            layout gridded / columns=1 rows=%superq(ntl_&z) border=false opaque=false;
                                                                %do k = 1 %to %superq(ntl_&z);
                                                                    entry halign=center "%scan(%superq(timelist_&k._&z),&c,|)" / valign=top
                                                                        textattrs=(size=%superq(ptabsize&z) family="%superq(ptabfamily&z)"
                                                                        %if %superq(statcolor&z)=1 and %sysfunc(countw(%superq(color&z))) = 1 %then %do;
                                                                            color=%superq(color&z)
                                                                        %end;
                                                                        %else %if %superq(statcolor&z)=1 %then %do;
                                                                            color=%scan(%superq(color&z), &c)
                                                                        %end;
                                                                        %else %do;
                                                                            color=&fontcolor 
                                                                        %end;);
                                                                %end;
                                                            endlayout;
                                                            %let i = %sysevalf(&i+%superq(listtimepoints&z));
                                                            %let pclass_check=1; 
                                                            %if  %qupcase(%superq(risklocation&z))= TIMELIST and %sysevalf(%superq(risklist&z)^=,boolean) %then %do;
                                                                /**Patients-at-Risk Table**/ 
                                                                layout gridded / columns=1 rows=%superq(ntl_&z) border=false opaque=false;
                                                                    %do k = 1 %to %superq(ntl_&z);
                                                                        entry halign=center "%scan(%superq(risklist_&k._&z),&c,|)" / valign=top
                                                                            textattrs=(size=%superq(ptabsize&z) family="%superq(ptabfamily&z)"
                                                                            %if %superq(statcolor&z)=1 and %sysfunc(countw(%superq(color&z))) = 1 %then %do;
                                                                                color=%superq(color&z)
                                                                            %end;
                                                                            %else %if %superq(statcolor&z)=1 %then %do;
                                                                                color=%scan(%superq(color&z), &c)
                                                                            %end;
                                                                            %else %do;
                                                                                color=&fontcolor 
                                                                            %end;);
                                                                    %end;
                                                                endlayout;                                   
                                                                %let i = %sysevalf(&i+1);
                                                            %end;
                                                        %end;/**Ends Time-point estimate Section**/                               
                                                    %end;/**Ends column filling loop for class-level gridded block***/
                                                %end;/**Ends row filling loop for class-level gridded block**/            
                                            endlayout;/**Ends class-level gridded block**/
                                        %end;/**Ends the class-level gridded block**/
                                        /**Creates model-level gridded block**/
                                        %if %superq(_ndisplay_model_&z)>0 %then %do;
                                            layout gridded / rows=1 columns=%superq(_ndisplay_model_&z) opaque=false
                                                border=false valign=top halign=right;
                                                %do i = 1 %to %superq(_ndisplay_model_&z);                            
                                                    /**Uses the plot that was colored white earlier to create the correct amount of space on the left**/
                                                    %if %superq(_display_model&i._&z)=LEGEND %then %do;
                                                        discretelegend "spacer" / opaque=false 
                                                            %if &sysvlong >= 9.04.01M1 and %sysevalf(%superq(legendlinelength&z)^=,boolean) %then %do;
                                                                itemsize=(linelength=%superq(legendlinelength&z))
                                                            %end;
                                                            across=1 down=1 border=false valign=top halign=left displayclipped=true
                                                            valueattrs=(color=&fontcolor size=1pt family="%superq(ptabfamily&z)");
                                                    %end;
                                                    %if %superq(_display_model&i._&z)=STATS and %sysevalf(%superq(_ndisplay_mstats_&z)>0,boolean) %then %do;
                                                        /**Print text for P-values and user entered Table Comments**/                           
                                                        layout gridded / columns=1 rows=%superq(_ndisplay_mstats_&z) valign=top halign=left
                                                            opaque=false border=false;
                                                            %do k = 1 %to %superq(_ndisplay_mstats_&z);
                                                                %if %superq(_display_mstats&k._&z)=PVAL %then %do;
                                                                    /**P-value**/
                                                                    %if %qupcase(%superq(plotpval&z))=LR %then %let plotpval&z=Likelihood-Ratio; 
                                                                    %if %qupcase(%superq(plotpval&z))=GRAY %then %let plotpval&z=Gray K-Sample Test; 
                                                                    entry halign=left
                                                                        %if %sysevalf(&&pvalheader&z=,boolean)=0 %then %do;
                                                                            "&&pvalheader&z %sysfunc(strip(%superq(pval&z)))"
                                                                        %end;
                                                                        %else %if %sysevalf(%superq(strata&z)^=,boolean) %then %do;
                                                                            "Stratified %sysfunc(propcase(%superq(plotpval&z))) P-value: %sysfunc(strip(%superq(pval&z)))"
                                                                        %end;
                                                                        %else %do;
                                                                            "%sysfunc(propcase(%superq(plotpval&z))) P-value: %sysfunc(strip(%superq(pval&z)))"
                                                                        %end; / valign=top textattrs=(color=&fontcolor size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                                %end;
                                                                %if %superq(_display_mstats&k._&z)=PVALMV %then %do;
                                                                    /**P-value**/
                                                                    %if %qupcase(%superq(plotpvalmv&z))=LR %then %let plotpvalmv&z=Likelihood-Ratio; 
                                                                    entry halign=left
                                                                    %if %sysevalf(&&pvalmvheader&z=,boolean)=0 %then %do;
                                                                        "&&pvalmvheader&z %sysfunc(strip(%superq(pvalmv&z)))"
                                                                    %end;
                                                                    %else %do;
                                                                        "Adjusted %sysfunc(propcase(%superq(plotpvalmv&z))) P-value: %sysfunc(strip(%superq(pvalmv&z)))"
                                                                    %end; / valign=top textattrs=(color=&fontcolor size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                                %end;
                                                                %if %superq(_display_mstats&k._&z)=CINDEX %then %do;
                                                                    /**Univariate c-index**/
                                                                    entry halign=left
                                                                    %if %sysevalf(&&cindexheader&z=,boolean)=0 %then %do;
                                                                        "&&cindexheader&z %sysfunc(strip(%superq(cindex&z)))"
                                                                    %end;
                                                                    %else %do;
                                                                        "C-index (95% CI): %sysfunc(strip(%superq(cindex&z)))"
                                                                    %end; / valign=top textattrs=(color=&fontcolor size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                                %end;
                                                                %if %superq(_display_mstats&k._&z)=CINDEXMV %then %do;
                                                                    /**Multivariate c-index**/
                                                                    entry halign=left
                                                                    %if %sysevalf(&&cindexmvheader&z=,boolean)=0 %then %do;
                                                                        "&&cindexmvheader&z %sysfunc(strip(%superq(cindexmv&z)))"
                                                                    %end;
                                                                    %else %do;
                                                                        "Multivariate C-index (95% CI): %sysfunc(strip(%superq(cindexmv&z)))"
                                                                    %end; / valign=top textattrs=(color=&fontcolor size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                                %end;
                                                                %if %superq(_display_mstats&k._&z)=TABLECOMMENTS %then %do;
                                                                    /**User-provided Table Comments**/
                                                                    %do j=1 %to %sysfunc(countw(%superq(tablecomments&z),`,m));                   
                                                                        entry halign=left "%scan(&&tablecomments&z,&j,`,m)" / valign=top border=false
                                                                            textattrs=(color=&fontcolor size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");
                                                                    %end;
                                                                    %let k=%sysevalf(&k+%sysfunc(countw(%superq(tablecomments&z),`,m))-1);
                                                                %end;
                                                            %end;
                                                        endlayout;
                                                    %end;
                                                    %if %superq(_display_model&i._&z)=CENSORS %then %do;
                                                        /**Create legend statement for censor values**/
                                                        discretelegend 
                                                            %if &sysver ge 9.3 %then %do; "cens&z" %end; 
                                                            %else %do; 'cens' %end; 
                                                            / border=false halign=right valign=top displayclipped=true opaque=false
                                                            %if &sysver ge 9.3 %then %do; autoitemsize=TRUE %end;
                                                            valueattrs=(color=&fontcolor size=%superq(ptabsize&z) family="%superq(ptabfamily&z)");   
                                                    %end;   
                                                %end;
                                            endlayout;/**Ends model-level gridded block**/
                                        %end;/**Ends model-level gridded block**/
                                    endlayout;/**Ends the outer gridded block**/ 
                                %end;
                            endlayout;/**Closes the LAYOUT OVERLAY**/
                            /**Creates the patients-at-risk block**/
                            /**Makes one block plot per class level**/
                            %if %sysevalf(%superq(risklist&z)=,boolean)=0 and %qupcase(%superq(risklocation&z))=BOTTOM %then %do k=1 %to %sysfunc(countw(%superq(pardisplay&z),%str( )));
                            /**Makes a header for the Patients-at-Risk table**/
                                %if (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) and %sysevalf(%superq(parheader&z)^=,boolean)) or
                                 (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) and %sysevalf(%superq(ncensheader&z)^=,boolean)) or
                                 (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) and %sysevalf(%superq(neventsheader&z)^=,boolean)) or
                                 (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) and 
                                    (%sysevalf(%superq(parheader&z)^=,boolean) and %sysevalf(%superq(ncensheader&z)^=,boolean))) or
                                 (%sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) and 
                                    (%sysevalf(%superq(parheader&z)^=,boolean) and %sysevalf(%superq(neventsheader&z)^=,boolean))) %then %do;
                                    layout overlay / border=false walldisplay=none
                                        xaxisopts=(display=none type=linear                 
                                            /**Offset creates space at the top or bottom of the window that the plot cannot use, proportion from 0 to 1**/
                                            %if %sysevalf(%superq(xmaxoffset&z)^=,boolean) %then %do; offsetmax=%superq(xmaxoffset&z)%end;
                                            %if %sysevalf(%superq(xminoffset&z)^=,boolean) %then %do; offsetmin=%superq(xminoffset&z)%end;
                                            /**VIEWMAX and VIEWMIN are also required to show the desired range**/
                                            linearopts=(viewmin=%superq(xmin&z) viewmax=%superq(xmax&z)));
                                        blockplot x=eval(ifn(^missing(partitle_&z),%superq(xmin&z),.)) 
                                            %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) %then %do;
                                                %if ^(&sysver < 9.3) %then %do;
                                                    block=eval(tranwrd(repeat('a',length(partitle_&z )),'a','A0'x))
                                                %end;
                                                %else %do;
                                                    block=partitle_&z  
                                                %end;
                                            %end;
                                            %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) %then %do;
                                                %if ^(&sysver < 9.3) %then %do;
                                                    block=eval(tranwrd(repeat('a',length(ncenstitle_&z  )),'a','A0'x))
                                                %end;
                                                %else %do;
                                                    block=ncenstitle_&z  
                                                %end;
                                            %end;
                                            %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) %then %do;
                                                %if ^(&sysver < 9.3) %then %do;
                                                    block=eval(tranwrd(repeat('a',length(neventstitle_&z )),'a','A0'x))
                                                %end;
                                                %else %do;
                                                    block=neventstitle_&z 
                                                %end;
                                            %end;
                                            %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) %then %do;
                                                %if ^(&sysver < 9.3) %then %do;
                                                    block=eval(tranwrd(repeat('a',length(strip(partitle_&z)||' ('||strip(ncenstitle_&z)||')')),'a','A0'x))
                                                %end;
                                                %else %do;
                                                    block=eval(strip(partitle_&z)||' ('||strip(ncenstitle_&z)||')') 
                                                %end;
                                            %end; 
                                            %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) %then %do;
                                                %if ^(&sysver < 9.3) %then %do;
                                                    block=eval(tranwrd(repeat('a',length(strip(partitle_&z)||' ('||strip(neventstitle_&z)||')')),'a','A0'x))
                                                %end;
                                                %else %do;
                                                    block=eval(strip(partitle_&z)||' ('||strip(neventstitle_&z)||')')
                                                %end;
                                            %end;
                                            /
                                            %if %sysevalf(%qupcase(%superq(paralign&z))=LABELS,boolean) %then %do;
                                                display=(values 
                                                    %if (&sysver < 9.3) %then %do;
                                                        label
                                                    %end;) 
                                                %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) %then %do;
                                                    label="%superq(parheader&z)" 
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) %then %do;
                                                    label="%superq(ncensheader&z)"
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) %then %do;
                                                    label="%superq(neventsheader&z)"
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) %then %do;
                                                    label="%superq(parheader&z) (%superq(ncensheader&z))"
                                                %end; 
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) %then %do;
                                                    label="%superq(parheader&z) (%superq(neventsheader&z))"
                                                %end;
                                                labelattrs=(color=&fontcolor size=%superq(parsize&z) weight=%superq(parweight&z) family="%superq(parfamily&z)")
                                            %end;
                                            %else %do;
                                                display=(values)
                                                valuehalign=%superq(paralign&z) 
                                            %end;
                                            valueattrs=(size=%superq(parsize&z)
                                                %if ^(&sysver < 9.3) %then %do;
                                                    color=&background
                                                %end;
                                                %else %if %sysevalf(%qupcase(%superq(paralign&z))=LABELS,boolean) %then %do;
                                                    color=&background
                                                %end;
                                                weight=%superq(parweight&z) family="%superq(parfamily&z)");
                                        
                                        %if ^(&sysver < 9.3) and %sysevalf(%qupcase(%superq(paralign&z))^=LABELS,boolean) %then %do;
                                            /*Draws Labels*/
                                            drawtext textattrs=(size=%superq(parsize&z) weight=%superq(parweight&z) family="%superq(parfamily&z)" color=&fontcolor)
                                                %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) %then %do;
                                                    "%superq(parheader&z)"
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) %then %do;
                                                    "%superq(ncensheader&z)"
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) %then %do;
                                                    "%superq(neventsheader&z)"
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) %then %do;
                                                    "%superq(parheader&z) (%superq(ncensheader&z))"
                                                %end; 
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) %then %do;
                                                    "%superq(parheader&z) (%superq(neventsheader&z))"
                                                %end;/
                                                y=50  
                                                %if %sysevalf(%qupcase(%superq(paralign&z))=LEFT,boolean) %then %do;
                                                    x=0 anchor=left justify=left
                                                %end;
                                                %else %if %sysevalf(%qupcase(%superq(paralign&z))=RIGHT,boolean) %then %do;
                                                    x=100 anchor=right justify=right
                                                %end;
                                                %else %if %sysevalf(%qupcase(%superq(paralign&z))=CENTER,boolean) %then %do;
                                                    x=50 anchor=center justify=center
                                                %end; xspace=wallpercent yspace=layoutpercent width=10000 ;
                                        %end;
                                    endlayout;
                                %end;
                                %do i = 1 %to %superq(nclass_&z);                                
                                    %if %qupcase(%superq(risklabellocation&z))=ABOVE and
                                        (%sysevalf(%superq(class&z)^=,boolean) or %sysevalf(%superq(classdesc&z)^=,boolean)) %then %do;
                                        layout overlay / border=false walldisplay=none
                                            %if ^(&sysver < 9.3) %then %do;
                                                yaxisopts=(display=none)
                                            %end;
                                            xaxisopts=(display=none  type=linear                
                                            /**Offset creates space at the top or bottom of the window that the plot cannot use, proportion from 0 to 1**/
                                            %if %sysevalf(%superq(xmaxoffset&z)^=,boolean) %then %do; offsetmax=%superq(xmaxoffset&z)%end;
                                            %if %sysevalf(%superq(xminoffset&z)^=,boolean) %then %do; offsetmin=%superq(xminoffset&z)%end;
                                            /**VIEWMAX and VIEWMIN are also required to show the desired range**/
                                            linearopts=(viewmin=%superq(xmin&z) viewmax=%superq(xmax&z)));
                                            blockplot x=eval(ifn(t&i._&z>.,%superq(xmin&z),.)) 
                                                %if ^(&sysver < 9.3) %then %do;
                                                    block=eval(tranwrd(repeat('a',length(cl&i._&z)),'a','A0'x))
                                                %end;
                                                %else %do;
                                                    block=cl&i._&z
                                                %end; / display=(values)
                                                valuehalign=%superq(risklabelalign&z)
                                                valueattrs=(color=&fontcolor size=%superq(ptabsize&z) family="%superq(ptabfamily&z)" weight=%superq(risklabelweight&z));
                                            %if ^(&sysver < 9.3) %then %do;
                                                scatterplot x=eval(t&i._&z*0) y=eval(t&i._&z*0) / markerattrs=(size=0pt);
                                                /*Draws Labels*/
                                                drawtext textattrs=(size=%superq(ptabsize&z) family="%superq(ptabfamily&z)" 
                                                    %if %superq(riskcolor&z)=1 and %sysfunc(countw(%superq(color&z))) = 1 %then %do;
                                                        color=%superq(color&z)
                                                    %end;
                                                    %else %if %superq(riskcolor&z)=1 %then %do;
                                                        color=%scan(%superq(color&z), &i)
                                                    %end;
                                                    %else %do;
                                                         color=&fontcolor
                                                    %end;) "%qtrim(%superq(class_&z._&i))" /
                                                    y=50  
                                                    %if %sysevalf(%qupcase(%superq(risklabelalign&z))=LEFT,boolean) %then %do;
                                                        x=0 anchor=left justify=left
                                                    %end;
                                                    %else %if %sysevalf(%qupcase(%superq(risklabelalign&z))=RIGHT,boolean) %then %do;
                                                        x=100 anchor=right justify=right
                                                    %end;
                                                    %else %if %sysevalf(%qupcase(%superq(risklabelalign&z))=CENTER,boolean) %then %do;
                                                        x=50 anchor=center justify=center
                                                    %end; xspace=datapercent yspace=layoutpercent width=10000 ;
                                            %end;
                                        endlayout;
                                    %end;
                                    layout overlay / border=false walldisplay=none 
                                        %if ^(&sysver < 9.3) %then %do;
                                            yaxisopts=(display=(label))
                                        %end;  
                                        xaxisopts=(display=none  type=linear  
                                            /**Offset creates space at the top or bottom of the window that the plot cannot use, proportion from 0 to 1**/
                                            %if %sysevalf(%superq(xmaxoffset&z)^=,boolean) %then %do; offsetmax=%superq(xmaxoffset&z)%end;
                                            %if %sysevalf(%superq(xminoffset&z)^=,boolean) %then %do; offsetmin=%superq(xminoffset&z)%end;
                                            /**VIEWMAX and VIEWMIN are also required to show the desired range**/
                                            linearopts=(tickvaluesequence=(start=%superq(xmin&z) end=%superq(xmax&z) increment=%superq(xincrement&z)) viewmin=%superq(xmin&z) viewmax=%superq(xmax&z)));
                                        
                                            blockplot x=eval(ifn(time&i._&z ge %superq(xmin&z),time&i._&z,.)) 
                                                %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) %then %do;
                                                    %if ^(&sysver < 9.3) %then %do;
                                                        block=eval(tranwrd(repeat('a',length(atrisk&i._&z)),'a','A0'x))
                                                    %end;
                                                    %else %do;
                                                        block=atrisk&i._&z 
                                                    %end;
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) %then %do;
                                                    %if ^(&sysver < 9.3) %then %do;
                                                        block=eval(tranwrd(repeat('a',length(ncens&i._&z)),'a','A0'x))
                                                    %end;
                                                    %else %do;
                                                        block=ncens&i._&z 
                                                    %end;
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) %then %do;
                                                    %if ^(&sysver < 9.3) %then %do;
                                                        block=eval(tranwrd(repeat('a',length(nevent&i._&z)),'a','A0'x))
                                                    %end;
                                                    %else %do;
                                                        block=nevent&i._&z 
                                                    %end;
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) %then %do;
                                                    %if ^(&sysver < 9.3) %then %do;
                                                        block=eval(tranwrd(repeat('a',length(strip(atrisk&i._&z)||' ('||strip(ncens&i._&z)||')')),'a','A0'x))
                                                    %end;
                                                    %else %do;
                                                        block=eval(strip(atrisk&i._&z)||' ('||strip(ncens&i._&z)||')')
                                                    %end;
                                                %end;
                                                %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) %then %do;
                                                    %if ^(&sysver < 9.3) %then %do;
                                                        block=eval(tranwrd(repeat('a',length(strip(atrisk&i._&z)||' ('||strip(ncens&i._&z)||')')),'a','A0'x))
                                                    %end;
                                                    %else %do;
                                                        block=eval(strip(atrisk&i._&z)||' ('||strip(ncens&i._&z)||')')
                                                    %end;
                                                %end;
                                                /repeatedvalues=TRUE
                                                %if %qupcase(%superq(risklabellocation&z))=LEFT and (&sysver < 9.3)%then %do;
                                                    display=(values label)                
                                                    label=%if %sysevalf(%superq(class_&z._&i)^=,boolean) %then %do;
                                                                eval("%qtrim(%superq(class_&z._&i))%superq(risklabeldlm&z)")
                                                            %end;
                                                            %else %do;
                                                                " "
                                                            %end;
                                                    labelattrs=(color=&fontcolor size=%superq(ptabsize&z) weight=%superq(risklabelweight&z) family="%superq(ptabfamily&z)")
                                                %end;
                                                %else %do;
                                                    display=(values)
                                                %end;
                                                valuehalign=start
                                                valueattrs=(size=%superq(ptabsize&z) family="%superq(ptabfamily&z)"
                                                    %if ^(&sysver < 9.3) %then %do;
                                                        color=&background
                                                    %end;
                                                    %else %if %superq(riskcolor&z)=1 and %sysfunc(countw(%superq(color&z))) = 1 %then %do;
                                                        color=%superq(color&z)
                                                    %end;
                                                    %else %if %superq(riskcolor&z)=1 %then %do;
                                                        color=%scan(%superq(color&z), &i)
                                                    %end;
                                                    %else %do;
                                                        color=&fontcolor
                                                    %end;);
                                        %if ^(&sysver < 9.3) %then %do;
                                            /*Draws patients at risk*/
                                            %if %sysevalf(%superq(risklist_v_&i._&z)^=,boolean) %then %do j = 1 %to %sysfunc(countw(%superq(risklist_v_&i._&z),|,m));
                                                drawtext textattrs=(size=%superq(ptabsize&z) family="%superq(ptabfamily&z)" 
                                                    %if %superq(riskcolor&z)=1 and %sysfunc(countw(%superq(color&z))) = 1 %then %do;
                                                        color=%superq(color&z)
                                                    %end;
                                                    %else %if %superq(riskcolor&z)=1 %then %do;
                                                        color=%scan(%superq(color&z), &i)
                                                    %end;
                                                    %else %do;
                                                         color=&fontcolor
                                                    %end;) 
                                                    %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR,boolean) %then %do;
                                                        "%scan(%superq(risklist_v_&i._&z),&j,|,m)"
                                                    %end;
                                                    %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NCENS,boolean) %then %do;
                                                        "%scan(%superq(risklist_c_&i._&z),&j,|,m)"
                                                    %end;
                                                    %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=NEVENTS,boolean) %then %do;
                                                        "%scan(%superq(risklist_e_&i._&z),&j,|,m)"
                                                    %end;
                                                    %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NCENS,boolean) %then %do;
                                                        "%scan(%superq(risklist_v_&i._&z),&j,|,m) (%scan(%superq(risklist_c_&i._&z),&j,|,m))"
                                                    %end;
                                                    %else %if %sysevalf(%qupcase(%scan(%superq(pardisplay&z),&k,%str( )))=PAR_NEVENTS,boolean) %then %do;
                                                        "%scan(%superq(risklist_v_&i._&z),&j,|,m) (%scan(%superq(risklist_e_&i._&z),&j,|,m))"
                                                    %end;
                                                    /
                                                    x=%scan(%superq(risklist_t_&i._&z),&j,|,m) y=50  xspace=datavalue yspace=layoutpercent width=10000 justify=center anchor=center;
                                            %end;
                                        %end;
                                    endlayout;
                                %end;
                            %end;     
                        endlayout;/**Ends inner lattice block**/     
                    %end;/**Ends Model-by-model loop**/
                endlayout;/**Ends outer lattice block**/  
            endgraph;
        end;
    run;   
        
    /**Turn Results and ODS back on**/
    ods select all;
    ods results;                  
    /**Creates document to save**/
    %if %sysevalf(%superq(outdoc)=,boolean)=0 %then %do;
        ods escapechar='^';
        /**Sets up DPI and ODS generated file**/
        ods &destination 
            %if %qupcase(&destination)=RTF %then %do; 
                file="&outdoc"
                image_dpi=&dpi startpage=NO 
            %end;
            %else %if %qupcase(&destination)=HTML %then %do; 
                image_dpi=&dpi 
                %if %upcase(&sysscpl)=LINUX or %upcase(&sysscpl)=UNIX %then %do;
                    path="%substr(&outdoc,1,%sysfunc(find(&outdoc,/,-%sysfunc(length(&outdoc)))))"
                    file="%scan(&outdoc,1,/,b)"
                %end;
                %else %do;
                    path="%substr(&outdoc,1,%sysfunc(find(&outdoc,\,-%sysfunc(length(&outdoc)))))"
                    file="%scan(&outdoc,1,\,b)"
                %end;
                %if %sysevalf(%superq(gpath)=,boolean)=0 %then %do;
                    gpath="&gpath" (url=none)
                %end;
            %end;
            %else %if %qupcase(&destination)=PDF %then %do; 
                dpi=&dpi startpage=NO bookmarkgen=off notoc
                file="&outdoc"
            %end;
            %else %if %qupcase(&destination)=EXCEL %then %do; 
                file="&outdoc"
                dpi=&dpi options(sheet_interval='none') 
            %end;
            %else %if %qupcase(&destination)=POWERPOINT %then %do; 
                file="&outdoc"
                dpi=&dpi 
            %end;;
    %end;
    %else %if &_listing=0 %then %do;
        ods listing close image_dpi=&dpi;
    %end;
    %else %if &_listing=1 %then %do;
        ods listing image_dpi=&dpi;
    %end;
    proc sql noprint;
        %local _ppt _other _destinations _styles k pfoot_list;
        select max(ifn(upcase(destination) ^in('LISTING' 'OUTPUT' 'POWERPOINT' 'RTF'),1,0)),
            max(ifn(upcase(destination) in('POWERPOINT'),1,0)),
            max(ifn(upcase(destination) in('RTF'),1,0))
            into :_other separated by '',:_ppt separated by '',:_rtf separated by '' from sashelp.vdest;
        select upcase(destination),upcase(style) into :_destinations separated by '|',:_styles separated by '|'
            from sashelp.vdest
            where upcase(destination)^in('OUTPUT');
    quit;
    /**Create plot if flagged**/
    %if &plot = 1 %then %do;
        /**Save image to specified location**/
        %if %sysevalf(%superq(gpath)=,boolean)=0 %then %do;
            %if &_listing=1 %then %do;
                ods listing gpath="&gpath";
            %end;
            %else %do;
                ods listing close gpath="&gpath";
            %end;
        %end;
        /**Names and formats the image**/
        %if %sysevalf(%superq(plottype)^=,boolean) %then %do; 
            %if %qupcase(&plottype)=EMF or (&svg=1 and %qupcase(&destination)=RTF and %qupcase(&plottype)^=TIFF and %qupcase(&plottype)^=TIF)  
                or (&svg=1 and %qupcase(&destination)=EXCEL)
                or (&svg=1 and %qupcase(&destination)=POWERPOINT) %then %do;
                %local _any_trans;
                %let _any_trans=0;
                %do i =1 %to &nmodels;
                    %if (%sysevalf(%superq(class&i)=,boolean) and %sysevalf(%superq(plotci&i)^=0,boolean) and %sysevalf(%superq(plotcifill&i)=1,boolean)) or 
                        (%sysevalf(%superq(plotci&i)=1,boolean) and %sysevalf(%superq(plotcifill&i)=1,boolean)) %then %let _any_trans=1;
                %end;
                options printerpath='emf';
                ods graphics / imagefmt=&plottype;  
                %if &sysver=9.4 and &transparent=0 and &_any_trans=0 %then %do;
                    /**Modifies temporary registry keys to create better EMF image in 9.4**/
                    /**Taken from SAS Technical Support Martin Mincey**/
                    %local workdir;
                    %let workdir=%trim(%sysfunc(pathname(work))); 
                    /**Creates the new keys**/
                    data _null_;
                    %if %qupcase(&sysscp)=WIN %then %do; 
                        file "&workdir.\_newsurv_emf94.sasxreg";
                    %end;
                    %else %do;
                        file "&workdir./_newsurv_emf94.sasxreg";
                    %end;
                    put '[CORE\PRINTING\PRINTERS\EMF\ADVANCED]';
                    put '"Description"="Enhanced Metafile Format"';
                    put '"Metafile Type"="EMF"';
                    put '"Vector Alpha"=int:0';
                    put '"Image 32"=int:1';
                    run;    
                    %if %qupcase(&sysscp)=WIN %then %do; 
                        proc registry export="&workdir.\_newsurv_preexisting.sasxreg";/* Exports current SASUSER Keys */
                        proc registry import="&workdir.\_newsurv_emf94.sasxreg"; /* Import the new keys */
                        run;
                    %end;
                    %else %do;
                        proc registry export="&workdir./_newsurv_preexisting.sasxreg";/* Exports current SASUSER Keys */
                        proc registry import="&workdir./_newsurv_emf94.sasxreg"; /* Import the new keys */
                        run;
                    %end;
                %end;
                %else %do;
                    ods graphics / imagefmt=&plottype;  
                %end;
            %end;
            %else %if %qupcase(&plottype)=TIFF or %qupcase(&plottype)=TIF %then %do;
                ods graphics / imagefmt=png;    
            %end;
            %else %do;
                ods graphics / imagefmt=&plottype;  
            %end;          
        %end;
        %if %sysevalf(%superq(plotname)^=,boolean) %then %do; 
            ods graphics / reset=index imagename="&plotname";
        %end;  
        /**Turns on Scalable-Vector-Graphics**/
        %if &svg = 1 %then %do;
            %if %qupcase(&destination) = RTF or %qupcase(&destination) = EXCEL or %qupcase(&destination) = POWERPOINT %then %do;
                ods graphics / OUTPUTFMT=EMF;
            %end;
            %else %if %qupcase(&destination) = HTML %then %do;
                ods graphics / OUTPUTFMT=SVG;
            %end;
            %else %do;
                ods graphics / OUTPUTFMT=STATIC;
            %end;
        %end;
        %if %sysevalf(%qupcase(%superq(axiscolor))^=BLACK,boolean) %then %do;
            
            proc template;
                %do i = 1 %to %sysfunc(countw(%superq(_destinations),|));
                    define style styles.newsurv_axes&i;
                        parent=styles.%scan(%superq(_styles),&i,|);
                        class GraphAxisLines /
                            ContrastColor=&axiscolor
                            color=&axiscolor;
                        class GraphBorderLines /
                            contrastcolor=&axiscolor
                            color=&axiscolor;
                        class GraphWalls /
                            contrastcolor=&axiscolor
                            color=&axiscolor;
                        End;
                %end;
            run;
            
            %do i = 1 %to %sysfunc(countw(%superq(_destinations),|));
                ods %scan(%superq(_destinations),&i,|) style=newsurv_axes&i;
            %end;
        %end;
        /**Sets plot options**/
        ods graphics /  antialias antialiasmax=&antialiasmax scale=off width=&width height=&height;
        /**Generates the Plot**/
        options notes;
        proc sgrender data=_plot template=_km;
        run;
        options nonotes;
        /**Changes Potential Registry Changes back**/
        %if %qupcase(&plottype)=EMF or (&svg=1 and %qupcase(&destination)=RTF and %qupcase(&plottype)^=TIFF and %qupcase(&plottype)^=TIF)
            or (&svg=1 and %qupcase(&destination)=EXCEL)
            or (&svg=1 and %qupcase(&destination)=POWERPOINT) %then %do;
            %if &sysver=9.4 and &transparent=0 and &_any_trans=0 %then %do;
                proc registry clearsasuser; /* Deletes the SASUSER directory */
                proc registry import="&workdir./_newsurv_preexisting.sasxreg";/* Imports starting SASUSER Keys */
                run;
            %end;
        %end;
        /**Creates the TIFF file from the PNG file created earlier**/
        %else %if %qupcase(&plottype)=TIFF or %qupcase(&plottype)=TIF %then %do;
            %local _fncheck _fncheck2;
            options nonotes;
            %if %sysevalf(%superq(gpath)=,boolean) %then %do;
                filename nsurvpng "./&plotname..png"; 
                filename nsurvtif "./&plotname..tiff";
                data _null_;
                    x=fexist('nsurvpng');
                    x2=fdelete('nsurvtif');
                    call symput('_fncheck',strip(put(x,12.)));
                    call symput('_fncheck2',strip(put(x2,12.)));
                run;
                %if %sysevalf(%superq(_fncheck)^=1,boolean) %then %do;
                    filename nsurvpng "./&plotname.1.png"; 
                %end;
            %end;
            %else %do;
                filename nsurvpng "%sysfunc(tranwrd(&gpath./&plotname..png,//,/))"; 
                filename nsurvtif "%sysfunc(tranwrd(&gpath./&plotname..tiff,//,/))"; 
                data _null_;
                    x=fexist('nsurvpng');
                    x2=fdelete('nsurvtif');
                    call symput('_fncheck',strip(put(x,12.)));
                    call symput('_fncheck2',strip(put(x2,12.)));
                run;
                %if %sysevalf(%superq(_fncheck)^=1,boolean) %then %do;
                    filename nsurvpng "%sysfunc(tranwrd(&gpath./&plotname.1.png,//,/))"; 
                %end;
            %end;
            options notes;
            goptions device=&tiffdevice gsfname=nsurvtif 
                xmax=&width ymax=&height 
                xpixels=%sysevalf(%sysfunc(compress(&width,abcdefghijklmnopqrstuvwxyz,i))*&dpi) 
                ypixels=%sysevalf(%sysfunc(compress(&height,abcdefghijklmnopqrstuvwxyz,i))*&dpi)
                imagestyle=fit iback=nsurvpng;
            proc gslide;
            run;
            quit; 
            data _null_;
                x=fdelete('nsurvpng');
            run;
            filename nsurvpng clear;
            filename nsurvtif clear;
        %end;
        options nonotes; 
        
        
    %end;
    
    /**Print out summary table**/
    %if &summary=1 %then %do;
        %local _multmethodcheck _multmethodlist;
        %do i = 1 %to %sysfunc(countw(%superq(_destinations),|));
            %if %sysevalf(%qupcase(%qscan(%superq(_destinations),&i,|))=EXCEL,boolean) %then %do;
                ods excel options(sheet_name='NEWSURV' frozen_headers="2") style=_newsurvtable;
            %end;
            %else %do;
                ods %scan(%superq(_destinations),&i,|) style=_newsurvtable;
            %end;
        %end;
        /**Check p-values for footnote purposes**/
        proc sql noprint;
            %if &tablemergepval=1 %then %do;
                update %if %sysevalf(%superq(out)=,boolean)=0 %then %do; &out %end;
                       %else %do; _summary %end;
                    set pval=strip(covpval)
                    where ^missing(covpval) and missing(pval);
                update %if %sysevalf(%superq(out)=,boolean)=0 %then %do; &out %end;
                %else %do; _summary %end;
                    set pvalmv=strip(covpvalmv)
                    where ^missing(covpvalmv) and missing(pvalmv);
            %end;
            select count(distinct modeltype) into :_multmethodcheck
                from 
                    %if %sysevalf(%superq(out)=,boolean)=0 %then %do; &out %end;
                    %else %do; _summary %end;;
            select distinct modeltype into :_multmethodlist separated by '|'
                from 
                    %if %sysevalf(%superq(out)=,boolean)=0 %then %do; &out %end;
                    %else %do; _summary %end;;
            /**Print Summary with PROC REPORT**/
            /**Determine columns to be showin in report**/                    
            /*Model Classifications*/
            %local _tndisplay_model modelcolumns;
            %let _tndisplay_model=0;
            %let modelcolumns=TITLE|FOOTNOTE;            
            /*Statistics*/
            %local _tndisplay_stat statcolumns _display_current _med_check _hr_check _tl_check _pval_check _pvalmv_check _covpval_check _covpvalmv_check;
            %let _pval_check=0;
            %let _pvalmv_check=0;
            %let _covpval_check=0;
            %let _covpvalmv_check=0;
            %let _tndisplay_stat=0;        
            %let statcolumns=TOTAL|EVENT|MEDIAN|TIMELIST|EV_N|N_EV|TOTALMV|EVENTMV|EV_NMV|N_EVMV|HR|HRMV|PVAL|PVALMV|COVPVAL|COVPVALMV|CINDEX|CINDEXMV;          
            /*Statistics*/
            /**Take only first entry if repeated entries are listed**/
            %let _tabledisplay=%qupcase(%scan(&tabledisplay,1,%str( )));
            %do i = 2 %to %sysfunc(countw(&tabledisplay,%str( )));
                %let _display_current=%qupcase(%scan(%superq(tabledisplay),&i,%str( )));
                %let _test=0;
                %do j = 1 %to %sysevalf(&i-1);
                    %if &_display_current=%qupcase(%scan(%superq(_tabledisplay),&j,|)) %then %let _test=1;
                %end;
                %if ^&_test %then %let _tabledisplay=&_tabledisplay|&_display_current;
            %end;           
            %do i = 1 %to %sysfunc(countw(&_tabledisplay,|));            
                %let _display_current=%qupcase(%scan(%superq(_tabledisplay),&i,|));
                %let _test=0;
                select ifn(count(*)>0,1,0) into :_test 
                    from %if %sysevalf(%superq(out)=,boolean)=0 %then %do; &out %end;
                         %else %do; _summary %end;
                    where ^missing(&_display_current);
                %if &_test=1 %then %do j = 1 %to %sysfunc(countw(&modelcolumns,|));
                    %if &_display_current=%scan(&modelcolumns,&j,|) %then %do;
                        %let _tndisplay_model=%sysevalf(&_tndisplay_model+1);
                        %let _tndisplay_model_&_tndisplay_model=&_display_current;
                    %end;
                %end;
                %if &_test=1 %then %do j = 1 %to %sysfunc(countw(&statcolumns,|));
                    %if &_display_current=%scan(&statcolumns,&j,|) %then %do;
                        %let _tndisplay_stat=%sysevalf(&_tndisplay_stat+1);
                        %let _tndisplay_stat_&_tndisplay_stat=&_display_current;
                        %if %sysevalf(%qupcase(&_display_current)=MEDIAN,boolean) %then %let _med_check=1;
                        %else %if %sysevalf(%qupcase(&_display_current)=TIMELIST,boolean) %then %let _tl_check=1;
                        %else %if %sysevalf(%qupcase(&_display_current)=PVAL,boolean) %then %let _pval_check=1;
                        %else %if %sysevalf(%qupcase(&_display_current)=COVPVAL,boolean) %then %let _covpval_check=1;
                        %else %if %sysevalf(%qupcase(&_display_current)=PVALMV,boolean) %then %let _pvalmv_check=1;
                        %else %if %sysevalf(%qupcase(&_display_current)=COVPVALMV,boolean) %then %let _covpvalmv_check=1;
                        %else %if %sysfunc(find(&_display_current,HR,i))>0 %then %let _hr_check=1;
                    %end;
                %end;
            %end;
        quit;
        data _report;
            set %if %sysevalf(%superq(out)=,boolean)=0 %then %do; &out %end;
                %else %do; _summary %end; end=last;
             
             array hlist (4) $20. _temporary_;
             array dlist (&_tndisplay_stat) $50. (%do i = 1 %to &_tndisplay_stat; %if &i>1 %then %do; , %end; "%qupcase(&&_tndisplay_stat_&i)" %end;);
             retain dlist;
             if _n_=1 then do;
                do i = 1 to dim(dlist);
                    if dlist(i) in("TIMELIST","MEDIAN") and &_multmethodcheck=1 then do j = 1 to dim(hlist);
                        if missing(hlist(j)) or hlist(j) = ifc(&_multmethodlist=0,'KM',ifc(&_multmethodlist=1,'1-KM',ifc(&_multmethodlist=2,'CIF',''))) then do;
                            hlist(j)=ifc(&_multmethodlist=0,'KM',ifc(&_multmethodlist=1,'1-KM',ifc(&_multmethodlist=2,'CIF','')));
                            j=dim(hlist);
                        end;
                    end;
                    else if dlist(i) in("HR","HRMV") then do j = 1 to dim(hlist);
                        if missing(hlist(j)) or hlist(j) = 'Cox' then do;
                            hlist(j)='Cox';
                            j=dim(hlist);
                        end;
                    end;
                end;
            end;
            array plist (6) $20. _temporary_;
            do i = 1 to dim(dlist);
                if dlist(i) in('PVAL' 'PVALMV' 'COVPVAL' 'COVPVALMV') then do;
                    if ^missing(compress(vvaluex(dlist(i)),'- ')) then do j = 1 to dim(plist);
                           if missing(plist(j)) or compress(scan(vvaluex(dlist(i)),2,'^'),' {super}') = plist(j) then do;
                               if missing(plist(j)) then plist(j)=compress(scan(vvaluex(dlist(i)),2,'^'),' {super}');
                               if dlist(i)='PVAL' then pval=strip(scan(vvaluex(dlist(i)),1,'^'))||'^{super '||strip(put(j+(dim(hlist)-cmiss(of hlist(*))),12.0))||'}';
                               else if dlist(i)='PVALMV' then pvalmv=strip(scan(vvaluex(dlist(i)),1,'^'))||'^{super '||strip(put(j+(dim(hlist)-cmiss(of hlist(*))),12.0))||'}';
                               else if dlist(i)='COVPVAL' then covpval=strip(scan(vvaluex(dlist(i)),1,'^'))||'^{super '||strip(put(j+(dim(hlist)-cmiss(of hlist(*))),12.0))||'}';
                               else if dlist(i)='COVPVALMV' then covpvalmv=strip(scan(vvaluex(dlist(i)),1,'^'))||'^{super '||strip(put(j+(dim(hlist)-cmiss(of hlist(*))),12.0))||'}';
                               j=dim(plist);
                           end;
                   end;
                end;
            end;
            if last then do;
                nfoot=0;
                if cmiss(of hlist(*))<dim(hlist) then do i=1 to dim(hlist)-cmiss(of hlist(*));
                    nfoot+1;
                    if hlist(i)='KM' then call symputx('foot'||strip(put(nfoot,12.0)),"Kaplan-Meier method;",'l');
                    else if hlist(i)='1-KM' then call symputx('foot'||strip(put(nfoot,12.0)),"1-Kaplan-Meier method;",'l');
                    else if hlist(i)='CIF' then call symputx('foot'||strip(put(nfoot,12.0)),"Cumulative incidence method;",'l');
                    else if hlist(i)='Cox' then call symputx('foot'||strip(put(nfoot,12.0)),"Cox model;",'l');
                end;
                if cmiss(of plist(*))<dim(plist) then do i=1 to dim(plist)-cmiss(of plist(*));
                    nfoot+1;
                    if plist(i)='#' then call symputx('foot'||strip(put(nfoot,12.0)),"Likelihood-ratio test;",'l');
                    else if plist(i)='$' then call symputx('foot'||strip(put(nfoot,12.0)),"Score test;",'l');
                    else if plist(i)='*' then call symputx('foot'||strip(put(nfoot,12.0)),"Logrank test;",'l');
                    else if plist(i)='@' then call symputx('foot'||strip(put(nfoot,12.0)),"Wilcoxon test;",'l');
                    else if plist(i)='+' then call symputx('foot'||strip(put(nfoot,12.0)),"Wald Chi-Square test;",'l');
                    else if plist(i)='G' then call symputx('foot'||strip(put(nfoot,12.0)),"Gray's k-sample test for equality of cumulative incidence functions;",'l');
                end;
                call symputx('nfoot',strip(put(nfoot,12.0)),'l');
            end;
            keep modelnum 
               %do i = 1 %to &_tndisplay_model;
                   %superq(_tndisplay_model_&i)
               %end;
               modeltype subind subtitle 
               %do i = 1 %to &_tndisplay_stat;
                   %superq(_tndisplay_stat_&i)
               %end;;
        run;
        
        proc sql noprint;
            %local _ppt _other _destinations _styles k;
            select max(ifn(upcase(destination) ^in('LISTING' 'OUTPUT' 'POWERPOINT'),1,0)),
                max(ifn(upcase(destination) in('POWERPOINT'),1,0))
                into :_other separated by '',:_ppt separated by '' from sashelp.vdest;
        quit;
        %if &_listing = 1 %then %do;
            %do i = 1 %to %sysfunc(countw(%superq(_destinations),|));
                ods %scan(%superq(_destinations),&i,|) select none;
            %end;
            ods listing;
            ods listing select all;
            data _out_listing;
                set _report;
                array _chars_ (*) $2000. _character_;   
                retain _tl;
                do i = 1 to dim(_chars_);
                    if upcase(vname(_chars_(i))) in('PVAL' 'PVALMV' 'COVPVAL' 'COVPVALMV') and _chars_(i)^='--' then do;
                        if ^missing(_chars_(i)) then _chars_(i)=strip(scan(_chars_(i),1,'^'))||repeat('*',input(compress(scan(_chars_(i),2,'^'),'{super }'),12.)-1);
                    end;
                    else if upcase(vname(_chars_(i)))='SUBTITLE' then _chars_(i)='A0A0A0'x||strip(_chars_(i));
                    else if upcase(vname(_chars_(i)))='TIMELIST' then _tlflag=1;
                end;  
                if subind=1 and %sysevalf(%superq(title)^=,boolean) and %sysfunc(find(&tabledisplay,title,i))>0 then subtitle=repeat('A0A0'x,2-1)||strip(subtitle);
                else if subind=1 then subtitle=repeat('A0A0'x,1-1)||strip(subtitle);
                else if subind=0 and %sysevalf(%superq(title)^=,boolean) and %sysfunc(find(&tabledisplay,title,i))>0 then subtitle=repeat('A0A0'x,3-1)||strip(subtitle);
                else if subind=0 then subtitle=repeat('A0A0'x,2-1)||strip(subtitle);
                
                length _tl $2000.;
                if _tlflag=1 then do i = 1 to dim(_chars_);
                    /*Timelist*/
                    if upcase(vname(_chars_(i)))='TIMELIST' and ^missing(_chars_(i)) then do;
                        _tl=compbl(tranwrd(tranwrd(_chars_(i),'A0'x,''),'^n',''));
                        do j=1 to countw(_tl,')');
                            _chars_(i)=scan(_tl,j,')');
                            if ^missing(_chars_(i)) then do;
                                _chars_(i)=strip(_chars_(i))||')';
                                if j = 1 then output;
                                else do;
                                    if j = 2 then do k = 1 to dim(_chars_);
                                        if upcase(vname(_chars_(k)))^in('TITLE' 'FOOTNOTE' 'TIMELIST') then call missing(_chars_(k));
                                    end;
                                    output;
                                end;
                            end;
                        end;
                    end;
                    else if upcase(vname(_chars_(i)))='TIMELIST' and missing(_chars_(i)) then output;
                end;
                else output;
                drop i _tl _tlflag;
            run;
            proc contents data=_out_listing noprint out=_outldict;
            run;
            
            proc sql noprint;
                %local _list_cvars;
                select upcase(name) into :_list_cvars separated by '|' from _outldict where type=2 and upcase(name) ^in('TITLE' 'FOOTNOTE');
                %do i = 1 %to %sysfunc(countw(%superq(_list_cvars),|,m));
                    %local _list_%scan(%superq(_list_cvars),&i,|,m);
                %end;
                select %do i = 1 %to %sysfunc(countw(%superq(_list_cvars),|,m)); 
                          %if &i>1 %then %do; , %end;
                          max(length(strip(%scan(%superq(_list_cvars),&i,|,m))))+4
                       %end;
                       into %do i = 1 %to %sysfunc(countw(%superq(_list_cvars),|,m)); 
                                %if &i>1 %then %do; , %end;
                                :_list_%scan(%superq(_list_cvars),&i,|,m) separated by ''
                            %end;
                       from _out_listing;
                       
                %local _list_totlength headerlength datalength;
                %let _list_totlength=0;
                %do i = 1 %to %sysfunc(countw(%superq(_list_cvars),|,m));
                    %if %sysevalf(%qupcase(%scan(%superq(_list_cvars),&i,|,m))=SUBTITLE,boolean) %then %let headerlength=0;
                    %else %do;
                        %if %sysfunc(countw(%superq(t%scan(%superq(_list_cvars),&i,|,m)header),~,m))>1 %then %do j=1 %to %sysfunc(countw(%superq(t%scan(%superq(_list_cvars),&i,|,m)header),~,m));
                            %if &j=1 %then %let headerlength=%length(%qscan(%superq(t%scan(%superq(_list_cvars),&i,|,m)header),&j,~,m));
                            %else %let headerlength=%sysfunc(max(&headerlength,%length(%qscan(%superq(t%scan(%superq(_list_cvars),&i,|,m)header),&j,~,m))));
                        %end;
                        %else %let headerlength=%length(%superq(t%scan(%superq(_list_cvars),&i,|,m)header));
                    %end;
                    %let datalength=%superq(_list_%scan(%superq(_list_cvars),&i,|,m));
                    %let _list_%scan(%superq(_list_cvars),&i,|,m)=%sysfunc(max(&headerlength,&datalength));
                    %let _list_totlength=%sysevalf(&_list_totlength+%sysfunc(max(&headerlength,&datalength)));
                %end;
                alter table _out_listing
                    modify %do i = 1 %to %sysfunc(countw(%superq(_list_cvars),|,m)); 
                                %if &i>1 %then %do; , %end;
                                %scan(%superq(_list_cvars),&i,|,m) char(%superq(_list_%scan(%superq(_list_cvars),&i,|,m)))
                            %end;;  
            quit;
            options linesize=%sysfunc(max(64,%sysfunc(min(256,&_list_totlength)))) nocenter notes; 
            proc report data=_out_listing spacing=0 nowd split='~' missing;
                
                columns
                    ("%sysfunc(tranwrd(%superq(tabletitle),`,~))~%sysfunc(repeat(-,&_list_totlength-1))"
                    modelnum /**Used for sorting and distinguishing Models**/
                        /**Titles and Footnotes are listed first to be used in compute blocks later**/    
                        %do i = 1 %to &_tndisplay_model;
                            %superq(_tndisplay_model_&i)
                        %end;
                        modeltype /**Used to determine if KM or CIF**/
                        subind subtitle /*These are always shown*/
                        /*Statistics*/ 
                        %do i = 1 %to &_tndisplay_stat;
                            %superq(_tndisplay_stat_&i)
                        %end;);
                
                define subind / display noprint; /**Not Printed but defined**/
                define modelnum / order noprint;/**Used to keep models in order**/
                define modeltype / order noprint;/**Used to keep models in order**/
                
                %do i = 1 %to &_tndisplay_model;
                    define %superq(_tndisplay_model_&i) / order noprint;/**Used in compute blocks later**/
                    compute 
                        %if %sysevalf(%qupcase(%superq(_tndisplay_model_&i))=TITLE,boolean) %then %do;
                            before 
                        %end;
                        %else %do;
                            after 
                        %end;
                        %superq(_tndisplay_model_&i) / style={just=l};
                        line @4 %superq(_tndisplay_model_&i) $2000.;
                    endcomp;
                %end;    
                compute before modelnum;
                    count+1;
                    x="%sysfunc(repeat(-,&_list_totlength-1))";
                    if count=1 then len=0;
                    else len=length(x);
                    line @1 x $varying. len;
                endcomp;
                     
                /**If KM and CIF are both used, then add subtitle to each model**/
                %if &_multmethodcheck>1 %then %do;
                    compute before modeltype / style={just=l};
                        length text $150.;
                        if modeltype=0 then text='Kaplan-Meier methods';
                        else if modeltype=1 then text='(1-Kaplan-Meier) methods';
                        else if modeltype=2 then text='Cumulative incidence methods';
                        line @4 text $150.;
                    endcomp;
                %end;
                /**Widths are set to 30 to avoid throwing line-size errors**/
                /**This Summary Table is not designed to be viewed in the output window**/
                define subtitle / display "~%sysfunc(repeat(-,&_list_subtitle-1))"  id; /**Class level descriptions**/
                %do i =1 %to &_tndisplay_stat;
                    %if %qupcase(&&_tndisplay_stat_&i)=TIMELIST %then %do;
                        define timelist / display  center
                            %if &nfoot>0 %then %do j = 1 %to &nfoot;
                                %if %sysevalf(%superq(foot&j)=%nrstr(Kaplan-Meier method;),boolean) %then %do;
                                    "&ttimelistheader%sysfunc(repeat(*,&j-1))~%sysfunc(repeat(-,&_list_timelist-1))"
                                    %let j=&nfoot;
                                %end;
                                %else %if %sysevalf(%superq(foot&j)=%nrstr(1-Kaplan-Meier method;),boolean) %then %do;
                                    "&ttimelistheader%sysfunc(repeat(*,&j-1))~%sysfunc(repeat(-,&_list_timelist-1))"
                                    %let j=&nfoot;
                                %end;
                                %else %if %sysevalf(%superq(foot&j)=%nrstr(Cumulative incidence method;),boolean) %then %do;
                                    "&ttimelistheader%sysfunc(repeat(*,&j-1))~%sysfunc(repeat(-,&_list_timelist-1))"
                                    %let j=&nfoot;
                                %end;
                                %else %if &j=&nfoot %then %do;
                                    "&ttimelistheader~%sysfunc(repeat(-,&_list_timelist-1))"
                                %end;
                            %end;
                            %else %do;
                                "&ttimelistheader~%sysfunc(repeat(-,&_list_timelist-1))"
                            %end;;
                    %end;
                    %else %if %qupcase(&&_tndisplay_stat_&i)=HR %then %do;
                        define hr / display  
                            %if &nfoot>0 %then %do j = 1 %to &nfoot;
                                %if %sysevalf(%superq(foot&j)=%nrstr(Cox model;),boolean) %then %do;
                                    "&thrheader%sysfunc(repeat(*,&j-1))~%sysfunc(repeat(-,&_list_hr-1))"
                                %end;
                            %end; center;
                    %end;
                    %else %if %qupcase(&&_tndisplay_stat_&i)=HRMV %then %do;
                        define hrmv / display  
                            %if &nfoot>0 %then %do j = 1 %to &nfoot;
                                %if %sysevalf(%superq(foot&j)=%nrstr(Cox model;),boolean) %then %do;
                                    "&thrmvheader%sysfunc(repeat(*,&j-1))~%sysfunc(repeat(-,&_list_hrmv-1))"
                                %end;
                            %end; center;
                    %end;
                    %else %if %qupcase(&&_tndisplay_stat_&i)=MEDIAN %then %do;
                        define median / display center                      
                            %if &nfoot>0 %then %do j = 1 %to &nfoot;
                                %if %sysevalf(%superq(foot&j)=%nrstr(Kaplan-Meier method;),boolean) %then %do;
                                    "&tmedianheader%sysfunc(repeat(*,&j-1))~%sysfunc(repeat(-,&_list_median-1))"
                                    %let j=&nfoot;
                                %end;
                                %else %if %sysevalf(%superq(foot&j)=%nrstr(1-Kaplan-Meier method;),boolean) %then %do;
                                    "&tmedianheader%sysfunc(repeat(*,&j-1))~%sysfunc(repeat(-,&_list_median-1))"
                                    %let j=&nfoot;
                                %end;
                                %else %if %sysevalf(%superq(foot&j)=%nrstr(Cumulative incidence method;),boolean) %then %do;
                                    "&tmedianheader%sysfunc(repeat(*,&j-1))~%sysfunc(repeat(-,&_list_median-1))"
                                    %let j=&nfoot;
                                %end;
                                %else %if &j=&nfoot %then %do;
                                    "&tmedianheader~%sysfunc(repeat(-,&_list_median-1))"
                                %end;
                            %end;
                            %else %do;
                                "&tmedianheader~%sysfunc(repeat(-,&_list_median-1))"
                            %end;;
                    %end;
                    %else %do;
                        define %qupcase(&&_tndisplay_stat_&i) / display 
                        "%superq(%sysfunc(compress(t&&_tndisplay_stat_&i..header)))~%sysfunc(repeat(-,%superq(%qupcase(_list_%superq(_tndisplay_stat_&i)))-1))" center;
                    %end;
                %end;
                /**Choose the furthest right column in the dataset**/
                /**This allows other columns to be manipulated as they are all to the left of this column**/
                /**PROC REPORT does not give values to columns to the right of the currently processed columns**/
                /**Creates the overall footnotes at the bottom of the table**/
                compute after /style={just=l};
                    line @1 "%sysfunc(repeat(-,&_list_totlength-1))";
                    /**Creates footnotes with symbols based on which columns are requested with TABLEDISPLAY**/
                    %if &nfoot > 0 %then %do;
                        line @4 
                            %do i = 1 %to &nfoot;
                                "%sysfunc(repeat(*,&i-1))&&foot&i "
                            %end;;
                    %end;
                    %if &nfoot=0 and %sysevalf(%superq(tablefootnote)=,boolean) %then %do;
                        line @4 " ";
                    %end;
                    /**Lists the table footnote**/
                    %if %sysevalf(%superq(tablefootnote)=,boolean) =0 %then %do;
                        line @4 "&tablefootnote";
                    %end;
                endcomp;
            run;
            options nonotes &_center;
            proc datasets nolist nodetails;
                delete _outldict _out_listing ;
            quit;
            ods select all;
        %end;
        %if &_other = 1 or &_ppt = 1 or &_rtf=1 or %sysevalf(%superq(outdoc)^=,boolean) %then %do;
            ODS LISTING CLOSE;
            %local _rloop;
            %if &_other=1 %then %let _rloop=OTHER;
            %if &_ppt=1 and %sysevalf(%superq(_rloop)=,boolean) %then %let _rloop=PPT;
            %else %if &_ppt=1 %then %let _rloop=&_rloop|PPT;
            %do rloop = 1 %to %sysfunc(countw(&_rloop,|));
                %if %sysevalf(%scan(%superq(_rloop),&rloop,|)=OTHER,boolean) %then %do;
                    %if &_ppt=1 %then %do;
                        ods POWERPOINT exclude all;
                    %end;
                %end;
                %else %do;
                    ods POWERPOINT select all;
                    ods POWERPOINT  style=_newsurvtableppt;
                    %do k = 1 %to %sysfunc(countw(%superq(_destinations),|));
                        %if %sysevalf(%qupcase(%qscan(%superq(_destinations),&k,|))^=POWERPOINT,boolean) %then %do;
                            ods %scan(%superq(_destinations),&k,|) exclude all;
                        %end;
                    %end;
                %end;
                options notes;
                proc report data=_report
                    nowd split='~' missing;
                    
                    columns
                        (modelnum /**Used for sorting and distinguishing Models**/
                            /**Titles and Footnotes are listed first to be used in compute blocks later**/    
                            %do i = 1 %to &_tndisplay_model;
                                %superq(_tndisplay_model_&i)
                            %end;
                            modeltype /**Used to determine if KM or CIF**/
                            subind subtitle /*These are always shown*/
                            /*Statistics*/ 
                            %do i = 1 %to &_tndisplay_stat;
                                %superq(_tndisplay_stat_&i)
                            %end;);
                    
                    define subind / display noprint; /**Not Printed but defined**/
                    define modelnum / order noprint;/**Used to keep models in order**/
                    define modeltype / order noprint;/**Used to keep models in order**/
                    
                    %do i = 1 %to &_tndisplay_model;
                        define %superq(_tndisplay_model_&i) / order noprint;/**Used in compute blocks later**/
                        compute 
                            %if %sysevalf(%qupcase(%superq(_tndisplay_model_&i))=TITLE,boolean) %then %do;
                                before 
                            %end;
                            %else %do;
                                after 
                            %end;
                            %superq(_tndisplay_model_&i) / 
                            %if %sysevalf(%qupcase(%superq(_tndisplay_model_&i))=TITLE,boolean) %then %do;
                                style={fontweight=bold just=l bordertopstyle=solid bordertopcolor=black bordertopwidth=0.1}
                            %end;
                            %else %if %sysfunc(find(&tabledisplay,title,i))=0 %then %do;
                                style={fontweight=bold just=l borderbottomstyle=solid borderbottomcolor=black borderbottomwidth=0.1}
                            %end;
                            %else %do;
                                style={fontweight=bold just=l}
                            %end;;
                            line %superq(_tndisplay_model_&i) $2000.;
                        endcomp;
                    %end;       
                    /**If KM and CIF are both used, then add subtitle to each model**/
                    %if &_multmethodcheck>1 %then %do;
                        compute before modeltype / 
                            %if %sysfunc(find(&tabledisplay,title,i))=0 and
                                %sysfunc(find(&tabledisplay,footnote,i))=0 %then %do;
                                style={fontweight=bold just=l bordertopstyle=solid bordertopcolor=black bordertopwidth=0.1}
                            %end;
                            %else %do;
                                style={fontweight=bold just=l} 
                            %end;;
                            length text $150.;
                            if modeltype=0 then text='Kaplan-Meier methods';
                            else if modeltype=1 then text='(1-Kaplan-Meier) methods';
                            else if modeltype=2 then text='Cumulative incidence methods';
                            line @1 text $150.;
                        endcomp;
                    %end;
                    /**Widths are set to 30 to avoid throwing line-size errors**/
                    /**This Summary Table is not designed to be viewed in the output window**/
                    define subtitle / display ''  id style={cellwidth=&tsubtitlewidth}; /**Class level descriptions**/
                    %do i =1 %to &_tndisplay_stat;
                        %if %qupcase(&&_tndisplay_stat_&i)=TIMELIST %then %do;
                            define timelist / display  
                                %if &nfoot>0 %then %do j = 1 %to &nfoot;
                                    %if %sysevalf(%superq(foot&j)=%nrstr(Kaplan-Meier method;),boolean) %then %do;
                                        "&ttimelistheader^{super &j}"
                                    %end;
                                    %else %if %sysevalf(%superq(foot&j)=%nrstr(1-Kaplan-Meier method;),boolean) %then %do;
                                        "&ttimelistheader^{super &j}"
                                    %end;
                                    %else %if %sysevalf(%superq(foot&j)=%nrstr(Cumulative incidence method;),boolean) %then %do;
                                        "&ttimelistheader^{super &j}"
                                    %end;
                                %end;
                                %else %do;
                                    "&ttimelistheader"
                                %end;
                            style={cellwidth=&ttimelistwidth};
                        %end;
                        %else %if %qupcase(&&_tndisplay_stat_&i)=HR %then %do;
                            define hr / display  
                                %if &nfoot>0 %then %do j = 1 %to &nfoot;
                                    %if %sysevalf(%superq(foot&j)=%nrstr(Cox model;),boolean) %then %do;
                                        "&thrheader^{super &j}"
                                    %end;
                                %end; center style={cellwidth=&thrwidth};
                        %end;
                        %else %if %qupcase(&&_tndisplay_stat_&i)=HRMV %then %do;
                            define hrmv / display  
                                %if &nfoot>0 %then %do j = 1 %to &nfoot;
                                    %if %sysevalf(%superq(foot&j)=%nrstr(Cox model;),boolean) %then %do;
                                        "&thrmvheader^{super &j}"
                                    %end;
                                %end; center
                            style={cellwidth=&thrmvwidth};
                        %end;
                        %else %if %qupcase(&&_tndisplay_stat_&i)=MEDIAN %then %do;
                            define median / display                         
                                %if &nfoot>0 %then %do j = 1 %to &nfoot;
                                    %if %sysevalf(%superq(foot&j)=%nrstr(Kaplan-Meier method;),boolean) %then %do;
                                        "&tmedianheader^{super &j}"
                                    %end;
                                    %else %if %sysevalf(%superq(foot&j)=%nrstr(1-Kaplan-Meier method;),boolean) %then %do;
                                        "&tmedianheader^{super &j}"
                                    %end;
                                    %else %if %sysevalf(%superq(foot&j)=%nrstr(Cumulative incidence method;),boolean) %then %do;
                                        "&tmedianheader^{super &j}"
                                    %end;
                                %end;
                                %else %do;
                                    "&tmedianheader"
                                %end;
                            center  style={cellwidth=&tmedianwidth};
                        %end;
                        %else %do;
                            define %qupcase(&&_tndisplay_stat_&i) / display "%superq(%sysfunc(compress(t&&_tndisplay_stat_&i..header)))" center 
                             style={cellwidth=%superq(%sysfunc(compress(t%superq(_tndisplay_stat_&i)width)))};
                        %end;
                    %end;
                    /*Print title before table*/
                    compute before _page_/ 
                        style={leftmargin=0.06in bordertopstyle=none borderbottomstyle=solid borderbottomwidth=0.1 borderbottomcolor=black
                               vjust=bottom just=left color=black background=white};
                        %do i = 1 %to %sysfunc(max(1,%sysfunc(countw(%superq(tabletitle),`,m))));
                            line @1 "%scan(%superq(tabletitle),&i,`,m)";
                        %end;
                    endcomp;
                    /**Choose the furthest right column in the dataset**/
                    /**This allows other columns to be manipulated as they are all to the left of this column**/
                    /**PROC REPORT does not give values to columns to the right of the currently processed columns**/
                    compute &&_tndisplay_stat_&_tndisplay_stat;
                        %if &tableshading=1 %then %do;
                            /**Creates alternating-shading using modulo arithmatic**/
                            if subind=1 then shade=1;
                            else shade+1;
                            if mod(shade,2)=0 then call define(_row_, 'style/merge','style={background=GREYEF');
                        %end;
                        /**Creates an indented list of class levels using the subind variable**/
                        if subind=1 and %sysevalf(%superq(title)^=,boolean) and %sysfunc(find(&tabledisplay,title,i))>0 then 
                            call define('subtitle','style/merge','style={fontweight=bold indent=0.12in}');
                        else if subind=1 then call define('subtitle','style/merge','style={fontweight=bold indent=0.06in}');
                        else if subind=0 and %sysevalf(%superq(title)^=,boolean) and %sysfunc(find(&tabledisplay,title,i))>0 then 
                            call define('subtitle','style/merge','style={indent=0.18in}');
                        else if subind=0 then call define('subtitle','style/merge','style={indent=0.12in}');
                        %if %sysfunc(find(&tabledisplay,title,i))=0 and
                            %sysfunc(find(&tabledisplay,footnote,i))=0 and &_multmethodcheck=1 %then %do;
                            if subind=1 then call define(_row_,'style/merge','style={bordertopstyle=solid bordertopcolor=black bordertopwidth=0.1}');
                        %end;
                    endcomp;
                    /**Creates the overall footnotes at the bottom of the table**/
                    compute after /style={leftmargin=0.06in bordertopstyle=solid bordertopwidth=0.1 bordertopcolor=black vjust=top color=black just=l};
                        /**Creates footnotes with symbols based on which columns are requested with TABLEDISPLAY**/
                        %if &nfoot > 0 %then %do;
                            line @1 
                                %do i = 1 %to &nfoot;
                                    "^{super &i}&&foot&i "
                                %end;;
                        %end;
                        %if &nfoot=0 and %sysevalf(%superq(tablefootnote)=,boolean) %then %do;
                            line @1 " ";
                        %end;
                        /**Lists the table footnote**/
                        %if %sysevalf(%superq(tablefootnote)=,boolean) =0 %then %do;
                            line @1 "&tablefootnote";
                        %end;
                    endcomp;
                run;
                options nonotes; 
            %end;
        %end;
    %end;   
    
    %if %sysevalf(%qupcase(%superq(axiscolor))^=BLACK,boolean) or &summary=1 %then %do;
        %do i = 1 %to %sysfunc(countw(%superq(_destinations),|));
            ods %scan(%superq(_destinations),&i,|) style=%scan(%superq(_styles),&i,|);
        %end;
    %end;
        
    /**Closes the ODS file**/
    %if %sysevalf(%superq(outdoc)=,boolean)=0 %then %do;
        ods &destination close;
    %end;
    /**Outputs Plot Dataset**/
    %if %sysevalf(%superq(outp)=,boolean)=0 %then %do;
        data &outp;
            set _plot;
        run;
    %end; 
        
    %errhandl:
          
    /**Reset Graphics Options**/
    ods graphics / reset=all;
    %if &_listing=1 %then %do;
        ods Listing;
    %end;
    %else %do;
        ods listing close;
    %end;
    ods select all;
    ods results;   
    /**Delete temporary datasets**/
    proc datasets nolist nodetails;
        delete _temp _options _plot _report
            %if %sysevalf(%superq(out)=,boolean) %then %do;
                _summary
            %end; ;
    quit;  
    /**Reload previous Options**/ 
    ods path &_odspath;
    options mergenoby=&_mergenoby &_notes &_qlm linesize=&_linesize;
    goptions device=&_device gsfname=&_gsfname
        xmax=&_xmax ymax=&_ymax xpixels=&_xpixels ypixels=&_ypixels imagestyle=&_imagestyle iback=&_iback;
    %put NEWSURV has finished processing, runtime: %sysfunc(putn(%sysevalf(%sysfunc(TIME())-&_starttime.),mmss.)); 
    %mend;
